
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

datatype Vec<T> {
    Vec(v: [int]T, l: int)
}

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := v->l;
    Vec(v->v[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v->v[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    v->l
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    v->l == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := v->l - 1;
    Vec(v->v[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := v->l - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v->v[j] else v->v[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := v1->l, v1->v, v2->l, v2->v;
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := v->l;
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v->v[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v->v[i := elem], v->l)
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(m[i := m[j]][j := m[i]], v->l))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := v->l;
    (exists i: int :: InRangeVec(v, i) && v->v[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

datatype Multiset<T> {
    Multiset(v: [T]int, l: int)
}

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    s->l
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := s->l;
    (var cnt := s->v[v];
    Multiset(s->v[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := s1->l;
    (var len2 := s2->l;
    Multiset((lambda v:T :: s1->v[v]-s2->v[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (s->l == 0) &&
    (forall v: T :: s->v[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (s1->l <= s2->l) &&
    (forall v: T :: s1->v[v] <= s2->v[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    s->v[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
datatype Table <K, V> {
    Table(v: [K]V, e: [K]bool, l: int)
}

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    t->v[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    t->l
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    t->e[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(t->v[k := v], t->e, t->l)
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(t->v[k := v], t->e[k := true], t->l + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(t->v, t->e[k := false], t->l - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native object::exists_at

// ==================================================================================
// Intrinsic implementation of aggregator and aggregator factory

datatype $1_aggregator_Aggregator {
    $1_aggregator_Aggregator($handle: int, $key: int, $limit: int, $val: int)
}
function {:inline} $Update'$1_aggregator_Aggregator'_handle(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(x, s->$key, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_key(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, x, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_limit(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, x, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_val(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, s->$limit, x)
}
function $IsValid'$1_aggregator_Aggregator'(s: $1_aggregator_Aggregator): bool {
    $IsValid'address'(s->$handle)
      && $IsValid'address'(s->$key)
      && $IsValid'u128'(s->$limit)
      && $IsValid'u128'(s->$val)
}
function {:inline} $IsEqual'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): bool {
    s1 == s2
}
function {:inline} $1_aggregator_spec_get_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
function {:inline} $1_aggregator_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
procedure {:inline 1} $1_aggregator_limit(s: $1_aggregator_Aggregator) returns (res: int) {
    res := s->$limit;
    return;
}
function {:inline} $1_aggregator_spec_get_handle(s: $1_aggregator_Aggregator): int {
    s->$handle
}
function {:inline} $1_aggregator_spec_get_key(s: $1_aggregator_Aggregator): int {
    s->$key
}
function {:inline} $1_aggregator_spec_get_val(s: $1_aggregator_Aggregator): int {
    s->$val
}

function $1_aggregator_spec_read(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_spec_aggregator_set_val(agg: $1_aggregator_Aggregator, val: int): $1_aggregator_Aggregator {
    $Update'$1_aggregator_Aggregator'_val(agg, val)
}

function $1_aggregator_spec_aggregator_get_val(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_factory_spec_new_aggregator(limit: int) : $1_aggregator_Aggregator;

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
    (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_get_limit(agg) == limit));

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
     (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_aggregator_get_val(agg) == 0));

// ==================================================================================
// Native for function_info

procedure $1_function_info_is_identifier(s: Vec int) returns (res: bool);



// Uninterpreted function for all types

function $Arbitrary_value_of'$1_option_Option'address''(): $1_option_Option'address';

function $Arbitrary_value_of'$1_option_Option'u64''(): $1_option_Option'u64';

function $Arbitrary_value_of'$42_access_control_comprehensive_AccessControlSystem'(): $42_access_control_comprehensive_AccessControlSystem;

function $Arbitrary_value_of'$42_access_control_comprehensive_AccessGrant'(): $42_access_control_comprehensive_AccessGrant;

function $Arbitrary_value_of'$42_access_control_comprehensive_AdminCapability'(): $42_access_control_comprehensive_AdminCapability;

function $Arbitrary_value_of'$42_access_control_comprehensive_MultiSigWallet'(): $42_access_control_comprehensive_MultiSigWallet;

function $Arbitrary_value_of'$42_access_control_comprehensive_OwnershipRecord'(): $42_access_control_comprehensive_OwnershipRecord;

function $Arbitrary_value_of'$42_access_control_comprehensive_PendingTransaction'(): $42_access_control_comprehensive_PendingTransaction;

function $Arbitrary_value_of'$42_access_control_comprehensive_Permission'(): $42_access_control_comprehensive_Permission;

function $Arbitrary_value_of'$42_access_control_comprehensive_ProtocolCapability'(): $42_access_control_comprehensive_ProtocolCapability;

function $Arbitrary_value_of'$42_access_control_comprehensive_ProtocolState'(): $42_access_control_comprehensive_ProtocolState;

function $Arbitrary_value_of'$42_access_control_comprehensive_ProtocolWitness'(): $42_access_control_comprehensive_ProtocolWitness;

function $Arbitrary_value_of'$42_access_control_comprehensive_Resource'(): $42_access_control_comprehensive_Resource;

function $Arbitrary_value_of'$42_access_control_comprehensive_ResourceOwnership'(): $42_access_control_comprehensive_ResourceOwnership;

function $Arbitrary_value_of'$42_access_control_comprehensive_Role'(): $42_access_control_comprehensive_Role;

function $Arbitrary_value_of'$42_access_control_comprehensive_RoleManager'(): $42_access_control_comprehensive_RoleManager;

function $Arbitrary_value_of'$42_access_control_comprehensive_RolePermission'(): $42_access_control_comprehensive_RolePermission;

function $Arbitrary_value_of'$42_access_control_comprehensive_SystemState'(): $42_access_control_comprehensive_SystemState;

function $Arbitrary_value_of'$42_access_control_comprehensive_UserRole'(): $42_access_control_comprehensive_UserRole;

function $Arbitrary_value_of'$42_access_control_comprehensive_UserRoleAssignment'(): $42_access_control_comprehensive_UserRoleAssignment;

function $Arbitrary_value_of'$42_integer_vulnerabilities_TimeLock'(): $42_integer_vulnerabilities_TimeLock;

function $Arbitrary_value_of'$42_integer_vulnerabilities_TokenSupply'(): $42_integer_vulnerabilities_TokenSupply;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_Balance'(): $42_reentrancy_comprehensive_Balance;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_Bank'(): $42_reentrancy_comprehensive_Bank;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_BridgeState'(): $42_reentrancy_comprehensive_BridgeState;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_CompletedTransfer'(): $42_reentrancy_comprehensive_CompletedTransfer;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_CrossChainLock'(): $42_reentrancy_comprehensive_CrossChainLock;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_GameState'(): $42_reentrancy_comprehensive_GameState;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_LendingPool'(): $42_reentrancy_comprehensive_LendingPool;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_LiquidationProcess'(): $42_reentrancy_comprehensive_LiquidationProcess;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_PendingTransfer'(): $42_reentrancy_comprehensive_PendingTransfer;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_PlayerScore'(): $42_reentrancy_comprehensive_PlayerScore;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_ResourceVault'(): $42_reentrancy_comprehensive_ResourceVault;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_Subsystem'(): $42_reentrancy_comprehensive_Subsystem;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_UserPosition'(): $42_reentrancy_comprehensive_UserPosition;

function $Arbitrary_value_of'$42_reentrancy_comprehensive_Withdrawal'(): $42_reentrancy_comprehensive_Withdrawal;

function $Arbitrary_value_of'vec'#0''(): Vec (#0);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_AccessGrant''(): Vec ($42_access_control_comprehensive_AccessGrant);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_AdminCapability''(): Vec ($42_access_control_comprehensive_AdminCapability);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_ExecutedTransaction''(): Vec ($42_access_control_comprehensive_ExecutedTransaction);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_OwnershipRecord''(): Vec ($42_access_control_comprehensive_OwnershipRecord);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_PendingTransaction''(): Vec ($42_access_control_comprehensive_PendingTransaction);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_Permission''(): Vec ($42_access_control_comprehensive_Permission);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_Resource''(): Vec ($42_access_control_comprehensive_Resource);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_Role''(): Vec ($42_access_control_comprehensive_Role);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_RolePermission''(): Vec ($42_access_control_comprehensive_RolePermission);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_TransferRecord''(): Vec ($42_access_control_comprehensive_TransferRecord);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_TreasuryCapability''(): Vec ($42_access_control_comprehensive_TreasuryCapability);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_UserRole''(): Vec ($42_access_control_comprehensive_UserRole);

function $Arbitrary_value_of'vec'$42_access_control_comprehensive_UserRoleAssignment''(): Vec ($42_access_control_comprehensive_UserRoleAssignment);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_Balance''(): Vec ($42_reentrancy_comprehensive_Balance);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_CompletedTransfer''(): Vec ($42_reentrancy_comprehensive_CompletedTransfer);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_CrossChainLock''(): Vec ($42_reentrancy_comprehensive_CrossChainLock);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_LiquidationProcess''(): Vec ($42_reentrancy_comprehensive_LiquidationProcess);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_PendingTransfer''(): Vec ($42_reentrancy_comprehensive_PendingTransfer);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_PlayerScore''(): Vec ($42_reentrancy_comprehensive_PlayerScore);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_QueuedOperation''(): Vec ($42_reentrancy_comprehensive_QueuedOperation);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_Subsystem''(): Vec ($42_reentrancy_comprehensive_Subsystem);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_UserPosition''(): Vec ($42_reentrancy_comprehensive_UserPosition);

function $Arbitrary_value_of'vec'$42_reentrancy_comprehensive_Withdrawal''(): Vec ($42_reentrancy_comprehensive_Withdrawal);

function $Arbitrary_value_of'vec'bool''(): Vec (bool);

function $Arbitrary_value_of'vec'address''(): Vec (int);

function $Arbitrary_value_of'vec'u64''(): Vec (int);

function $Arbitrary_value_of'vec'u8''(): Vec (int);

function $Arbitrary_value_of'bool'(): bool;

function $Arbitrary_value_of'address'(): int;

function $Arbitrary_value_of'u128'(): int;

function $Arbitrary_value_of'u256'(): int;

function $Arbitrary_value_of'u64'(): int;

function $Arbitrary_value_of'u8'(): int;

function $Arbitrary_value_of'vec'bv64''(): Vec (bv64);

function $Arbitrary_value_of'vec'bv8''(): Vec (bv8);

function $Arbitrary_value_of'bv128'(): bv128;

function $Arbitrary_value_of'bv256'(): bv256;

function $Arbitrary_value_of'bv64'(): bv64;

function $Arbitrary_value_of'bv8'(): bv8;



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

datatype $Range {
    $Range(lb: int, ub: int)
}

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(r->lb) &&  $IsValid'u64'(r->ub)
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   r->lb <= i && i < r->ub
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

datatype $Location {
    // A global resource location within the statically known resource type's memory,
    // where `a` is an address.
    $Global(a: int),
    // A local location. `i` is the unique index of the local.
    $Local(i: int),
    // The location of a reference outside of the verification scope, for example, a `&mut` parameter
    // of the function being verified. References with these locations don't need to be written back
    // when mutation ends.
    $Param(i: int),
    // The location of an uninitialized mutation. Using this to make sure that the location
    // will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
    $Uninitialized()
}

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
datatype $Mutation<T> {
    $Mutation(l: $Location, p: Vec int, v: T)
}

// Representation of memory for a given type.
datatype $Memory<T> {
    $Memory(domain: [int]bool, contents: [int]T)
}

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    ref->v
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(m->l, m->p, v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(m->l, ExtendVec(m->p, offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    parent->l == child->l && parent->p == child->p
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    m1->l == m2->l
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    (m->l) is $Global
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    m->l == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    (m->l)->a
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    m->domain[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    m->contents[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(m->domain[a := true], m->contents[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := false], m->contents)
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := s->domain[a]],
            m->contents[a := s->contents[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}


function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}


function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}


function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}


function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}


function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}


function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}


function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}


function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}


function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}


function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}


function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, r->lb, r->ub)
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'#0''(v: Vec (#0), prefix: Vec (#0)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'#0'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'#0''(v: Vec (#0), suffix: Vec (#0)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'#0'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'#0'(m: $Mutation (Vec (#0)), left: int, right: int) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'#0'(m: $Mutation (Vec (#0)), rot: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'#0'(m: $Mutation (Vec (#0)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var mid_left_vec: Vec (#0);
    var mid_right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'#0'(m: $Mutation (Vec (#0)), i: int, e: #0) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_AccessGrant`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_AccessGrant''(v1: Vec ($42_access_control_comprehensive_AccessGrant), v2: Vec ($42_access_control_comprehensive_AccessGrant)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_AccessGrant'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_AccessGrant''(v: Vec ($42_access_control_comprehensive_AccessGrant), prefix: Vec ($42_access_control_comprehensive_AccessGrant)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_AccessGrant'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_AccessGrant''(v: Vec ($42_access_control_comprehensive_AccessGrant), suffix: Vec ($42_access_control_comprehensive_AccessGrant)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_AccessGrant'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_AccessGrant''(v: Vec ($42_access_control_comprehensive_AccessGrant)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_AccessGrant'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), e: $42_access_control_comprehensive_AccessGrant): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_AccessGrant'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), e: $42_access_control_comprehensive_AccessGrant): int;
axiom (forall v: Vec ($42_access_control_comprehensive_AccessGrant), e: $42_access_control_comprehensive_AccessGrant:: {$IndexOfVec'$42_access_control_comprehensive_AccessGrant'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_AccessGrant'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_AccessGrant'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_AccessGrant'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_AccessGrant'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_AccessGrant'(): Vec ($42_access_control_comprehensive_AccessGrant) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_AccessGrant'() returns (v: Vec ($42_access_control_comprehensive_AccessGrant)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_AccessGrant'(): Vec ($42_access_control_comprehensive_AccessGrant) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), val: $42_access_control_comprehensive_AccessGrant) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), val: $42_access_control_comprehensive_AccessGrant): Vec ($42_access_control_comprehensive_AccessGrant) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) returns (e: $42_access_control_comprehensive_AccessGrant, m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    var v: Vec ($42_access_control_comprehensive_AccessGrant);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), other: Vec ($42_access_control_comprehensive_AccessGrant)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), other: Vec ($42_access_control_comprehensive_AccessGrant)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_AccessGrant)), m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_AccessGrant)), m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    var left_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var mid_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var right_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var v: Vec ($42_access_control_comprehensive_AccessGrant);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    var v: Vec ($42_access_control_comprehensive_AccessGrant);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var right_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    var left_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var mid_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var right_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var mid_left_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var mid_right_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var v: Vec ($42_access_control_comprehensive_AccessGrant);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), i: int, e: $42_access_control_comprehensive_AccessGrant) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant))) {
    var left_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var right_vec: Vec ($42_access_control_comprehensive_AccessGrant);
    var v: Vec ($42_access_control_comprehensive_AccessGrant);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), i: int) returns (dst: $42_access_control_comprehensive_AccessGrant) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), i: int): $42_access_control_comprehensive_AccessGrant {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_AccessGrant), m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)))
{
    var v: Vec ($42_access_control_comprehensive_AccessGrant);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), i: int): $42_access_control_comprehensive_AccessGrant {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)))
{
    var v: Vec ($42_access_control_comprehensive_AccessGrant);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), i: int, j: int): Vec ($42_access_control_comprehensive_AccessGrant) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), i: int) returns (e: $42_access_control_comprehensive_AccessGrant, m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)))
{
    var v: Vec ($42_access_control_comprehensive_AccessGrant);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_AccessGrant'(m: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)), i: int) returns (e: $42_access_control_comprehensive_AccessGrant, m': $Mutation (Vec ($42_access_control_comprehensive_AccessGrant)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_AccessGrant);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), e: $42_access_control_comprehensive_AccessGrant) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_AccessGrant'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_AccessGrant'(v: Vec ($42_access_control_comprehensive_AccessGrant), e: $42_access_control_comprehensive_AccessGrant) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_AccessGrant'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_AdminCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_AdminCapability''(v1: Vec ($42_access_control_comprehensive_AdminCapability), v2: Vec ($42_access_control_comprehensive_AdminCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_AdminCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_AdminCapability''(v: Vec ($42_access_control_comprehensive_AdminCapability), prefix: Vec ($42_access_control_comprehensive_AdminCapability)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_AdminCapability'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_AdminCapability''(v: Vec ($42_access_control_comprehensive_AdminCapability), suffix: Vec ($42_access_control_comprehensive_AdminCapability)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_AdminCapability'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_AdminCapability''(v: Vec ($42_access_control_comprehensive_AdminCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_AdminCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), e: $42_access_control_comprehensive_AdminCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_AdminCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), e: $42_access_control_comprehensive_AdminCapability): int;
axiom (forall v: Vec ($42_access_control_comprehensive_AdminCapability), e: $42_access_control_comprehensive_AdminCapability:: {$IndexOfVec'$42_access_control_comprehensive_AdminCapability'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_AdminCapability'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_AdminCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_AdminCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_AdminCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_AdminCapability'(): Vec ($42_access_control_comprehensive_AdminCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_AdminCapability'() returns (v: Vec ($42_access_control_comprehensive_AdminCapability)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_AdminCapability'(): Vec ($42_access_control_comprehensive_AdminCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), val: $42_access_control_comprehensive_AdminCapability) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), val: $42_access_control_comprehensive_AdminCapability): Vec ($42_access_control_comprehensive_AdminCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) returns (e: $42_access_control_comprehensive_AdminCapability, m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    var v: Vec ($42_access_control_comprehensive_AdminCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), other: Vec ($42_access_control_comprehensive_AdminCapability)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), other: Vec ($42_access_control_comprehensive_AdminCapability)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_AdminCapability)), m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_AdminCapability)), m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    var left_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var mid_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var right_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var v: Vec ($42_access_control_comprehensive_AdminCapability);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    var v: Vec ($42_access_control_comprehensive_AdminCapability);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var right_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    var left_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var mid_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var right_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var mid_left_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var mid_right_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var v: Vec ($42_access_control_comprehensive_AdminCapability);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), i: int, e: $42_access_control_comprehensive_AdminCapability) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability))) {
    var left_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var right_vec: Vec ($42_access_control_comprehensive_AdminCapability);
    var v: Vec ($42_access_control_comprehensive_AdminCapability);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), i: int) returns (dst: $42_access_control_comprehensive_AdminCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), i: int): $42_access_control_comprehensive_AdminCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_AdminCapability), m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)))
{
    var v: Vec ($42_access_control_comprehensive_AdminCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), i: int): $42_access_control_comprehensive_AdminCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)))
{
    var v: Vec ($42_access_control_comprehensive_AdminCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), i: int, j: int): Vec ($42_access_control_comprehensive_AdminCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), i: int) returns (e: $42_access_control_comprehensive_AdminCapability, m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)))
{
    var v: Vec ($42_access_control_comprehensive_AdminCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_AdminCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)), i: int) returns (e: $42_access_control_comprehensive_AdminCapability, m': $Mutation (Vec ($42_access_control_comprehensive_AdminCapability)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_AdminCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), e: $42_access_control_comprehensive_AdminCapability) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_AdminCapability'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_AdminCapability'(v: Vec ($42_access_control_comprehensive_AdminCapability), e: $42_access_control_comprehensive_AdminCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_AdminCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_ExecutedTransaction`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_ExecutedTransaction''(v1: Vec ($42_access_control_comprehensive_ExecutedTransaction), v2: Vec ($42_access_control_comprehensive_ExecutedTransaction)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_ExecutedTransaction'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_ExecutedTransaction''(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), prefix: Vec ($42_access_control_comprehensive_ExecutedTransaction)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_ExecutedTransaction'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_ExecutedTransaction''(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), suffix: Vec ($42_access_control_comprehensive_ExecutedTransaction)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_ExecutedTransaction'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_ExecutedTransaction''(v: Vec ($42_access_control_comprehensive_ExecutedTransaction)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_ExecutedTransaction'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), e: $42_access_control_comprehensive_ExecutedTransaction): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_ExecutedTransaction'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), e: $42_access_control_comprehensive_ExecutedTransaction): int;
axiom (forall v: Vec ($42_access_control_comprehensive_ExecutedTransaction), e: $42_access_control_comprehensive_ExecutedTransaction:: {$IndexOfVec'$42_access_control_comprehensive_ExecutedTransaction'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_ExecutedTransaction'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_ExecutedTransaction'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_ExecutedTransaction'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_ExecutedTransaction'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_ExecutedTransaction'(): Vec ($42_access_control_comprehensive_ExecutedTransaction) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_ExecutedTransaction'() returns (v: Vec ($42_access_control_comprehensive_ExecutedTransaction)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_ExecutedTransaction'(): Vec ($42_access_control_comprehensive_ExecutedTransaction) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), val: $42_access_control_comprehensive_ExecutedTransaction) returns (m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), val: $42_access_control_comprehensive_ExecutedTransaction): Vec ($42_access_control_comprehensive_ExecutedTransaction) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) returns (e: $42_access_control_comprehensive_ExecutedTransaction, m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), other: Vec ($42_access_control_comprehensive_ExecutedTransaction)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), other: Vec ($42_access_control_comprehensive_ExecutedTransaction)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_ExecutedTransaction)), m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_ExecutedTransaction)), m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    var left_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var mid_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    var left_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var mid_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var mid_left_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var mid_right_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), i: int, e: $42_access_control_comprehensive_ExecutedTransaction) returns (m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction))) {
    var left_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), i: int) returns (dst: $42_access_control_comprehensive_ExecutedTransaction) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), i: int): $42_access_control_comprehensive_ExecutedTransaction {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_ExecutedTransaction), m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)))
{
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), i: int): $42_access_control_comprehensive_ExecutedTransaction {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)))
{
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), i: int, j: int): Vec ($42_access_control_comprehensive_ExecutedTransaction) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), i: int) returns (e: $42_access_control_comprehensive_ExecutedTransaction, m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)))
{
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_ExecutedTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)), i: int) returns (e: $42_access_control_comprehensive_ExecutedTransaction, m': $Mutation (Vec ($42_access_control_comprehensive_ExecutedTransaction)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_ExecutedTransaction);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), e: $42_access_control_comprehensive_ExecutedTransaction) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_ExecutedTransaction'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_ExecutedTransaction'(v: Vec ($42_access_control_comprehensive_ExecutedTransaction), e: $42_access_control_comprehensive_ExecutedTransaction) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_ExecutedTransaction'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_OwnershipRecord`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_OwnershipRecord''(v1: Vec ($42_access_control_comprehensive_OwnershipRecord), v2: Vec ($42_access_control_comprehensive_OwnershipRecord)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_OwnershipRecord'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_OwnershipRecord''(v: Vec ($42_access_control_comprehensive_OwnershipRecord), prefix: Vec ($42_access_control_comprehensive_OwnershipRecord)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_OwnershipRecord'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_OwnershipRecord''(v: Vec ($42_access_control_comprehensive_OwnershipRecord), suffix: Vec ($42_access_control_comprehensive_OwnershipRecord)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_OwnershipRecord'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_OwnershipRecord''(v: Vec ($42_access_control_comprehensive_OwnershipRecord)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_OwnershipRecord'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), e: $42_access_control_comprehensive_OwnershipRecord): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_OwnershipRecord'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), e: $42_access_control_comprehensive_OwnershipRecord): int;
axiom (forall v: Vec ($42_access_control_comprehensive_OwnershipRecord), e: $42_access_control_comprehensive_OwnershipRecord:: {$IndexOfVec'$42_access_control_comprehensive_OwnershipRecord'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_OwnershipRecord'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_OwnershipRecord'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_OwnershipRecord'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_OwnershipRecord'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_OwnershipRecord'(): Vec ($42_access_control_comprehensive_OwnershipRecord) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_OwnershipRecord'() returns (v: Vec ($42_access_control_comprehensive_OwnershipRecord)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_OwnershipRecord'(): Vec ($42_access_control_comprehensive_OwnershipRecord) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), val: $42_access_control_comprehensive_OwnershipRecord) returns (m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), val: $42_access_control_comprehensive_OwnershipRecord): Vec ($42_access_control_comprehensive_OwnershipRecord) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) returns (e: $42_access_control_comprehensive_OwnershipRecord, m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), other: Vec ($42_access_control_comprehensive_OwnershipRecord)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), other: Vec ($42_access_control_comprehensive_OwnershipRecord)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_OwnershipRecord)), m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_OwnershipRecord)), m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    var left_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var mid_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var right_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var right_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    var left_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var mid_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var right_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var mid_left_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var mid_right_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), i: int, e: $42_access_control_comprehensive_OwnershipRecord) returns (m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord))) {
    var left_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var right_vec: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), i: int) returns (dst: $42_access_control_comprehensive_OwnershipRecord) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), i: int): $42_access_control_comprehensive_OwnershipRecord {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_OwnershipRecord), m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)))
{
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), i: int): $42_access_control_comprehensive_OwnershipRecord {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)))
{
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), i: int, j: int): Vec ($42_access_control_comprehensive_OwnershipRecord) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), i: int) returns (e: $42_access_control_comprehensive_OwnershipRecord, m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)))
{
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_OwnershipRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)), i: int) returns (e: $42_access_control_comprehensive_OwnershipRecord, m': $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_OwnershipRecord);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), e: $42_access_control_comprehensive_OwnershipRecord) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_OwnershipRecord'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_OwnershipRecord'(v: Vec ($42_access_control_comprehensive_OwnershipRecord), e: $42_access_control_comprehensive_OwnershipRecord) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_OwnershipRecord'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_PendingTransaction`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_PendingTransaction''(v1: Vec ($42_access_control_comprehensive_PendingTransaction), v2: Vec ($42_access_control_comprehensive_PendingTransaction)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_PendingTransaction'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_PendingTransaction''(v: Vec ($42_access_control_comprehensive_PendingTransaction), prefix: Vec ($42_access_control_comprehensive_PendingTransaction)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_PendingTransaction'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_PendingTransaction''(v: Vec ($42_access_control_comprehensive_PendingTransaction), suffix: Vec ($42_access_control_comprehensive_PendingTransaction)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_PendingTransaction'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_PendingTransaction''(v: Vec ($42_access_control_comprehensive_PendingTransaction)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_PendingTransaction'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), e: $42_access_control_comprehensive_PendingTransaction): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_PendingTransaction'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), e: $42_access_control_comprehensive_PendingTransaction): int;
axiom (forall v: Vec ($42_access_control_comprehensive_PendingTransaction), e: $42_access_control_comprehensive_PendingTransaction:: {$IndexOfVec'$42_access_control_comprehensive_PendingTransaction'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_PendingTransaction'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_PendingTransaction'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_PendingTransaction'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_PendingTransaction'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_PendingTransaction'(): Vec ($42_access_control_comprehensive_PendingTransaction) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_PendingTransaction'() returns (v: Vec ($42_access_control_comprehensive_PendingTransaction)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_PendingTransaction'(): Vec ($42_access_control_comprehensive_PendingTransaction) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), val: $42_access_control_comprehensive_PendingTransaction) returns (m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), val: $42_access_control_comprehensive_PendingTransaction): Vec ($42_access_control_comprehensive_PendingTransaction) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) returns (e: $42_access_control_comprehensive_PendingTransaction, m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), other: Vec ($42_access_control_comprehensive_PendingTransaction)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), other: Vec ($42_access_control_comprehensive_PendingTransaction)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_PendingTransaction)), m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_PendingTransaction)), m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    var left_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var mid_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    var left_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var mid_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var mid_left_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var mid_right_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), i: int, e: $42_access_control_comprehensive_PendingTransaction) returns (m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction))) {
    var left_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var right_vec: Vec ($42_access_control_comprehensive_PendingTransaction);
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), i: int) returns (dst: $42_access_control_comprehensive_PendingTransaction) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), i: int): $42_access_control_comprehensive_PendingTransaction {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_PendingTransaction), m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)))
{
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), i: int): $42_access_control_comprehensive_PendingTransaction {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)))
{
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), i: int, j: int): Vec ($42_access_control_comprehensive_PendingTransaction) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), i: int) returns (e: $42_access_control_comprehensive_PendingTransaction, m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)))
{
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_PendingTransaction'(m: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)), i: int) returns (e: $42_access_control_comprehensive_PendingTransaction, m': $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_PendingTransaction);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), e: $42_access_control_comprehensive_PendingTransaction) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_PendingTransaction'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_PendingTransaction'(v: Vec ($42_access_control_comprehensive_PendingTransaction), e: $42_access_control_comprehensive_PendingTransaction) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_PendingTransaction'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_Permission`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_Permission''(v1: Vec ($42_access_control_comprehensive_Permission), v2: Vec ($42_access_control_comprehensive_Permission)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_Permission'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_Permission''(v: Vec ($42_access_control_comprehensive_Permission), prefix: Vec ($42_access_control_comprehensive_Permission)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_Permission'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_Permission''(v: Vec ($42_access_control_comprehensive_Permission), suffix: Vec ($42_access_control_comprehensive_Permission)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_Permission'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_Permission''(v: Vec ($42_access_control_comprehensive_Permission)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_Permission'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), e: $42_access_control_comprehensive_Permission): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_Permission'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), e: $42_access_control_comprehensive_Permission): int;
axiom (forall v: Vec ($42_access_control_comprehensive_Permission), e: $42_access_control_comprehensive_Permission:: {$IndexOfVec'$42_access_control_comprehensive_Permission'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_Permission'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_Permission'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_Permission'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_Permission'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_Permission'(): Vec ($42_access_control_comprehensive_Permission) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_Permission'() returns (v: Vec ($42_access_control_comprehensive_Permission)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_Permission'(): Vec ($42_access_control_comprehensive_Permission) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), val: $42_access_control_comprehensive_Permission) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), val: $42_access_control_comprehensive_Permission): Vec ($42_access_control_comprehensive_Permission) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission))) returns (e: $42_access_control_comprehensive_Permission, m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    var v: Vec ($42_access_control_comprehensive_Permission);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), other: Vec ($42_access_control_comprehensive_Permission)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), other: Vec ($42_access_control_comprehensive_Permission)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_Permission)), m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_Permission)), m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    var left_vec: Vec ($42_access_control_comprehensive_Permission);
    var mid_vec: Vec ($42_access_control_comprehensive_Permission);
    var right_vec: Vec ($42_access_control_comprehensive_Permission);
    var v: Vec ($42_access_control_comprehensive_Permission);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    var v: Vec ($42_access_control_comprehensive_Permission);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_Permission);
    var right_vec: Vec ($42_access_control_comprehensive_Permission);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    var left_vec: Vec ($42_access_control_comprehensive_Permission);
    var mid_vec: Vec ($42_access_control_comprehensive_Permission);
    var right_vec: Vec ($42_access_control_comprehensive_Permission);
    var mid_left_vec: Vec ($42_access_control_comprehensive_Permission);
    var mid_right_vec: Vec ($42_access_control_comprehensive_Permission);
    var v: Vec ($42_access_control_comprehensive_Permission);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), i: int, e: $42_access_control_comprehensive_Permission) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Permission))) {
    var left_vec: Vec ($42_access_control_comprehensive_Permission);
    var right_vec: Vec ($42_access_control_comprehensive_Permission);
    var v: Vec ($42_access_control_comprehensive_Permission);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), i: int) returns (dst: $42_access_control_comprehensive_Permission) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), i: int): $42_access_control_comprehensive_Permission {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_Permission), m': $Mutation (Vec ($42_access_control_comprehensive_Permission)))
{
    var v: Vec ($42_access_control_comprehensive_Permission);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), i: int): $42_access_control_comprehensive_Permission {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Permission)))
{
    var v: Vec ($42_access_control_comprehensive_Permission);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), i: int, j: int): Vec ($42_access_control_comprehensive_Permission) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), i: int) returns (e: $42_access_control_comprehensive_Permission, m': $Mutation (Vec ($42_access_control_comprehensive_Permission)))
{
    var v: Vec ($42_access_control_comprehensive_Permission);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_Permission'(m: $Mutation (Vec ($42_access_control_comprehensive_Permission)), i: int) returns (e: $42_access_control_comprehensive_Permission, m': $Mutation (Vec ($42_access_control_comprehensive_Permission)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_Permission);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), e: $42_access_control_comprehensive_Permission) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_Permission'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_Permission'(v: Vec ($42_access_control_comprehensive_Permission), e: $42_access_control_comprehensive_Permission) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_Permission'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_Resource`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_Resource''(v1: Vec ($42_access_control_comprehensive_Resource), v2: Vec ($42_access_control_comprehensive_Resource)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_Resource'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_Resource''(v: Vec ($42_access_control_comprehensive_Resource), prefix: Vec ($42_access_control_comprehensive_Resource)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_Resource'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_Resource''(v: Vec ($42_access_control_comprehensive_Resource), suffix: Vec ($42_access_control_comprehensive_Resource)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_Resource'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_Resource''(v: Vec ($42_access_control_comprehensive_Resource)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_Resource'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), e: $42_access_control_comprehensive_Resource): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_Resource'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), e: $42_access_control_comprehensive_Resource): int;
axiom (forall v: Vec ($42_access_control_comprehensive_Resource), e: $42_access_control_comprehensive_Resource:: {$IndexOfVec'$42_access_control_comprehensive_Resource'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_Resource'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_Resource'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_Resource'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_Resource'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_Resource'(): Vec ($42_access_control_comprehensive_Resource) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_Resource'() returns (v: Vec ($42_access_control_comprehensive_Resource)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_Resource'(): Vec ($42_access_control_comprehensive_Resource) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), val: $42_access_control_comprehensive_Resource) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), val: $42_access_control_comprehensive_Resource): Vec ($42_access_control_comprehensive_Resource) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource))) returns (e: $42_access_control_comprehensive_Resource, m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    var v: Vec ($42_access_control_comprehensive_Resource);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), other: Vec ($42_access_control_comprehensive_Resource)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), other: Vec ($42_access_control_comprehensive_Resource)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_Resource)), m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_Resource)), m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    var left_vec: Vec ($42_access_control_comprehensive_Resource);
    var mid_vec: Vec ($42_access_control_comprehensive_Resource);
    var right_vec: Vec ($42_access_control_comprehensive_Resource);
    var v: Vec ($42_access_control_comprehensive_Resource);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    var v: Vec ($42_access_control_comprehensive_Resource);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_Resource);
    var right_vec: Vec ($42_access_control_comprehensive_Resource);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    var left_vec: Vec ($42_access_control_comprehensive_Resource);
    var mid_vec: Vec ($42_access_control_comprehensive_Resource);
    var right_vec: Vec ($42_access_control_comprehensive_Resource);
    var mid_left_vec: Vec ($42_access_control_comprehensive_Resource);
    var mid_right_vec: Vec ($42_access_control_comprehensive_Resource);
    var v: Vec ($42_access_control_comprehensive_Resource);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), i: int, e: $42_access_control_comprehensive_Resource) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Resource))) {
    var left_vec: Vec ($42_access_control_comprehensive_Resource);
    var right_vec: Vec ($42_access_control_comprehensive_Resource);
    var v: Vec ($42_access_control_comprehensive_Resource);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), i: int) returns (dst: $42_access_control_comprehensive_Resource) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), i: int): $42_access_control_comprehensive_Resource {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_Resource), m': $Mutation (Vec ($42_access_control_comprehensive_Resource)))
{
    var v: Vec ($42_access_control_comprehensive_Resource);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), i: int): $42_access_control_comprehensive_Resource {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Resource)))
{
    var v: Vec ($42_access_control_comprehensive_Resource);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), i: int, j: int): Vec ($42_access_control_comprehensive_Resource) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), i: int) returns (e: $42_access_control_comprehensive_Resource, m': $Mutation (Vec ($42_access_control_comprehensive_Resource)))
{
    var v: Vec ($42_access_control_comprehensive_Resource);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_Resource'(m: $Mutation (Vec ($42_access_control_comprehensive_Resource)), i: int) returns (e: $42_access_control_comprehensive_Resource, m': $Mutation (Vec ($42_access_control_comprehensive_Resource)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_Resource);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), e: $42_access_control_comprehensive_Resource) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_Resource'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_Resource'(v: Vec ($42_access_control_comprehensive_Resource), e: $42_access_control_comprehensive_Resource) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_Resource'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_Role`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_Role''(v1: Vec ($42_access_control_comprehensive_Role), v2: Vec ($42_access_control_comprehensive_Role)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_Role'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_Role''(v: Vec ($42_access_control_comprehensive_Role), prefix: Vec ($42_access_control_comprehensive_Role)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_Role'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_Role''(v: Vec ($42_access_control_comprehensive_Role), suffix: Vec ($42_access_control_comprehensive_Role)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_Role'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_Role''(v: Vec ($42_access_control_comprehensive_Role)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_Role'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), e: $42_access_control_comprehensive_Role): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_Role'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), e: $42_access_control_comprehensive_Role): int;
axiom (forall v: Vec ($42_access_control_comprehensive_Role), e: $42_access_control_comprehensive_Role:: {$IndexOfVec'$42_access_control_comprehensive_Role'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_Role'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_Role'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_Role'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_Role'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_Role'(): Vec ($42_access_control_comprehensive_Role) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_Role'() returns (v: Vec ($42_access_control_comprehensive_Role)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_Role'(): Vec ($42_access_control_comprehensive_Role) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), val: $42_access_control_comprehensive_Role) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), val: $42_access_control_comprehensive_Role): Vec ($42_access_control_comprehensive_Role) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role))) returns (e: $42_access_control_comprehensive_Role, m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    var v: Vec ($42_access_control_comprehensive_Role);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), other: Vec ($42_access_control_comprehensive_Role)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), other: Vec ($42_access_control_comprehensive_Role)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_Role)), m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_Role)), m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    var left_vec: Vec ($42_access_control_comprehensive_Role);
    var mid_vec: Vec ($42_access_control_comprehensive_Role);
    var right_vec: Vec ($42_access_control_comprehensive_Role);
    var v: Vec ($42_access_control_comprehensive_Role);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    var v: Vec ($42_access_control_comprehensive_Role);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_Role);
    var right_vec: Vec ($42_access_control_comprehensive_Role);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    var left_vec: Vec ($42_access_control_comprehensive_Role);
    var mid_vec: Vec ($42_access_control_comprehensive_Role);
    var right_vec: Vec ($42_access_control_comprehensive_Role);
    var mid_left_vec: Vec ($42_access_control_comprehensive_Role);
    var mid_right_vec: Vec ($42_access_control_comprehensive_Role);
    var v: Vec ($42_access_control_comprehensive_Role);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), i: int, e: $42_access_control_comprehensive_Role) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Role))) {
    var left_vec: Vec ($42_access_control_comprehensive_Role);
    var right_vec: Vec ($42_access_control_comprehensive_Role);
    var v: Vec ($42_access_control_comprehensive_Role);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), i: int) returns (dst: $42_access_control_comprehensive_Role) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), i: int): $42_access_control_comprehensive_Role {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_Role), m': $Mutation (Vec ($42_access_control_comprehensive_Role)))
{
    var v: Vec ($42_access_control_comprehensive_Role);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), i: int): $42_access_control_comprehensive_Role {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_Role)))
{
    var v: Vec ($42_access_control_comprehensive_Role);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), i: int, j: int): Vec ($42_access_control_comprehensive_Role) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), i: int) returns (e: $42_access_control_comprehensive_Role, m': $Mutation (Vec ($42_access_control_comprehensive_Role)))
{
    var v: Vec ($42_access_control_comprehensive_Role);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_Role'(m: $Mutation (Vec ($42_access_control_comprehensive_Role)), i: int) returns (e: $42_access_control_comprehensive_Role, m': $Mutation (Vec ($42_access_control_comprehensive_Role)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_Role);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), e: $42_access_control_comprehensive_Role) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_Role'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_Role'(v: Vec ($42_access_control_comprehensive_Role), e: $42_access_control_comprehensive_Role) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_Role'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_RolePermission`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_RolePermission''(v1: Vec ($42_access_control_comprehensive_RolePermission), v2: Vec ($42_access_control_comprehensive_RolePermission)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_RolePermission'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_RolePermission''(v: Vec ($42_access_control_comprehensive_RolePermission), prefix: Vec ($42_access_control_comprehensive_RolePermission)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_RolePermission'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_RolePermission''(v: Vec ($42_access_control_comprehensive_RolePermission), suffix: Vec ($42_access_control_comprehensive_RolePermission)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_RolePermission'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_RolePermission''(v: Vec ($42_access_control_comprehensive_RolePermission)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_RolePermission'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), e: $42_access_control_comprehensive_RolePermission): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_RolePermission'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), e: $42_access_control_comprehensive_RolePermission): int;
axiom (forall v: Vec ($42_access_control_comprehensive_RolePermission), e: $42_access_control_comprehensive_RolePermission:: {$IndexOfVec'$42_access_control_comprehensive_RolePermission'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_RolePermission'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_RolePermission'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_RolePermission'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_RolePermission'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_RolePermission'(): Vec ($42_access_control_comprehensive_RolePermission) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_RolePermission'() returns (v: Vec ($42_access_control_comprehensive_RolePermission)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_RolePermission'(): Vec ($42_access_control_comprehensive_RolePermission) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), val: $42_access_control_comprehensive_RolePermission) returns (m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), val: $42_access_control_comprehensive_RolePermission): Vec ($42_access_control_comprehensive_RolePermission) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) returns (e: $42_access_control_comprehensive_RolePermission, m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    var v: Vec ($42_access_control_comprehensive_RolePermission);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), other: Vec ($42_access_control_comprehensive_RolePermission)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), other: Vec ($42_access_control_comprehensive_RolePermission)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_RolePermission)), m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_RolePermission)), m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    var left_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var mid_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var right_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var v: Vec ($42_access_control_comprehensive_RolePermission);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    var v: Vec ($42_access_control_comprehensive_RolePermission);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var right_vec: Vec ($42_access_control_comprehensive_RolePermission);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    var left_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var mid_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var right_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var mid_left_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var mid_right_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var v: Vec ($42_access_control_comprehensive_RolePermission);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), i: int, e: $42_access_control_comprehensive_RolePermission) returns (m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission))) {
    var left_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var right_vec: Vec ($42_access_control_comprehensive_RolePermission);
    var v: Vec ($42_access_control_comprehensive_RolePermission);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), i: int) returns (dst: $42_access_control_comprehensive_RolePermission) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), i: int): $42_access_control_comprehensive_RolePermission {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_RolePermission), m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission)))
{
    var v: Vec ($42_access_control_comprehensive_RolePermission);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), i: int): $42_access_control_comprehensive_RolePermission {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission)))
{
    var v: Vec ($42_access_control_comprehensive_RolePermission);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), i: int, j: int): Vec ($42_access_control_comprehensive_RolePermission) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), i: int) returns (e: $42_access_control_comprehensive_RolePermission, m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission)))
{
    var v: Vec ($42_access_control_comprehensive_RolePermission);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_RolePermission'(m: $Mutation (Vec ($42_access_control_comprehensive_RolePermission)), i: int) returns (e: $42_access_control_comprehensive_RolePermission, m': $Mutation (Vec ($42_access_control_comprehensive_RolePermission)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_RolePermission);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), e: $42_access_control_comprehensive_RolePermission) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_RolePermission'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_RolePermission'(v: Vec ($42_access_control_comprehensive_RolePermission), e: $42_access_control_comprehensive_RolePermission) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_RolePermission'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_TransferRecord`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_TransferRecord''(v1: Vec ($42_access_control_comprehensive_TransferRecord), v2: Vec ($42_access_control_comprehensive_TransferRecord)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_TransferRecord'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_TransferRecord''(v: Vec ($42_access_control_comprehensive_TransferRecord), prefix: Vec ($42_access_control_comprehensive_TransferRecord)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_TransferRecord'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_TransferRecord''(v: Vec ($42_access_control_comprehensive_TransferRecord), suffix: Vec ($42_access_control_comprehensive_TransferRecord)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_TransferRecord'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_TransferRecord''(v: Vec ($42_access_control_comprehensive_TransferRecord)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_TransferRecord'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), e: $42_access_control_comprehensive_TransferRecord): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_TransferRecord'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), e: $42_access_control_comprehensive_TransferRecord): int;
axiom (forall v: Vec ($42_access_control_comprehensive_TransferRecord), e: $42_access_control_comprehensive_TransferRecord:: {$IndexOfVec'$42_access_control_comprehensive_TransferRecord'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_TransferRecord'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_TransferRecord'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_TransferRecord'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_TransferRecord'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_TransferRecord'(): Vec ($42_access_control_comprehensive_TransferRecord) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_TransferRecord'() returns (v: Vec ($42_access_control_comprehensive_TransferRecord)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_TransferRecord'(): Vec ($42_access_control_comprehensive_TransferRecord) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), val: $42_access_control_comprehensive_TransferRecord) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), val: $42_access_control_comprehensive_TransferRecord): Vec ($42_access_control_comprehensive_TransferRecord) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) returns (e: $42_access_control_comprehensive_TransferRecord, m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    var v: Vec ($42_access_control_comprehensive_TransferRecord);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), other: Vec ($42_access_control_comprehensive_TransferRecord)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), other: Vec ($42_access_control_comprehensive_TransferRecord)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_TransferRecord)), m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_TransferRecord)), m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    var left_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var mid_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var right_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var v: Vec ($42_access_control_comprehensive_TransferRecord);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    var v: Vec ($42_access_control_comprehensive_TransferRecord);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var right_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    var left_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var mid_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var right_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var mid_left_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var mid_right_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var v: Vec ($42_access_control_comprehensive_TransferRecord);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), i: int, e: $42_access_control_comprehensive_TransferRecord) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord))) {
    var left_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var right_vec: Vec ($42_access_control_comprehensive_TransferRecord);
    var v: Vec ($42_access_control_comprehensive_TransferRecord);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), i: int) returns (dst: $42_access_control_comprehensive_TransferRecord) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), i: int): $42_access_control_comprehensive_TransferRecord {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_TransferRecord), m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)))
{
    var v: Vec ($42_access_control_comprehensive_TransferRecord);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), i: int): $42_access_control_comprehensive_TransferRecord {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)))
{
    var v: Vec ($42_access_control_comprehensive_TransferRecord);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), i: int, j: int): Vec ($42_access_control_comprehensive_TransferRecord) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), i: int) returns (e: $42_access_control_comprehensive_TransferRecord, m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)))
{
    var v: Vec ($42_access_control_comprehensive_TransferRecord);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_TransferRecord'(m: $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)), i: int) returns (e: $42_access_control_comprehensive_TransferRecord, m': $Mutation (Vec ($42_access_control_comprehensive_TransferRecord)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_TransferRecord);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), e: $42_access_control_comprehensive_TransferRecord) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_TransferRecord'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_TransferRecord'(v: Vec ($42_access_control_comprehensive_TransferRecord), e: $42_access_control_comprehensive_TransferRecord) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_TransferRecord'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_TreasuryCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_TreasuryCapability''(v1: Vec ($42_access_control_comprehensive_TreasuryCapability), v2: Vec ($42_access_control_comprehensive_TreasuryCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_TreasuryCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_TreasuryCapability''(v: Vec ($42_access_control_comprehensive_TreasuryCapability), prefix: Vec ($42_access_control_comprehensive_TreasuryCapability)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_TreasuryCapability'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_TreasuryCapability''(v: Vec ($42_access_control_comprehensive_TreasuryCapability), suffix: Vec ($42_access_control_comprehensive_TreasuryCapability)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_TreasuryCapability'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_TreasuryCapability''(v: Vec ($42_access_control_comprehensive_TreasuryCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_TreasuryCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), e: $42_access_control_comprehensive_TreasuryCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_TreasuryCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), e: $42_access_control_comprehensive_TreasuryCapability): int;
axiom (forall v: Vec ($42_access_control_comprehensive_TreasuryCapability), e: $42_access_control_comprehensive_TreasuryCapability:: {$IndexOfVec'$42_access_control_comprehensive_TreasuryCapability'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_TreasuryCapability'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_TreasuryCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_TreasuryCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_TreasuryCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_TreasuryCapability'(): Vec ($42_access_control_comprehensive_TreasuryCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_TreasuryCapability'() returns (v: Vec ($42_access_control_comprehensive_TreasuryCapability)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_TreasuryCapability'(): Vec ($42_access_control_comprehensive_TreasuryCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), val: $42_access_control_comprehensive_TreasuryCapability) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), val: $42_access_control_comprehensive_TreasuryCapability): Vec ($42_access_control_comprehensive_TreasuryCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) returns (e: $42_access_control_comprehensive_TreasuryCapability, m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), other: Vec ($42_access_control_comprehensive_TreasuryCapability)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), other: Vec ($42_access_control_comprehensive_TreasuryCapability)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_TreasuryCapability)), m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_TreasuryCapability)), m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    var left_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var mid_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var right_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var right_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    var left_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var mid_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var right_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var mid_left_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var mid_right_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), i: int, e: $42_access_control_comprehensive_TreasuryCapability) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability))) {
    var left_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var right_vec: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), i: int) returns (dst: $42_access_control_comprehensive_TreasuryCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), i: int): $42_access_control_comprehensive_TreasuryCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_TreasuryCapability), m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)))
{
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), i: int): $42_access_control_comprehensive_TreasuryCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)))
{
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), i: int, j: int): Vec ($42_access_control_comprehensive_TreasuryCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), i: int) returns (e: $42_access_control_comprehensive_TreasuryCapability, m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)))
{
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_TreasuryCapability'(m: $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)), i: int) returns (e: $42_access_control_comprehensive_TreasuryCapability, m': $Mutation (Vec ($42_access_control_comprehensive_TreasuryCapability)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_TreasuryCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), e: $42_access_control_comprehensive_TreasuryCapability) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_TreasuryCapability'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_TreasuryCapability'(v: Vec ($42_access_control_comprehensive_TreasuryCapability), e: $42_access_control_comprehensive_TreasuryCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_TreasuryCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_UserRole`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_UserRole''(v1: Vec ($42_access_control_comprehensive_UserRole), v2: Vec ($42_access_control_comprehensive_UserRole)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_UserRole'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_UserRole''(v: Vec ($42_access_control_comprehensive_UserRole), prefix: Vec ($42_access_control_comprehensive_UserRole)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_UserRole'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_UserRole''(v: Vec ($42_access_control_comprehensive_UserRole), suffix: Vec ($42_access_control_comprehensive_UserRole)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_UserRole'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_UserRole''(v: Vec ($42_access_control_comprehensive_UserRole)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_UserRole'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), e: $42_access_control_comprehensive_UserRole): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_UserRole'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), e: $42_access_control_comprehensive_UserRole): int;
axiom (forall v: Vec ($42_access_control_comprehensive_UserRole), e: $42_access_control_comprehensive_UserRole:: {$IndexOfVec'$42_access_control_comprehensive_UserRole'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_UserRole'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_UserRole'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_UserRole'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_UserRole'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_UserRole'(): Vec ($42_access_control_comprehensive_UserRole) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_UserRole'() returns (v: Vec ($42_access_control_comprehensive_UserRole)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_UserRole'(): Vec ($42_access_control_comprehensive_UserRole) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), val: $42_access_control_comprehensive_UserRole) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), val: $42_access_control_comprehensive_UserRole): Vec ($42_access_control_comprehensive_UserRole) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole))) returns (e: $42_access_control_comprehensive_UserRole, m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    var v: Vec ($42_access_control_comprehensive_UserRole);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), other: Vec ($42_access_control_comprehensive_UserRole)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), other: Vec ($42_access_control_comprehensive_UserRole)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_UserRole)), m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_UserRole)), m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    var left_vec: Vec ($42_access_control_comprehensive_UserRole);
    var mid_vec: Vec ($42_access_control_comprehensive_UserRole);
    var right_vec: Vec ($42_access_control_comprehensive_UserRole);
    var v: Vec ($42_access_control_comprehensive_UserRole);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    var v: Vec ($42_access_control_comprehensive_UserRole);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_UserRole);
    var right_vec: Vec ($42_access_control_comprehensive_UserRole);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    var left_vec: Vec ($42_access_control_comprehensive_UserRole);
    var mid_vec: Vec ($42_access_control_comprehensive_UserRole);
    var right_vec: Vec ($42_access_control_comprehensive_UserRole);
    var mid_left_vec: Vec ($42_access_control_comprehensive_UserRole);
    var mid_right_vec: Vec ($42_access_control_comprehensive_UserRole);
    var v: Vec ($42_access_control_comprehensive_UserRole);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), i: int, e: $42_access_control_comprehensive_UserRole) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRole))) {
    var left_vec: Vec ($42_access_control_comprehensive_UserRole);
    var right_vec: Vec ($42_access_control_comprehensive_UserRole);
    var v: Vec ($42_access_control_comprehensive_UserRole);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), i: int) returns (dst: $42_access_control_comprehensive_UserRole) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), i: int): $42_access_control_comprehensive_UserRole {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_UserRole), m': $Mutation (Vec ($42_access_control_comprehensive_UserRole)))
{
    var v: Vec ($42_access_control_comprehensive_UserRole);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), i: int): $42_access_control_comprehensive_UserRole {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRole)))
{
    var v: Vec ($42_access_control_comprehensive_UserRole);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), i: int, j: int): Vec ($42_access_control_comprehensive_UserRole) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), i: int) returns (e: $42_access_control_comprehensive_UserRole, m': $Mutation (Vec ($42_access_control_comprehensive_UserRole)))
{
    var v: Vec ($42_access_control_comprehensive_UserRole);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_UserRole'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRole)), i: int) returns (e: $42_access_control_comprehensive_UserRole, m': $Mutation (Vec ($42_access_control_comprehensive_UserRole)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_UserRole);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), e: $42_access_control_comprehensive_UserRole) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_UserRole'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_UserRole'(v: Vec ($42_access_control_comprehensive_UserRole), e: $42_access_control_comprehensive_UserRole) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_UserRole'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_access_control_comprehensive_UserRoleAssignment`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_access_control_comprehensive_UserRoleAssignment''(v1: Vec ($42_access_control_comprehensive_UserRoleAssignment), v2: Vec ($42_access_control_comprehensive_UserRoleAssignment)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_access_control_comprehensive_UserRoleAssignment'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_access_control_comprehensive_UserRoleAssignment''(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), prefix: Vec ($42_access_control_comprehensive_UserRoleAssignment)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_access_control_comprehensive_UserRoleAssignment'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_access_control_comprehensive_UserRoleAssignment''(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), suffix: Vec ($42_access_control_comprehensive_UserRoleAssignment)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_access_control_comprehensive_UserRoleAssignment'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''(v: Vec ($42_access_control_comprehensive_UserRoleAssignment)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_access_control_comprehensive_UserRoleAssignment'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), e: $42_access_control_comprehensive_UserRoleAssignment): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_UserRoleAssignment'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), e: $42_access_control_comprehensive_UserRoleAssignment): int;
axiom (forall v: Vec ($42_access_control_comprehensive_UserRoleAssignment), e: $42_access_control_comprehensive_UserRoleAssignment:: {$IndexOfVec'$42_access_control_comprehensive_UserRoleAssignment'(v, e)}
    (var i := $IndexOfVec'$42_access_control_comprehensive_UserRoleAssignment'(v, e);
     if (!$ContainsVec'$42_access_control_comprehensive_UserRoleAssignment'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_access_control_comprehensive_UserRoleAssignment'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_access_control_comprehensive_UserRoleAssignment'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_access_control_comprehensive_UserRoleAssignment'(): Vec ($42_access_control_comprehensive_UserRoleAssignment) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_access_control_comprehensive_UserRoleAssignment'() returns (v: Vec ($42_access_control_comprehensive_UserRoleAssignment)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_access_control_comprehensive_UserRoleAssignment'(): Vec ($42_access_control_comprehensive_UserRoleAssignment) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), val: $42_access_control_comprehensive_UserRoleAssignment) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), val: $42_access_control_comprehensive_UserRoleAssignment): Vec ($42_access_control_comprehensive_UserRoleAssignment) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) returns (e: $42_access_control_comprehensive_UserRoleAssignment, m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), other: Vec ($42_access_control_comprehensive_UserRoleAssignment)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), other: Vec ($42_access_control_comprehensive_UserRoleAssignment)) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_UserRoleAssignment)), m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), new_len: int) returns (v: (Vec ($42_access_control_comprehensive_UserRoleAssignment)), m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), left: int, right: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    var left_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var mid_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var right_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), rot: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var len: int;
    var left_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var right_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    var left_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var mid_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var right_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var mid_left_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var mid_right_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), i: int, e: $42_access_control_comprehensive_UserRoleAssignment) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment))) {
    var left_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var right_vec: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), i: int) returns (dst: $42_access_control_comprehensive_UserRoleAssignment) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), i: int): $42_access_control_comprehensive_UserRoleAssignment {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), index: int)
returns (dst: $Mutation ($42_access_control_comprehensive_UserRoleAssignment), m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)))
{
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), i: int): $42_access_control_comprehensive_UserRoleAssignment {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), i: int, j: int) returns (m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)))
{
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), i: int, j: int): Vec ($42_access_control_comprehensive_UserRoleAssignment) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), i: int) returns (e: $42_access_control_comprehensive_UserRoleAssignment, m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)))
{
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_access_control_comprehensive_UserRoleAssignment'(m: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)), i: int) returns (e: $42_access_control_comprehensive_UserRoleAssignment, m': $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment)))
{
    var len: int;
    var v: Vec ($42_access_control_comprehensive_UserRoleAssignment);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), e: $42_access_control_comprehensive_UserRoleAssignment) returns (res: bool)  {
    res := $ContainsVec'$42_access_control_comprehensive_UserRoleAssignment'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_access_control_comprehensive_UserRoleAssignment'(v: Vec ($42_access_control_comprehensive_UserRoleAssignment), e: $42_access_control_comprehensive_UserRoleAssignment) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_access_control_comprehensive_UserRoleAssignment'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_Balance`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_Balance''(v1: Vec ($42_reentrancy_comprehensive_Balance), v2: Vec ($42_reentrancy_comprehensive_Balance)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_Balance'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_Balance''(v: Vec ($42_reentrancy_comprehensive_Balance), prefix: Vec ($42_reentrancy_comprehensive_Balance)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_Balance'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_Balance''(v: Vec ($42_reentrancy_comprehensive_Balance), suffix: Vec ($42_reentrancy_comprehensive_Balance)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_Balance'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_Balance''(v: Vec ($42_reentrancy_comprehensive_Balance)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_Balance'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), e: $42_reentrancy_comprehensive_Balance): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_Balance'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), e: $42_reentrancy_comprehensive_Balance): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_Balance), e: $42_reentrancy_comprehensive_Balance:: {$IndexOfVec'$42_reentrancy_comprehensive_Balance'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_Balance'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_Balance'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_Balance'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_Balance'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_Balance'(): Vec ($42_reentrancy_comprehensive_Balance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_Balance'() returns (v: Vec ($42_reentrancy_comprehensive_Balance)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_Balance'(): Vec ($42_reentrancy_comprehensive_Balance) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), val: $42_reentrancy_comprehensive_Balance) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), val: $42_reentrancy_comprehensive_Balance): Vec ($42_reentrancy_comprehensive_Balance) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) returns (e: $42_reentrancy_comprehensive_Balance, m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    var v: Vec ($42_reentrancy_comprehensive_Balance);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), other: Vec ($42_reentrancy_comprehensive_Balance)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), other: Vec ($42_reentrancy_comprehensive_Balance)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_Balance)), m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_Balance)), m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var mid_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var right_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var v: Vec ($42_reentrancy_comprehensive_Balance);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    var v: Vec ($42_reentrancy_comprehensive_Balance);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var right_vec: Vec ($42_reentrancy_comprehensive_Balance);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var mid_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var right_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var v: Vec ($42_reentrancy_comprehensive_Balance);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), i: int, e: $42_reentrancy_comprehensive_Balance) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var right_vec: Vec ($42_reentrancy_comprehensive_Balance);
    var v: Vec ($42_reentrancy_comprehensive_Balance);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), i: int) returns (dst: $42_reentrancy_comprehensive_Balance) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), i: int): $42_reentrancy_comprehensive_Balance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_Balance), m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance)))
{
    var v: Vec ($42_reentrancy_comprehensive_Balance);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), i: int): $42_reentrancy_comprehensive_Balance {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance)))
{
    var v: Vec ($42_reentrancy_comprehensive_Balance);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), i: int, j: int): Vec ($42_reentrancy_comprehensive_Balance) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), i: int) returns (e: $42_reentrancy_comprehensive_Balance, m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance)))
{
    var v: Vec ($42_reentrancy_comprehensive_Balance);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_Balance'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Balance)), i: int) returns (e: $42_reentrancy_comprehensive_Balance, m': $Mutation (Vec ($42_reentrancy_comprehensive_Balance)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_Balance);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), e: $42_reentrancy_comprehensive_Balance) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_Balance'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_Balance'(v: Vec ($42_reentrancy_comprehensive_Balance), e: $42_reentrancy_comprehensive_Balance) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_Balance'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_CompletedTransfer`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_CompletedTransfer''(v1: Vec ($42_reentrancy_comprehensive_CompletedTransfer), v2: Vec ($42_reentrancy_comprehensive_CompletedTransfer)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_CompletedTransfer'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_CompletedTransfer''(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), prefix: Vec ($42_reentrancy_comprehensive_CompletedTransfer)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_CompletedTransfer'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_CompletedTransfer''(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), suffix: Vec ($42_reentrancy_comprehensive_CompletedTransfer)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_CompletedTransfer'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_CompletedTransfer''(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_CompletedTransfer'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), e: $42_reentrancy_comprehensive_CompletedTransfer): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_CompletedTransfer'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), e: $42_reentrancy_comprehensive_CompletedTransfer): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), e: $42_reentrancy_comprehensive_CompletedTransfer:: {$IndexOfVec'$42_reentrancy_comprehensive_CompletedTransfer'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_CompletedTransfer'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_CompletedTransfer'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_CompletedTransfer'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_CompletedTransfer'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_CompletedTransfer'(): Vec ($42_reentrancy_comprehensive_CompletedTransfer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_CompletedTransfer'() returns (v: Vec ($42_reentrancy_comprehensive_CompletedTransfer)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_CompletedTransfer'(): Vec ($42_reentrancy_comprehensive_CompletedTransfer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), val: $42_reentrancy_comprehensive_CompletedTransfer) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), val: $42_reentrancy_comprehensive_CompletedTransfer): Vec ($42_reentrancy_comprehensive_CompletedTransfer) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) returns (e: $42_reentrancy_comprehensive_CompletedTransfer, m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), other: Vec ($42_reentrancy_comprehensive_CompletedTransfer)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), other: Vec ($42_reentrancy_comprehensive_CompletedTransfer)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var mid_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var mid_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), i: int, e: $42_reentrancy_comprehensive_CompletedTransfer) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), i: int) returns (dst: $42_reentrancy_comprehensive_CompletedTransfer) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), i: int): $42_reentrancy_comprehensive_CompletedTransfer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_CompletedTransfer), m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)))
{
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), i: int): $42_reentrancy_comprehensive_CompletedTransfer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)))
{
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), i: int, j: int): Vec ($42_reentrancy_comprehensive_CompletedTransfer) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), i: int) returns (e: $42_reentrancy_comprehensive_CompletedTransfer, m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)))
{
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_CompletedTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)), i: int) returns (e: $42_reentrancy_comprehensive_CompletedTransfer, m': $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_CompletedTransfer);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), e: $42_reentrancy_comprehensive_CompletedTransfer) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_CompletedTransfer'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_CompletedTransfer'(v: Vec ($42_reentrancy_comprehensive_CompletedTransfer), e: $42_reentrancy_comprehensive_CompletedTransfer) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_CompletedTransfer'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_CrossChainLock`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_CrossChainLock''(v1: Vec ($42_reentrancy_comprehensive_CrossChainLock), v2: Vec ($42_reentrancy_comprehensive_CrossChainLock)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_CrossChainLock'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_CrossChainLock''(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), prefix: Vec ($42_reentrancy_comprehensive_CrossChainLock)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_CrossChainLock'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_CrossChainLock''(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), suffix: Vec ($42_reentrancy_comprehensive_CrossChainLock)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_CrossChainLock'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_CrossChainLock''(v: Vec ($42_reentrancy_comprehensive_CrossChainLock)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_CrossChainLock'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), e: $42_reentrancy_comprehensive_CrossChainLock): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_CrossChainLock'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), e: $42_reentrancy_comprehensive_CrossChainLock): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_CrossChainLock), e: $42_reentrancy_comprehensive_CrossChainLock:: {$IndexOfVec'$42_reentrancy_comprehensive_CrossChainLock'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_CrossChainLock'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_CrossChainLock'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_CrossChainLock'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_CrossChainLock'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_CrossChainLock'(): Vec ($42_reentrancy_comprehensive_CrossChainLock) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_CrossChainLock'() returns (v: Vec ($42_reentrancy_comprehensive_CrossChainLock)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_CrossChainLock'(): Vec ($42_reentrancy_comprehensive_CrossChainLock) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), val: $42_reentrancy_comprehensive_CrossChainLock) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), val: $42_reentrancy_comprehensive_CrossChainLock): Vec ($42_reentrancy_comprehensive_CrossChainLock) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) returns (e: $42_reentrancy_comprehensive_CrossChainLock, m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), other: Vec ($42_reentrancy_comprehensive_CrossChainLock)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), other: Vec ($42_reentrancy_comprehensive_CrossChainLock)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_CrossChainLock)), m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_CrossChainLock)), m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var mid_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var right_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var right_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var mid_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var right_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), i: int, e: $42_reentrancy_comprehensive_CrossChainLock) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var right_vec: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), i: int) returns (dst: $42_reentrancy_comprehensive_CrossChainLock) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), i: int): $42_reentrancy_comprehensive_CrossChainLock {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_CrossChainLock), m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)))
{
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), i: int): $42_reentrancy_comprehensive_CrossChainLock {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)))
{
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), i: int, j: int): Vec ($42_reentrancy_comprehensive_CrossChainLock) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), i: int) returns (e: $42_reentrancy_comprehensive_CrossChainLock, m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)))
{
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_CrossChainLock'(m: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)), i: int) returns (e: $42_reentrancy_comprehensive_CrossChainLock, m': $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_CrossChainLock);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), e: $42_reentrancy_comprehensive_CrossChainLock) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_CrossChainLock'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_CrossChainLock'(v: Vec ($42_reentrancy_comprehensive_CrossChainLock), e: $42_reentrancy_comprehensive_CrossChainLock) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_CrossChainLock'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_LiquidationProcess`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_LiquidationProcess''(v1: Vec ($42_reentrancy_comprehensive_LiquidationProcess), v2: Vec ($42_reentrancy_comprehensive_LiquidationProcess)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_LiquidationProcess'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_LiquidationProcess''(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), prefix: Vec ($42_reentrancy_comprehensive_LiquidationProcess)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_LiquidationProcess'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_LiquidationProcess''(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), suffix: Vec ($42_reentrancy_comprehensive_LiquidationProcess)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_LiquidationProcess'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_LiquidationProcess'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), e: $42_reentrancy_comprehensive_LiquidationProcess): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_LiquidationProcess'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), e: $42_reentrancy_comprehensive_LiquidationProcess): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), e: $42_reentrancy_comprehensive_LiquidationProcess:: {$IndexOfVec'$42_reentrancy_comprehensive_LiquidationProcess'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_LiquidationProcess'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_LiquidationProcess'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_LiquidationProcess'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_LiquidationProcess'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_LiquidationProcess'(): Vec ($42_reentrancy_comprehensive_LiquidationProcess) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_LiquidationProcess'() returns (v: Vec ($42_reentrancy_comprehensive_LiquidationProcess)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_LiquidationProcess'(): Vec ($42_reentrancy_comprehensive_LiquidationProcess) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), val: $42_reentrancy_comprehensive_LiquidationProcess) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), val: $42_reentrancy_comprehensive_LiquidationProcess): Vec ($42_reentrancy_comprehensive_LiquidationProcess) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) returns (e: $42_reentrancy_comprehensive_LiquidationProcess, m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), other: Vec ($42_reentrancy_comprehensive_LiquidationProcess)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), other: Vec ($42_reentrancy_comprehensive_LiquidationProcess)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var mid_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var right_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var right_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var mid_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var right_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), i: int, e: $42_reentrancy_comprehensive_LiquidationProcess) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var right_vec: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), i: int) returns (dst: $42_reentrancy_comprehensive_LiquidationProcess) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), i: int): $42_reentrancy_comprehensive_LiquidationProcess {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_LiquidationProcess), m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)))
{
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), i: int): $42_reentrancy_comprehensive_LiquidationProcess {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)))
{
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), i: int, j: int): Vec ($42_reentrancy_comprehensive_LiquidationProcess) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), i: int) returns (e: $42_reentrancy_comprehensive_LiquidationProcess, m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)))
{
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_LiquidationProcess'(m: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)), i: int) returns (e: $42_reentrancy_comprehensive_LiquidationProcess, m': $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_LiquidationProcess);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), e: $42_reentrancy_comprehensive_LiquidationProcess) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_LiquidationProcess'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_LiquidationProcess'(v: Vec ($42_reentrancy_comprehensive_LiquidationProcess), e: $42_reentrancy_comprehensive_LiquidationProcess) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_LiquidationProcess'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_PendingTransfer`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_PendingTransfer''(v1: Vec ($42_reentrancy_comprehensive_PendingTransfer), v2: Vec ($42_reentrancy_comprehensive_PendingTransfer)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_PendingTransfer'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_PendingTransfer''(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), prefix: Vec ($42_reentrancy_comprehensive_PendingTransfer)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_PendingTransfer'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_PendingTransfer''(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), suffix: Vec ($42_reentrancy_comprehensive_PendingTransfer)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_PendingTransfer'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_PendingTransfer''(v: Vec ($42_reentrancy_comprehensive_PendingTransfer)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_PendingTransfer'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), e: $42_reentrancy_comprehensive_PendingTransfer): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_PendingTransfer'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), e: $42_reentrancy_comprehensive_PendingTransfer): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_PendingTransfer), e: $42_reentrancy_comprehensive_PendingTransfer:: {$IndexOfVec'$42_reentrancy_comprehensive_PendingTransfer'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_PendingTransfer'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_PendingTransfer'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_PendingTransfer'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_PendingTransfer'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_PendingTransfer'(): Vec ($42_reentrancy_comprehensive_PendingTransfer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_PendingTransfer'() returns (v: Vec ($42_reentrancy_comprehensive_PendingTransfer)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_PendingTransfer'(): Vec ($42_reentrancy_comprehensive_PendingTransfer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), val: $42_reentrancy_comprehensive_PendingTransfer) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), val: $42_reentrancy_comprehensive_PendingTransfer): Vec ($42_reentrancy_comprehensive_PendingTransfer) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) returns (e: $42_reentrancy_comprehensive_PendingTransfer, m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), other: Vec ($42_reentrancy_comprehensive_PendingTransfer)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), other: Vec ($42_reentrancy_comprehensive_PendingTransfer)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_PendingTransfer)), m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_PendingTransfer)), m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var mid_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var mid_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), i: int, e: $42_reentrancy_comprehensive_PendingTransfer) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var right_vec: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), i: int) returns (dst: $42_reentrancy_comprehensive_PendingTransfer) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), i: int): $42_reentrancy_comprehensive_PendingTransfer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_PendingTransfer), m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)))
{
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), i: int): $42_reentrancy_comprehensive_PendingTransfer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)))
{
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), i: int, j: int): Vec ($42_reentrancy_comprehensive_PendingTransfer) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), i: int) returns (e: $42_reentrancy_comprehensive_PendingTransfer, m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)))
{
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_PendingTransfer'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)), i: int) returns (e: $42_reentrancy_comprehensive_PendingTransfer, m': $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_PendingTransfer);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), e: $42_reentrancy_comprehensive_PendingTransfer) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_PendingTransfer'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_PendingTransfer'(v: Vec ($42_reentrancy_comprehensive_PendingTransfer), e: $42_reentrancy_comprehensive_PendingTransfer) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_PendingTransfer'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_PlayerScore`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_PlayerScore''(v1: Vec ($42_reentrancy_comprehensive_PlayerScore), v2: Vec ($42_reentrancy_comprehensive_PlayerScore)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_PlayerScore'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_PlayerScore''(v: Vec ($42_reentrancy_comprehensive_PlayerScore), prefix: Vec ($42_reentrancy_comprehensive_PlayerScore)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_PlayerScore'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_PlayerScore''(v: Vec ($42_reentrancy_comprehensive_PlayerScore), suffix: Vec ($42_reentrancy_comprehensive_PlayerScore)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_PlayerScore'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''(v: Vec ($42_reentrancy_comprehensive_PlayerScore)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_PlayerScore'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), e: $42_reentrancy_comprehensive_PlayerScore): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_PlayerScore'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), e: $42_reentrancy_comprehensive_PlayerScore): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_PlayerScore), e: $42_reentrancy_comprehensive_PlayerScore:: {$IndexOfVec'$42_reentrancy_comprehensive_PlayerScore'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_PlayerScore'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_PlayerScore'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_PlayerScore'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_PlayerScore'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_PlayerScore'(): Vec ($42_reentrancy_comprehensive_PlayerScore) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_PlayerScore'() returns (v: Vec ($42_reentrancy_comprehensive_PlayerScore)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_PlayerScore'(): Vec ($42_reentrancy_comprehensive_PlayerScore) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), val: $42_reentrancy_comprehensive_PlayerScore) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), val: $42_reentrancy_comprehensive_PlayerScore): Vec ($42_reentrancy_comprehensive_PlayerScore) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) returns (e: $42_reentrancy_comprehensive_PlayerScore, m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), other: Vec ($42_reentrancy_comprehensive_PlayerScore)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), other: Vec ($42_reentrancy_comprehensive_PlayerScore)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_PlayerScore)), m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_PlayerScore)), m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var mid_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var right_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var right_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var mid_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var right_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), i: int, e: $42_reentrancy_comprehensive_PlayerScore) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var right_vec: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), i: int) returns (dst: $42_reentrancy_comprehensive_PlayerScore) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), i: int): $42_reentrancy_comprehensive_PlayerScore {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_PlayerScore), m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)))
{
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), i: int): $42_reentrancy_comprehensive_PlayerScore {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)))
{
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), i: int, j: int): Vec ($42_reentrancy_comprehensive_PlayerScore) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), i: int) returns (e: $42_reentrancy_comprehensive_PlayerScore, m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)))
{
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_PlayerScore'(m: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)), i: int) returns (e: $42_reentrancy_comprehensive_PlayerScore, m': $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_PlayerScore);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), e: $42_reentrancy_comprehensive_PlayerScore) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_PlayerScore'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_PlayerScore'(v: Vec ($42_reentrancy_comprehensive_PlayerScore), e: $42_reentrancy_comprehensive_PlayerScore) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_PlayerScore'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_QueuedOperation`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_QueuedOperation''(v1: Vec ($42_reentrancy_comprehensive_QueuedOperation), v2: Vec ($42_reentrancy_comprehensive_QueuedOperation)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_QueuedOperation'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_QueuedOperation''(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), prefix: Vec ($42_reentrancy_comprehensive_QueuedOperation)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_QueuedOperation'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_QueuedOperation''(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), suffix: Vec ($42_reentrancy_comprehensive_QueuedOperation)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_QueuedOperation'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_QueuedOperation''(v: Vec ($42_reentrancy_comprehensive_QueuedOperation)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_QueuedOperation'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), e: $42_reentrancy_comprehensive_QueuedOperation): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_QueuedOperation'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), e: $42_reentrancy_comprehensive_QueuedOperation): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_QueuedOperation), e: $42_reentrancy_comprehensive_QueuedOperation:: {$IndexOfVec'$42_reentrancy_comprehensive_QueuedOperation'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_QueuedOperation'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_QueuedOperation'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_QueuedOperation'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_QueuedOperation'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_QueuedOperation'(): Vec ($42_reentrancy_comprehensive_QueuedOperation) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_QueuedOperation'() returns (v: Vec ($42_reentrancy_comprehensive_QueuedOperation)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_QueuedOperation'(): Vec ($42_reentrancy_comprehensive_QueuedOperation) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), val: $42_reentrancy_comprehensive_QueuedOperation) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), val: $42_reentrancy_comprehensive_QueuedOperation): Vec ($42_reentrancy_comprehensive_QueuedOperation) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) returns (e: $42_reentrancy_comprehensive_QueuedOperation, m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), other: Vec ($42_reentrancy_comprehensive_QueuedOperation)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), other: Vec ($42_reentrancy_comprehensive_QueuedOperation)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_QueuedOperation)), m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_QueuedOperation)), m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var mid_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var right_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var right_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var mid_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var right_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), i: int, e: $42_reentrancy_comprehensive_QueuedOperation) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var right_vec: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), i: int) returns (dst: $42_reentrancy_comprehensive_QueuedOperation) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), i: int): $42_reentrancy_comprehensive_QueuedOperation {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_QueuedOperation), m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)))
{
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), i: int): $42_reentrancy_comprehensive_QueuedOperation {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)))
{
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), i: int, j: int): Vec ($42_reentrancy_comprehensive_QueuedOperation) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), i: int) returns (e: $42_reentrancy_comprehensive_QueuedOperation, m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)))
{
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_QueuedOperation'(m: $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)), i: int) returns (e: $42_reentrancy_comprehensive_QueuedOperation, m': $Mutation (Vec ($42_reentrancy_comprehensive_QueuedOperation)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_QueuedOperation);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), e: $42_reentrancy_comprehensive_QueuedOperation) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_QueuedOperation'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_QueuedOperation'(v: Vec ($42_reentrancy_comprehensive_QueuedOperation), e: $42_reentrancy_comprehensive_QueuedOperation) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_QueuedOperation'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_Subsystem`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_Subsystem''(v1: Vec ($42_reentrancy_comprehensive_Subsystem), v2: Vec ($42_reentrancy_comprehensive_Subsystem)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_Subsystem'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_Subsystem''(v: Vec ($42_reentrancy_comprehensive_Subsystem), prefix: Vec ($42_reentrancy_comprehensive_Subsystem)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_Subsystem'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_Subsystem''(v: Vec ($42_reentrancy_comprehensive_Subsystem), suffix: Vec ($42_reentrancy_comprehensive_Subsystem)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_Subsystem'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_Subsystem''(v: Vec ($42_reentrancy_comprehensive_Subsystem)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_Subsystem'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), e: $42_reentrancy_comprehensive_Subsystem): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_Subsystem'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), e: $42_reentrancy_comprehensive_Subsystem): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_Subsystem), e: $42_reentrancy_comprehensive_Subsystem:: {$IndexOfVec'$42_reentrancy_comprehensive_Subsystem'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_Subsystem'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_Subsystem'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_Subsystem'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_Subsystem'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_Subsystem'(): Vec ($42_reentrancy_comprehensive_Subsystem) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_Subsystem'() returns (v: Vec ($42_reentrancy_comprehensive_Subsystem)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_Subsystem'(): Vec ($42_reentrancy_comprehensive_Subsystem) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), val: $42_reentrancy_comprehensive_Subsystem) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), val: $42_reentrancy_comprehensive_Subsystem): Vec ($42_reentrancy_comprehensive_Subsystem) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) returns (e: $42_reentrancy_comprehensive_Subsystem, m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), other: Vec ($42_reentrancy_comprehensive_Subsystem)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), other: Vec ($42_reentrancy_comprehensive_Subsystem)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_Subsystem)), m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_Subsystem)), m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var mid_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var right_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var right_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var mid_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var right_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), i: int, e: $42_reentrancy_comprehensive_Subsystem) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var right_vec: Vec ($42_reentrancy_comprehensive_Subsystem);
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), i: int) returns (dst: $42_reentrancy_comprehensive_Subsystem) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), i: int): $42_reentrancy_comprehensive_Subsystem {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_Subsystem), m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)))
{
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), i: int): $42_reentrancy_comprehensive_Subsystem {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)))
{
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), i: int, j: int): Vec ($42_reentrancy_comprehensive_Subsystem) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), i: int) returns (e: $42_reentrancy_comprehensive_Subsystem, m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)))
{
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_Subsystem'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)), i: int) returns (e: $42_reentrancy_comprehensive_Subsystem, m': $Mutation (Vec ($42_reentrancy_comprehensive_Subsystem)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_Subsystem);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), e: $42_reentrancy_comprehensive_Subsystem) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_Subsystem'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_Subsystem'(v: Vec ($42_reentrancy_comprehensive_Subsystem), e: $42_reentrancy_comprehensive_Subsystem) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_Subsystem'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_UserPosition`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_UserPosition''(v1: Vec ($42_reentrancy_comprehensive_UserPosition), v2: Vec ($42_reentrancy_comprehensive_UserPosition)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_UserPosition'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_UserPosition''(v: Vec ($42_reentrancy_comprehensive_UserPosition), prefix: Vec ($42_reentrancy_comprehensive_UserPosition)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_UserPosition'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_UserPosition''(v: Vec ($42_reentrancy_comprehensive_UserPosition), suffix: Vec ($42_reentrancy_comprehensive_UserPosition)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_UserPosition'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''(v: Vec ($42_reentrancy_comprehensive_UserPosition)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_UserPosition'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), e: $42_reentrancy_comprehensive_UserPosition): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_UserPosition'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), e: $42_reentrancy_comprehensive_UserPosition): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_UserPosition), e: $42_reentrancy_comprehensive_UserPosition:: {$IndexOfVec'$42_reentrancy_comprehensive_UserPosition'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_UserPosition'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_UserPosition'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_UserPosition'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_UserPosition'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_UserPosition'(): Vec ($42_reentrancy_comprehensive_UserPosition) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_UserPosition'() returns (v: Vec ($42_reentrancy_comprehensive_UserPosition)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_UserPosition'(): Vec ($42_reentrancy_comprehensive_UserPosition) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), val: $42_reentrancy_comprehensive_UserPosition) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), val: $42_reentrancy_comprehensive_UserPosition): Vec ($42_reentrancy_comprehensive_UserPosition) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) returns (e: $42_reentrancy_comprehensive_UserPosition, m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), other: Vec ($42_reentrancy_comprehensive_UserPosition)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), other: Vec ($42_reentrancy_comprehensive_UserPosition)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_UserPosition)), m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_UserPosition)), m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var mid_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var right_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var right_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var mid_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var right_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), i: int, e: $42_reentrancy_comprehensive_UserPosition) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var right_vec: Vec ($42_reentrancy_comprehensive_UserPosition);
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), i: int) returns (dst: $42_reentrancy_comprehensive_UserPosition) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), i: int): $42_reentrancy_comprehensive_UserPosition {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_UserPosition), m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)))
{
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), i: int): $42_reentrancy_comprehensive_UserPosition {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)))
{
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), i: int, j: int): Vec ($42_reentrancy_comprehensive_UserPosition) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), i: int) returns (e: $42_reentrancy_comprehensive_UserPosition, m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)))
{
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_UserPosition'(m: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), i: int) returns (e: $42_reentrancy_comprehensive_UserPosition, m': $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_UserPosition);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), e: $42_reentrancy_comprehensive_UserPosition) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_UserPosition'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_UserPosition'(v: Vec ($42_reentrancy_comprehensive_UserPosition), e: $42_reentrancy_comprehensive_UserPosition) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_UserPosition'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$42_reentrancy_comprehensive_Withdrawal`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$42_reentrancy_comprehensive_Withdrawal''(v1: Vec ($42_reentrancy_comprehensive_Withdrawal), v2: Vec ($42_reentrancy_comprehensive_Withdrawal)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$42_reentrancy_comprehensive_Withdrawal'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$42_reentrancy_comprehensive_Withdrawal''(v: Vec ($42_reentrancy_comprehensive_Withdrawal), prefix: Vec ($42_reentrancy_comprehensive_Withdrawal)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$42_reentrancy_comprehensive_Withdrawal'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$42_reentrancy_comprehensive_Withdrawal''(v: Vec ($42_reentrancy_comprehensive_Withdrawal), suffix: Vec ($42_reentrancy_comprehensive_Withdrawal)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$42_reentrancy_comprehensive_Withdrawal'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''(v: Vec ($42_reentrancy_comprehensive_Withdrawal)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$42_reentrancy_comprehensive_Withdrawal'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), e: $42_reentrancy_comprehensive_Withdrawal): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_Withdrawal'(ReadVec(v, i), e))
}

function $IndexOfVec'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), e: $42_reentrancy_comprehensive_Withdrawal): int;
axiom (forall v: Vec ($42_reentrancy_comprehensive_Withdrawal), e: $42_reentrancy_comprehensive_Withdrawal:: {$IndexOfVec'$42_reentrancy_comprehensive_Withdrawal'(v, e)}
    (var i := $IndexOfVec'$42_reentrancy_comprehensive_Withdrawal'(v, e);
     if (!$ContainsVec'$42_reentrancy_comprehensive_Withdrawal'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$42_reentrancy_comprehensive_Withdrawal'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$42_reentrancy_comprehensive_Withdrawal'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$42_reentrancy_comprehensive_Withdrawal'(): Vec ($42_reentrancy_comprehensive_Withdrawal) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$42_reentrancy_comprehensive_Withdrawal'() returns (v: Vec ($42_reentrancy_comprehensive_Withdrawal)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$42_reentrancy_comprehensive_Withdrawal'(): Vec ($42_reentrancy_comprehensive_Withdrawal) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), val: $42_reentrancy_comprehensive_Withdrawal) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), val: $42_reentrancy_comprehensive_Withdrawal): Vec ($42_reentrancy_comprehensive_Withdrawal) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) returns (e: $42_reentrancy_comprehensive_Withdrawal, m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), other: Vec ($42_reentrancy_comprehensive_Withdrawal)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), other: Vec ($42_reentrancy_comprehensive_Withdrawal)) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_Withdrawal)), m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), new_len: int) returns (v: (Vec ($42_reentrancy_comprehensive_Withdrawal)), m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), left: int, right: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var mid_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var right_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), rot: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var len: int;
    var left_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var right_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var mid_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var right_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var mid_left_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var mid_right_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), i: int, e: $42_reentrancy_comprehensive_Withdrawal) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal))) {
    var left_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var right_vec: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), i: int) returns (dst: $42_reentrancy_comprehensive_Withdrawal) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), i: int): $42_reentrancy_comprehensive_Withdrawal {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), index: int)
returns (dst: $Mutation ($42_reentrancy_comprehensive_Withdrawal), m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)))
{
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), i: int): $42_reentrancy_comprehensive_Withdrawal {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), i: int, j: int) returns (m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)))
{
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), i: int, j: int): Vec ($42_reentrancy_comprehensive_Withdrawal) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), i: int) returns (e: $42_reentrancy_comprehensive_Withdrawal, m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)))
{
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$42_reentrancy_comprehensive_Withdrawal'(m: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)), i: int) returns (e: $42_reentrancy_comprehensive_Withdrawal, m': $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal)))
{
    var len: int;
    var v: Vec ($42_reentrancy_comprehensive_Withdrawal);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), e: $42_reentrancy_comprehensive_Withdrawal) returns (res: bool)  {
    res := $ContainsVec'$42_reentrancy_comprehensive_Withdrawal'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$42_reentrancy_comprehensive_Withdrawal'(v: Vec ($42_reentrancy_comprehensive_Withdrawal), e: $42_reentrancy_comprehensive_Withdrawal) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$42_reentrancy_comprehensive_Withdrawal'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bool`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bool''(v1: Vec (bool), v2: Vec (bool)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bool'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bool''(v: Vec (bool), prefix: Vec (bool)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bool'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bool''(v: Vec (bool), suffix: Vec (bool)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bool'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bool''(v: Vec (bool)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bool'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bool'(v: Vec (bool), e: bool): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bool'(ReadVec(v, i), e))
}

function $IndexOfVec'bool'(v: Vec (bool), e: bool): int;
axiom (forall v: Vec (bool), e: bool:: {$IndexOfVec'bool'(v, e)}
    (var i := $IndexOfVec'bool'(v, e);
     if (!$ContainsVec'bool'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bool'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bool'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bool'(v: Vec (bool)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bool'(): Vec (bool) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bool'() returns (v: Vec (bool)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bool'(): Vec (bool) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bool'(v: Vec (bool)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bool'(m: $Mutation (Vec (bool)), val: bool) returns (m': $Mutation (Vec (bool))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bool'(v: Vec (bool), val: bool): Vec (bool) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bool'(m: $Mutation (Vec (bool))) returns (e: bool, m': $Mutation (Vec (bool))) {
    var v: Vec (bool);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bool'(m: $Mutation (Vec (bool)), other: Vec (bool)) returns (m': $Mutation (Vec (bool))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bool'(m: $Mutation (Vec (bool))) returns (m': $Mutation (Vec (bool))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bool'(m: $Mutation (Vec (bool)), other: Vec (bool)) returns (m': $Mutation (Vec (bool))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bool'(m: $Mutation (Vec (bool)), new_len: int) returns (v: (Vec (bool)), m': $Mutation (Vec (bool))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bool'(m: $Mutation (Vec (bool)), new_len: int) returns (v: (Vec (bool)), m': $Mutation (Vec (bool))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bool'(m: $Mutation (Vec (bool)), left: int, right: int) returns (m': $Mutation (Vec (bool))) {
    var left_vec: Vec (bool);
    var mid_vec: Vec (bool);
    var right_vec: Vec (bool);
    var v: Vec (bool);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bool'(m: $Mutation (Vec (bool)), rot: int) returns (n: int, m': $Mutation (Vec (bool))) {
    var v: Vec (bool);
    var len: int;
    var left_vec: Vec (bool);
    var right_vec: Vec (bool);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bool'(m: $Mutation (Vec (bool)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bool))) {
    var left_vec: Vec (bool);
    var mid_vec: Vec (bool);
    var right_vec: Vec (bool);
    var mid_left_vec: Vec (bool);
    var mid_right_vec: Vec (bool);
    var v: Vec (bool);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bool'(m: $Mutation (Vec (bool)), i: int, e: bool) returns (m': $Mutation (Vec (bool))) {
    var left_vec: Vec (bool);
    var right_vec: Vec (bool);
    var v: Vec (bool);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bool'(v: Vec (bool)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bool'(v: Vec (bool)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bool'(v: Vec (bool), i: int) returns (dst: bool) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bool'(v: Vec (bool), i: int): bool {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bool'(m: $Mutation (Vec (bool)), index: int)
returns (dst: $Mutation (bool), m': $Mutation (Vec (bool)))
{
    var v: Vec (bool);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bool'(v: Vec (bool), i: int): bool {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bool'(v: Vec (bool)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bool'(m: $Mutation (Vec (bool)), i: int, j: int) returns (m': $Mutation (Vec (bool)))
{
    var v: Vec (bool);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bool'(v: Vec (bool), i: int, j: int): Vec (bool) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bool'(m: $Mutation (Vec (bool)), i: int) returns (e: bool, m': $Mutation (Vec (bool)))
{
    var v: Vec (bool);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bool'(m: $Mutation (Vec (bool)), i: int) returns (e: bool, m': $Mutation (Vec (bool)))
{
    var len: int;
    var v: Vec (bool);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bool'(v: Vec (bool), e: bool) returns (res: bool)  {
    res := $ContainsVec'bool'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bool'(v: Vec (bool), e: bool) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bool'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'address''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'address'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'address''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'address'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'address'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'address'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'address'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'address'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'address'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u64''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u64''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u64'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u64'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u64'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u64'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u64'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u8'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u8'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u8'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv64''(v1: Vec (bv64), v2: Vec (bv64)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv64''(v: Vec (bv64), prefix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv64'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv64''(v: Vec (bv64), suffix: Vec (bv64)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv64'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv64''(v: Vec (bv64)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv64'(v: Vec (bv64), e: bv64): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e))
}

function $IndexOfVec'bv64'(v: Vec (bv64), e: bv64): int;
axiom (forall v: Vec (bv64), e: bv64:: {$IndexOfVec'bv64'(v, e)}
    (var i := $IndexOfVec'bv64'(v, e);
     if (!$ContainsVec'bv64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv64'(v: Vec (bv64)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv64'() returns (v: Vec (bv64)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv64'(): Vec (bv64) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv64'(v: Vec (bv64)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv64'(m: $Mutation (Vec (bv64)), val: bv64) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv64'(v: Vec (bv64), val: bv64): Vec (bv64) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv64'(m: $Mutation (Vec (bv64))) returns (e: bv64, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv64'(m: $Mutation (Vec (bv64))) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv64'(m: $Mutation (Vec (bv64)), other: Vec (bv64)) returns (m': $Mutation (Vec (bv64))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv64'(m: $Mutation (Vec (bv64)), new_len: int) returns (v: (Vec (bv64)), m': $Mutation (Vec (bv64))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, right: int) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv64'(m: $Mutation (Vec (bv64)), rot: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var v: Vec (bv64);
    var len: int;
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv64'(m: $Mutation (Vec (bv64)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var mid_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var mid_left_vec: Vec (bv64);
    var mid_right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv64'(m: $Mutation (Vec (bv64)), i: int, e: bv64) returns (m': $Mutation (Vec (bv64))) {
    var left_vec: Vec (bv64);
    var right_vec: Vec (bv64);
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv64'(v: Vec (bv64)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv64'(v: Vec (bv64)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv64'(v: Vec (bv64), i: int) returns (dst: bv64) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv64'(m: $Mutation (Vec (bv64)), index: int)
returns (dst: $Mutation (bv64), m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv64'(v: Vec (bv64), i: int): bv64 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv64'(v: Vec (bv64)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv64'(m: $Mutation (Vec (bv64)), i: int, j: int) returns (m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv64'(v: Vec (bv64), i: int, j: int): Vec (bv64) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var v: Vec (bv64);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv64'(m: $Mutation (Vec (bv64)), i: int) returns (e: bv64, m': $Mutation (Vec (bv64)))
{
    var len: int;
    var v: Vec (bv64);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv64'(v: Vec (bv64), e: bv64) returns (res: bool)  {
    res := $ContainsVec'bv64'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv64'(v: Vec (bv64), e: bv64) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, right: int) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv8'(m: $Mutation (Vec (bv8)), rot: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var mid_left_vec: Vec (bv8);
    var mid_right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), i: int, e: bv8) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

datatype $signer {
    $signer($addr: int),
    $permissioned_signer($addr: int, $permission_addr: int)
}

function {:inline} $IsValid'signer'(s: $signer): bool {
    if s is $signer then
        $IsValid'address'(s->$addr)
    else
        $IsValid'address'(s->$addr) &&
        $IsValid'address'(s->$permission_addr)
}

function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    if s1 is $signer && s2 is $signer then
        s1 == s2
    else if s1 is $permissioned_signer && s2 is $permissioned_signer then
        s1 == s2
    else
        false
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := signer->$addr;
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    signer->$addr
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize


// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

datatype $TypeParamInfo {
    $TypeParamBool(),
    $TypeParamU8(),
    $TypeParamU16(),
    $TypeParamU32(),
    $TypeParamU64(),
    $TypeParamU128(),
    $TypeParamU256(),
    $TypeParamAddress(),
    $TypeParamSigner(),
    $TypeParamVector(e: $TypeParamInfo),
    $TypeParamStruct(a: int, m: Vec int, s: Vec int)
}



//==================================
// Begin Translation

function $TypeName(t: $TypeParamInfo): Vec int;
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamBool ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)) ==> t is $TypeParamBool);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU8 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)) ==> t is $TypeParamU8);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU16 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)) ==> t is $TypeParamU16);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU32 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)) ==> t is $TypeParamU32);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU64 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)) ==> t is $TypeParamU64);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU128 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)) ==> t is $TypeParamU128);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU256 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)) ==> t is $TypeParamU256);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamAddress ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)) ==> t is $TypeParamAddress);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamSigner ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)) ==> t is $TypeParamSigner);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamVector ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7), $TypeName(t->e)), Vec(DefaultVecMap()[0 := 62], 1))));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} ($IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7)) && $IsSuffix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 62], 1))) ==> t is $TypeParamVector);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamStruct ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 48][1 := 120], 2), MakeVec1(t->a)), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->m), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->s)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 48][1 := 120], 2)) ==> t is $TypeParamVector);


// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
var #0_info: $TypeParamInfo;
var #0_$memory: $Memory #0;

// spec fun at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:199:5+92
function {:inline} $1_vector_$is_empty'u64'(self: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u64'(self), 0)
}

// spec fun at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+78
function {:inline} $1_option_spec_none'u64'(): $1_option_Option'u64' {
    $1_option_Option'u64'($EmptyVec'u64'())
}

// spec fun at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'u64'(e: int): $1_option_Option'u64' {
    $1_option_Option'u64'(MakeVec1(e))
}

// spec fun at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'address'(e: int): $1_option_Option'address' {
    $1_option_Option'address'(MakeVec1(e))
}

// spec fun at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+97
function {:inline} $1_option_spec_is_none'u64'(self: $1_option_Option'u64'): bool {
    $1_vector_$is_empty'u64'(self->$vec)
}

// spec fun at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+98
function {:inline} $1_option_spec_is_some'u64'(self: $1_option_Option'u64'): bool {
    !$1_vector_$is_empty'u64'(self->$vec)
}

// spec fun at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+84
function {:inline} $1_option_spec_borrow'u64'(self: $1_option_Option'u64'): int {
    ReadVec(self->$vec, 0)
}

// struct option::Option<u64> at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'u64' {
    $1_option_Option'u64'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'u64''_vec(s: $1_option_Option'u64', x: Vec (int)): $1_option_Option'u64' {
    $1_option_Option'u64'(x)
}
function $IsValid'$1_option_Option'u64''(s: $1_option_Option'u64'): bool {
    $IsValid'vec'u64''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'u64''(s1: $1_option_Option'u64', s2: $1_option_Option'u64'): bool {
    $IsEqual'vec'u64''(s1->$vec, s2->$vec)}

// struct option::Option<address> at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'address' {
    $1_option_Option'address'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'address''_vec(s: $1_option_Option'address', x: Vec (int)): $1_option_Option'address' {
    $1_option_Option'address'(x)
}
function $IsValid'$1_option_Option'address''(s: $1_option_Option'address'): bool {
    $IsValid'vec'address''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'address''(s1: $1_option_Option'address', s2: $1_option_Option'address'): bool {
    $IsEqual'vec'address''(s1->$vec, s2->$vec)}

// struct access_control_comprehensive::AccessControlSystem at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:797:5+241
datatype $42_access_control_comprehensive_AccessControlSystem {
    $42_access_control_comprehensive_AccessControlSystem($roles: Vec ($42_access_control_comprehensive_Role), $permissions: Vec ($42_access_control_comprehensive_Permission), $role_permissions: Vec ($42_access_control_comprehensive_RolePermission), $users: Vec ($42_access_control_comprehensive_UserRoleAssignment), $admin: int)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessControlSystem'_roles(s: $42_access_control_comprehensive_AccessControlSystem, x: Vec ($42_access_control_comprehensive_Role)): $42_access_control_comprehensive_AccessControlSystem {
    $42_access_control_comprehensive_AccessControlSystem(x, s->$permissions, s->$role_permissions, s->$users, s->$admin)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessControlSystem'_permissions(s: $42_access_control_comprehensive_AccessControlSystem, x: Vec ($42_access_control_comprehensive_Permission)): $42_access_control_comprehensive_AccessControlSystem {
    $42_access_control_comprehensive_AccessControlSystem(s->$roles, x, s->$role_permissions, s->$users, s->$admin)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessControlSystem'_role_permissions(s: $42_access_control_comprehensive_AccessControlSystem, x: Vec ($42_access_control_comprehensive_RolePermission)): $42_access_control_comprehensive_AccessControlSystem {
    $42_access_control_comprehensive_AccessControlSystem(s->$roles, s->$permissions, x, s->$users, s->$admin)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessControlSystem'_users(s: $42_access_control_comprehensive_AccessControlSystem, x: Vec ($42_access_control_comprehensive_UserRoleAssignment)): $42_access_control_comprehensive_AccessControlSystem {
    $42_access_control_comprehensive_AccessControlSystem(s->$roles, s->$permissions, s->$role_permissions, x, s->$admin)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessControlSystem'_admin(s: $42_access_control_comprehensive_AccessControlSystem, x: int): $42_access_control_comprehensive_AccessControlSystem {
    $42_access_control_comprehensive_AccessControlSystem(s->$roles, s->$permissions, s->$role_permissions, s->$users, x)
}
function $IsValid'$42_access_control_comprehensive_AccessControlSystem'(s: $42_access_control_comprehensive_AccessControlSystem): bool {
    $IsValid'vec'$42_access_control_comprehensive_Role''(s->$roles)
      && $IsValid'vec'$42_access_control_comprehensive_Permission''(s->$permissions)
      && $IsValid'vec'$42_access_control_comprehensive_RolePermission''(s->$role_permissions)
      && $IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''(s->$users)
      && $IsValid'address'(s->$admin)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_AccessControlSystem'(s1: $42_access_control_comprehensive_AccessControlSystem, s2: $42_access_control_comprehensive_AccessControlSystem): bool {
    $IsEqual'vec'$42_access_control_comprehensive_Role''(s1->$roles, s2->$roles)
    && $IsEqual'vec'$42_access_control_comprehensive_Permission''(s1->$permissions, s2->$permissions)
    && $IsEqual'vec'$42_access_control_comprehensive_RolePermission''(s1->$role_permissions, s2->$role_permissions)
    && $IsEqual'vec'$42_access_control_comprehensive_UserRoleAssignment''(s1->$users, s2->$users)
    && $IsEqual'address'(s1->$admin, s2->$admin)}
var $42_access_control_comprehensive_AccessControlSystem_$memory: $Memory $42_access_control_comprehensive_AccessControlSystem;

// struct access_control_comprehensive::AccessGrant at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1021:5+242
datatype $42_access_control_comprehensive_AccessGrant {
    $42_access_control_comprehensive_AccessGrant($resource_id: int, $grantee: int, $granted_by: int, $access_level: int, $granted_at: int, $expires_at: $1_option_Option'u64')
}
function {:inline} $Update'$42_access_control_comprehensive_AccessGrant'_resource_id(s: $42_access_control_comprehensive_AccessGrant, x: int): $42_access_control_comprehensive_AccessGrant {
    $42_access_control_comprehensive_AccessGrant(x, s->$grantee, s->$granted_by, s->$access_level, s->$granted_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessGrant'_grantee(s: $42_access_control_comprehensive_AccessGrant, x: int): $42_access_control_comprehensive_AccessGrant {
    $42_access_control_comprehensive_AccessGrant(s->$resource_id, x, s->$granted_by, s->$access_level, s->$granted_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessGrant'_granted_by(s: $42_access_control_comprehensive_AccessGrant, x: int): $42_access_control_comprehensive_AccessGrant {
    $42_access_control_comprehensive_AccessGrant(s->$resource_id, s->$grantee, x, s->$access_level, s->$granted_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessGrant'_access_level(s: $42_access_control_comprehensive_AccessGrant, x: int): $42_access_control_comprehensive_AccessGrant {
    $42_access_control_comprehensive_AccessGrant(s->$resource_id, s->$grantee, s->$granted_by, x, s->$granted_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessGrant'_granted_at(s: $42_access_control_comprehensive_AccessGrant, x: int): $42_access_control_comprehensive_AccessGrant {
    $42_access_control_comprehensive_AccessGrant(s->$resource_id, s->$grantee, s->$granted_by, s->$access_level, x, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AccessGrant'_expires_at(s: $42_access_control_comprehensive_AccessGrant, x: $1_option_Option'u64'): $42_access_control_comprehensive_AccessGrant {
    $42_access_control_comprehensive_AccessGrant(s->$resource_id, s->$grantee, s->$granted_by, s->$access_level, s->$granted_at, x)
}
function $IsValid'$42_access_control_comprehensive_AccessGrant'(s: $42_access_control_comprehensive_AccessGrant): bool {
    $IsValid'u64'(s->$resource_id)
      && $IsValid'address'(s->$grantee)
      && $IsValid'address'(s->$granted_by)
      && $IsValid'u8'(s->$access_level)
      && $IsValid'u64'(s->$granted_at)
      && $IsValid'$1_option_Option'u64''(s->$expires_at)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_AccessGrant'(s1: $42_access_control_comprehensive_AccessGrant, s2: $42_access_control_comprehensive_AccessGrant): bool {
    $IsEqual'u64'(s1->$resource_id, s2->$resource_id)
    && $IsEqual'address'(s1->$grantee, s2->$grantee)
    && $IsEqual'address'(s1->$granted_by, s2->$granted_by)
    && $IsEqual'u8'(s1->$access_level, s2->$access_level)
    && $IsEqual'u64'(s1->$granted_at, s2->$granted_at)
    && $IsEqual'$1_option_Option'u64''(s1->$expires_at, s2->$expires_at)}

// struct access_control_comprehensive::AdminCapability at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:89:5+216
datatype $42_access_control_comprehensive_AdminCapability {
    $42_access_control_comprehensive_AdminCapability($id: int, $holder: int, $permissions: int, $created_at: int, $expires_at: $1_option_Option'u64')
}
function {:inline} $Update'$42_access_control_comprehensive_AdminCapability'_id(s: $42_access_control_comprehensive_AdminCapability, x: int): $42_access_control_comprehensive_AdminCapability {
    $42_access_control_comprehensive_AdminCapability(x, s->$holder, s->$permissions, s->$created_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AdminCapability'_holder(s: $42_access_control_comprehensive_AdminCapability, x: int): $42_access_control_comprehensive_AdminCapability {
    $42_access_control_comprehensive_AdminCapability(s->$id, x, s->$permissions, s->$created_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AdminCapability'_permissions(s: $42_access_control_comprehensive_AdminCapability, x: int): $42_access_control_comprehensive_AdminCapability {
    $42_access_control_comprehensive_AdminCapability(s->$id, s->$holder, x, s->$created_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AdminCapability'_created_at(s: $42_access_control_comprehensive_AdminCapability, x: int): $42_access_control_comprehensive_AdminCapability {
    $42_access_control_comprehensive_AdminCapability(s->$id, s->$holder, s->$permissions, x, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_AdminCapability'_expires_at(s: $42_access_control_comprehensive_AdminCapability, x: $1_option_Option'u64'): $42_access_control_comprehensive_AdminCapability {
    $42_access_control_comprehensive_AdminCapability(s->$id, s->$holder, s->$permissions, s->$created_at, x)
}
function $IsValid'$42_access_control_comprehensive_AdminCapability'(s: $42_access_control_comprehensive_AdminCapability): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'address'(s->$holder)
      && $IsValid'u64'(s->$permissions)
      && $IsValid'u64'(s->$created_at)
      && $IsValid'$1_option_Option'u64''(s->$expires_at)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_AdminCapability'(s1: $42_access_control_comprehensive_AdminCapability, s2: $42_access_control_comprehensive_AdminCapability): bool {
    $IsEqual'u64'(s1->$id, s2->$id)
    && $IsEqual'address'(s1->$holder, s2->$holder)
    && $IsEqual'u64'(s1->$permissions, s2->$permissions)
    && $IsEqual'u64'(s1->$created_at, s2->$created_at)
    && $IsEqual'$1_option_Option'u64''(s1->$expires_at, s2->$expires_at)}
var $42_access_control_comprehensive_AdminCapability_$memory: $Memory $42_access_control_comprehensive_AdminCapability;

// struct access_control_comprehensive::ExecutedTransaction at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:624:5+177
datatype $42_access_control_comprehensive_ExecutedTransaction {
    $42_access_control_comprehensive_ExecutedTransaction($id: int, $to: int, $amount: int, $approvers: Vec (int), $executed_at: int)
}
function {:inline} $Update'$42_access_control_comprehensive_ExecutedTransaction'_id(s: $42_access_control_comprehensive_ExecutedTransaction, x: int): $42_access_control_comprehensive_ExecutedTransaction {
    $42_access_control_comprehensive_ExecutedTransaction(x, s->$to, s->$amount, s->$approvers, s->$executed_at)
}
function {:inline} $Update'$42_access_control_comprehensive_ExecutedTransaction'_to(s: $42_access_control_comprehensive_ExecutedTransaction, x: int): $42_access_control_comprehensive_ExecutedTransaction {
    $42_access_control_comprehensive_ExecutedTransaction(s->$id, x, s->$amount, s->$approvers, s->$executed_at)
}
function {:inline} $Update'$42_access_control_comprehensive_ExecutedTransaction'_amount(s: $42_access_control_comprehensive_ExecutedTransaction, x: int): $42_access_control_comprehensive_ExecutedTransaction {
    $42_access_control_comprehensive_ExecutedTransaction(s->$id, s->$to, x, s->$approvers, s->$executed_at)
}
function {:inline} $Update'$42_access_control_comprehensive_ExecutedTransaction'_approvers(s: $42_access_control_comprehensive_ExecutedTransaction, x: Vec (int)): $42_access_control_comprehensive_ExecutedTransaction {
    $42_access_control_comprehensive_ExecutedTransaction(s->$id, s->$to, s->$amount, x, s->$executed_at)
}
function {:inline} $Update'$42_access_control_comprehensive_ExecutedTransaction'_executed_at(s: $42_access_control_comprehensive_ExecutedTransaction, x: int): $42_access_control_comprehensive_ExecutedTransaction {
    $42_access_control_comprehensive_ExecutedTransaction(s->$id, s->$to, s->$amount, s->$approvers, x)
}
function $IsValid'$42_access_control_comprehensive_ExecutedTransaction'(s: $42_access_control_comprehensive_ExecutedTransaction): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'address'(s->$to)
      && $IsValid'u64'(s->$amount)
      && $IsValid'vec'address''(s->$approvers)
      && $IsValid'u64'(s->$executed_at)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_ExecutedTransaction'(s1: $42_access_control_comprehensive_ExecutedTransaction, s2: $42_access_control_comprehensive_ExecutedTransaction): bool {
    $IsEqual'u64'(s1->$id, s2->$id)
    && $IsEqual'address'(s1->$to, s2->$to)
    && $IsEqual'u64'(s1->$amount, s2->$amount)
    && $IsEqual'vec'address''(s1->$approvers, s2->$approvers)
    && $IsEqual'u64'(s1->$executed_at, s2->$executed_at)}

// struct access_control_comprehensive::MultiSigWallet at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:606:5+244
datatype $42_access_control_comprehensive_MultiSigWallet {
    $42_access_control_comprehensive_MultiSigWallet($owners: Vec (int), $threshold: int, $pending_transactions: Vec ($42_access_control_comprehensive_PendingTransaction), $executed_transactions: Vec ($42_access_control_comprehensive_ExecutedTransaction), $nonce: int)
}
function {:inline} $Update'$42_access_control_comprehensive_MultiSigWallet'_owners(s: $42_access_control_comprehensive_MultiSigWallet, x: Vec (int)): $42_access_control_comprehensive_MultiSigWallet {
    $42_access_control_comprehensive_MultiSigWallet(x, s->$threshold, s->$pending_transactions, s->$executed_transactions, s->$nonce)
}
function {:inline} $Update'$42_access_control_comprehensive_MultiSigWallet'_threshold(s: $42_access_control_comprehensive_MultiSigWallet, x: int): $42_access_control_comprehensive_MultiSigWallet {
    $42_access_control_comprehensive_MultiSigWallet(s->$owners, x, s->$pending_transactions, s->$executed_transactions, s->$nonce)
}
function {:inline} $Update'$42_access_control_comprehensive_MultiSigWallet'_pending_transactions(s: $42_access_control_comprehensive_MultiSigWallet, x: Vec ($42_access_control_comprehensive_PendingTransaction)): $42_access_control_comprehensive_MultiSigWallet {
    $42_access_control_comprehensive_MultiSigWallet(s->$owners, s->$threshold, x, s->$executed_transactions, s->$nonce)
}
function {:inline} $Update'$42_access_control_comprehensive_MultiSigWallet'_executed_transactions(s: $42_access_control_comprehensive_MultiSigWallet, x: Vec ($42_access_control_comprehensive_ExecutedTransaction)): $42_access_control_comprehensive_MultiSigWallet {
    $42_access_control_comprehensive_MultiSigWallet(s->$owners, s->$threshold, s->$pending_transactions, x, s->$nonce)
}
function {:inline} $Update'$42_access_control_comprehensive_MultiSigWallet'_nonce(s: $42_access_control_comprehensive_MultiSigWallet, x: int): $42_access_control_comprehensive_MultiSigWallet {
    $42_access_control_comprehensive_MultiSigWallet(s->$owners, s->$threshold, s->$pending_transactions, s->$executed_transactions, x)
}
function $IsValid'$42_access_control_comprehensive_MultiSigWallet'(s: $42_access_control_comprehensive_MultiSigWallet): bool {
    $IsValid'vec'address''(s->$owners)
      && $IsValid'u64'(s->$threshold)
      && $IsValid'vec'$42_access_control_comprehensive_PendingTransaction''(s->$pending_transactions)
      && $IsValid'vec'$42_access_control_comprehensive_ExecutedTransaction''(s->$executed_transactions)
      && $IsValid'u64'(s->$nonce)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_MultiSigWallet'(s1: $42_access_control_comprehensive_MultiSigWallet, s2: $42_access_control_comprehensive_MultiSigWallet): bool {
    $IsEqual'vec'address''(s1->$owners, s2->$owners)
    && $IsEqual'u64'(s1->$threshold, s2->$threshold)
    && $IsEqual'vec'$42_access_control_comprehensive_PendingTransaction''(s1->$pending_transactions, s2->$pending_transactions)
    && $IsEqual'vec'$42_access_control_comprehensive_ExecutedTransaction''(s1->$executed_transactions, s2->$executed_transactions)
    && $IsEqual'u64'(s1->$nonce, s2->$nonce)}
var $42_access_control_comprehensive_MultiSigWallet_$memory: $Memory $42_access_control_comprehensive_MultiSigWallet;

// struct access_control_comprehensive::OwnershipRecord at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1013:5+232
datatype $42_access_control_comprehensive_OwnershipRecord {
    $42_access_control_comprehensive_OwnershipRecord($resource_id: int, $owner: int, $previous_owner: $1_option_Option'address', $transferred_at: int, $transfer_type: int)
}
function {:inline} $Update'$42_access_control_comprehensive_OwnershipRecord'_resource_id(s: $42_access_control_comprehensive_OwnershipRecord, x: int): $42_access_control_comprehensive_OwnershipRecord {
    $42_access_control_comprehensive_OwnershipRecord(x, s->$owner, s->$previous_owner, s->$transferred_at, s->$transfer_type)
}
function {:inline} $Update'$42_access_control_comprehensive_OwnershipRecord'_owner(s: $42_access_control_comprehensive_OwnershipRecord, x: int): $42_access_control_comprehensive_OwnershipRecord {
    $42_access_control_comprehensive_OwnershipRecord(s->$resource_id, x, s->$previous_owner, s->$transferred_at, s->$transfer_type)
}
function {:inline} $Update'$42_access_control_comprehensive_OwnershipRecord'_previous_owner(s: $42_access_control_comprehensive_OwnershipRecord, x: $1_option_Option'address'): $42_access_control_comprehensive_OwnershipRecord {
    $42_access_control_comprehensive_OwnershipRecord(s->$resource_id, s->$owner, x, s->$transferred_at, s->$transfer_type)
}
function {:inline} $Update'$42_access_control_comprehensive_OwnershipRecord'_transferred_at(s: $42_access_control_comprehensive_OwnershipRecord, x: int): $42_access_control_comprehensive_OwnershipRecord {
    $42_access_control_comprehensive_OwnershipRecord(s->$resource_id, s->$owner, s->$previous_owner, x, s->$transfer_type)
}
function {:inline} $Update'$42_access_control_comprehensive_OwnershipRecord'_transfer_type(s: $42_access_control_comprehensive_OwnershipRecord, x: int): $42_access_control_comprehensive_OwnershipRecord {
    $42_access_control_comprehensive_OwnershipRecord(s->$resource_id, s->$owner, s->$previous_owner, s->$transferred_at, x)
}
function $IsValid'$42_access_control_comprehensive_OwnershipRecord'(s: $42_access_control_comprehensive_OwnershipRecord): bool {
    $IsValid'u64'(s->$resource_id)
      && $IsValid'address'(s->$owner)
      && $IsValid'$1_option_Option'address''(s->$previous_owner)
      && $IsValid'u64'(s->$transferred_at)
      && $IsValid'u8'(s->$transfer_type)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_OwnershipRecord'(s1: $42_access_control_comprehensive_OwnershipRecord, s2: $42_access_control_comprehensive_OwnershipRecord): bool {
    $IsEqual'u64'(s1->$resource_id, s2->$resource_id)
    && $IsEqual'address'(s1->$owner, s2->$owner)
    && $IsEqual'$1_option_Option'address''(s1->$previous_owner, s2->$previous_owner)
    && $IsEqual'u64'(s1->$transferred_at, s2->$transferred_at)
    && $IsEqual'u8'(s1->$transfer_type, s2->$transfer_type)}

// struct access_control_comprehensive::PendingTransaction at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:614:5+230
datatype $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction($id: int, $to: int, $amount: int, $approvals: Vec (int), $created_by: int, $created_at: int, $executed: bool)
}
function {:inline} $Update'$42_access_control_comprehensive_PendingTransaction'_id(s: $42_access_control_comprehensive_PendingTransaction, x: int): $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction(x, s->$to, s->$amount, s->$approvals, s->$created_by, s->$created_at, s->$executed)
}
function {:inline} $Update'$42_access_control_comprehensive_PendingTransaction'_to(s: $42_access_control_comprehensive_PendingTransaction, x: int): $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction(s->$id, x, s->$amount, s->$approvals, s->$created_by, s->$created_at, s->$executed)
}
function {:inline} $Update'$42_access_control_comprehensive_PendingTransaction'_amount(s: $42_access_control_comprehensive_PendingTransaction, x: int): $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction(s->$id, s->$to, x, s->$approvals, s->$created_by, s->$created_at, s->$executed)
}
function {:inline} $Update'$42_access_control_comprehensive_PendingTransaction'_approvals(s: $42_access_control_comprehensive_PendingTransaction, x: Vec (int)): $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction(s->$id, s->$to, s->$amount, x, s->$created_by, s->$created_at, s->$executed)
}
function {:inline} $Update'$42_access_control_comprehensive_PendingTransaction'_created_by(s: $42_access_control_comprehensive_PendingTransaction, x: int): $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction(s->$id, s->$to, s->$amount, s->$approvals, x, s->$created_at, s->$executed)
}
function {:inline} $Update'$42_access_control_comprehensive_PendingTransaction'_created_at(s: $42_access_control_comprehensive_PendingTransaction, x: int): $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction(s->$id, s->$to, s->$amount, s->$approvals, s->$created_by, x, s->$executed)
}
function {:inline} $Update'$42_access_control_comprehensive_PendingTransaction'_executed(s: $42_access_control_comprehensive_PendingTransaction, x: bool): $42_access_control_comprehensive_PendingTransaction {
    $42_access_control_comprehensive_PendingTransaction(s->$id, s->$to, s->$amount, s->$approvals, s->$created_by, s->$created_at, x)
}
function $IsValid'$42_access_control_comprehensive_PendingTransaction'(s: $42_access_control_comprehensive_PendingTransaction): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'address'(s->$to)
      && $IsValid'u64'(s->$amount)
      && $IsValid'vec'address''(s->$approvals)
      && $IsValid'address'(s->$created_by)
      && $IsValid'u64'(s->$created_at)
      && $IsValid'bool'(s->$executed)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_PendingTransaction'(s1: $42_access_control_comprehensive_PendingTransaction, s2: $42_access_control_comprehensive_PendingTransaction): bool {
    $IsEqual'u64'(s1->$id, s2->$id)
    && $IsEqual'address'(s1->$to, s2->$to)
    && $IsEqual'u64'(s1->$amount, s2->$amount)
    && $IsEqual'vec'address''(s1->$approvals, s2->$approvals)
    && $IsEqual'address'(s1->$created_by, s2->$created_by)
    && $IsEqual'u64'(s1->$created_at, s2->$created_at)
    && $IsEqual'bool'(s1->$executed, s2->$executed)}

// struct access_control_comprehensive::Permission at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:812:5+147
datatype $42_access_control_comprehensive_Permission {
    $42_access_control_comprehensive_Permission($id: int, $name: Vec (int), $resource: Vec (int), $action: Vec (int))
}
function {:inline} $Update'$42_access_control_comprehensive_Permission'_id(s: $42_access_control_comprehensive_Permission, x: int): $42_access_control_comprehensive_Permission {
    $42_access_control_comprehensive_Permission(x, s->$name, s->$resource, s->$action)
}
function {:inline} $Update'$42_access_control_comprehensive_Permission'_name(s: $42_access_control_comprehensive_Permission, x: Vec (int)): $42_access_control_comprehensive_Permission {
    $42_access_control_comprehensive_Permission(s->$id, x, s->$resource, s->$action)
}
function {:inline} $Update'$42_access_control_comprehensive_Permission'_resource(s: $42_access_control_comprehensive_Permission, x: Vec (int)): $42_access_control_comprehensive_Permission {
    $42_access_control_comprehensive_Permission(s->$id, s->$name, x, s->$action)
}
function {:inline} $Update'$42_access_control_comprehensive_Permission'_action(s: $42_access_control_comprehensive_Permission, x: Vec (int)): $42_access_control_comprehensive_Permission {
    $42_access_control_comprehensive_Permission(s->$id, s->$name, s->$resource, x)
}
function $IsValid'$42_access_control_comprehensive_Permission'(s: $42_access_control_comprehensive_Permission): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'vec'u8''(s->$name)
      && $IsValid'vec'u8''(s->$resource)
      && $IsValid'vec'u8''(s->$action)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_Permission'(s1: $42_access_control_comprehensive_Permission, s2: $42_access_control_comprehensive_Permission): bool {
    $IsEqual'u64'(s1->$id, s2->$id)
    && $IsEqual'vec'u8''(s1->$name, s2->$name)
    && $IsEqual'vec'u8''(s1->$resource, s2->$resource)
    && $IsEqual'vec'u8''(s1->$action, s2->$action)}

// struct access_control_comprehensive::ProtocolCapability at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:301:5+140
datatype $42_access_control_comprehensive_ProtocolCapability {
    $42_access_control_comprehensive_ProtocolCapability($witness_used: bool, $protocol_admin: int, $initialized: bool)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolCapability'_witness_used(s: $42_access_control_comprehensive_ProtocolCapability, x: bool): $42_access_control_comprehensive_ProtocolCapability {
    $42_access_control_comprehensive_ProtocolCapability(x, s->$protocol_admin, s->$initialized)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolCapability'_protocol_admin(s: $42_access_control_comprehensive_ProtocolCapability, x: int): $42_access_control_comprehensive_ProtocolCapability {
    $42_access_control_comprehensive_ProtocolCapability(s->$witness_used, x, s->$initialized)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolCapability'_initialized(s: $42_access_control_comprehensive_ProtocolCapability, x: bool): $42_access_control_comprehensive_ProtocolCapability {
    $42_access_control_comprehensive_ProtocolCapability(s->$witness_used, s->$protocol_admin, x)
}
function $IsValid'$42_access_control_comprehensive_ProtocolCapability'(s: $42_access_control_comprehensive_ProtocolCapability): bool {
    $IsValid'bool'(s->$witness_used)
      && $IsValid'address'(s->$protocol_admin)
      && $IsValid'bool'(s->$initialized)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_ProtocolCapability'(s1: $42_access_control_comprehensive_ProtocolCapability, s2: $42_access_control_comprehensive_ProtocolCapability): bool {
    s1 == s2
}
var $42_access_control_comprehensive_ProtocolCapability_$memory: $Memory $42_access_control_comprehensive_ProtocolCapability;

// struct access_control_comprehensive::ProtocolState at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:308:5+159
datatype $42_access_control_comprehensive_ProtocolState {
    $42_access_control_comprehensive_ProtocolState($initialized: bool, $admin: int, $total_supply: int, $capabilities_issued: int)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolState'_initialized(s: $42_access_control_comprehensive_ProtocolState, x: bool): $42_access_control_comprehensive_ProtocolState {
    $42_access_control_comprehensive_ProtocolState(x, s->$admin, s->$total_supply, s->$capabilities_issued)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolState'_admin(s: $42_access_control_comprehensive_ProtocolState, x: int): $42_access_control_comprehensive_ProtocolState {
    $42_access_control_comprehensive_ProtocolState(s->$initialized, x, s->$total_supply, s->$capabilities_issued)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolState'_total_supply(s: $42_access_control_comprehensive_ProtocolState, x: int): $42_access_control_comprehensive_ProtocolState {
    $42_access_control_comprehensive_ProtocolState(s->$initialized, s->$admin, x, s->$capabilities_issued)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolState'_capabilities_issued(s: $42_access_control_comprehensive_ProtocolState, x: int): $42_access_control_comprehensive_ProtocolState {
    $42_access_control_comprehensive_ProtocolState(s->$initialized, s->$admin, s->$total_supply, x)
}
function $IsValid'$42_access_control_comprehensive_ProtocolState'(s: $42_access_control_comprehensive_ProtocolState): bool {
    $IsValid'bool'(s->$initialized)
      && $IsValid'address'(s->$admin)
      && $IsValid'u64'(s->$total_supply)
      && $IsValid'u64'(s->$capabilities_issued)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_ProtocolState'(s1: $42_access_control_comprehensive_ProtocolState, s2: $42_access_control_comprehensive_ProtocolState): bool {
    s1 == s2
}
var $42_access_control_comprehensive_ProtocolState_$memory: $Memory $42_access_control_comprehensive_ProtocolState;

// struct access_control_comprehensive::ProtocolWitness at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:298:5+34
datatype $42_access_control_comprehensive_ProtocolWitness {
    $42_access_control_comprehensive_ProtocolWitness($dummy_field: bool)
}
function {:inline} $Update'$42_access_control_comprehensive_ProtocolWitness'_dummy_field(s: $42_access_control_comprehensive_ProtocolWitness, x: bool): $42_access_control_comprehensive_ProtocolWitness {
    $42_access_control_comprehensive_ProtocolWitness(x)
}
function $IsValid'$42_access_control_comprehensive_ProtocolWitness'(s: $42_access_control_comprehensive_ProtocolWitness): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_ProtocolWitness'(s1: $42_access_control_comprehensive_ProtocolWitness, s2: $42_access_control_comprehensive_ProtocolWitness): bool {
    s1 == s2
}

// struct access_control_comprehensive::Resource at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1004:5+181
datatype $42_access_control_comprehensive_Resource {
    $42_access_control_comprehensive_Resource($id: int, $owner: int, $resource_type: int, $value: int, $locked: bool, $created_at: int)
}
function {:inline} $Update'$42_access_control_comprehensive_Resource'_id(s: $42_access_control_comprehensive_Resource, x: int): $42_access_control_comprehensive_Resource {
    $42_access_control_comprehensive_Resource(x, s->$owner, s->$resource_type, s->$value, s->$locked, s->$created_at)
}
function {:inline} $Update'$42_access_control_comprehensive_Resource'_owner(s: $42_access_control_comprehensive_Resource, x: int): $42_access_control_comprehensive_Resource {
    $42_access_control_comprehensive_Resource(s->$id, x, s->$resource_type, s->$value, s->$locked, s->$created_at)
}
function {:inline} $Update'$42_access_control_comprehensive_Resource'_resource_type(s: $42_access_control_comprehensive_Resource, x: int): $42_access_control_comprehensive_Resource {
    $42_access_control_comprehensive_Resource(s->$id, s->$owner, x, s->$value, s->$locked, s->$created_at)
}
function {:inline} $Update'$42_access_control_comprehensive_Resource'_value(s: $42_access_control_comprehensive_Resource, x: int): $42_access_control_comprehensive_Resource {
    $42_access_control_comprehensive_Resource(s->$id, s->$owner, s->$resource_type, x, s->$locked, s->$created_at)
}
function {:inline} $Update'$42_access_control_comprehensive_Resource'_locked(s: $42_access_control_comprehensive_Resource, x: bool): $42_access_control_comprehensive_Resource {
    $42_access_control_comprehensive_Resource(s->$id, s->$owner, s->$resource_type, s->$value, x, s->$created_at)
}
function {:inline} $Update'$42_access_control_comprehensive_Resource'_created_at(s: $42_access_control_comprehensive_Resource, x: int): $42_access_control_comprehensive_Resource {
    $42_access_control_comprehensive_Resource(s->$id, s->$owner, s->$resource_type, s->$value, s->$locked, x)
}
function $IsValid'$42_access_control_comprehensive_Resource'(s: $42_access_control_comprehensive_Resource): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'address'(s->$owner)
      && $IsValid'u8'(s->$resource_type)
      && $IsValid'u64'(s->$value)
      && $IsValid'bool'(s->$locked)
      && $IsValid'u64'(s->$created_at)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_Resource'(s1: $42_access_control_comprehensive_Resource, s2: $42_access_control_comprehensive_Resource): bool {
    s1 == s2
}

// struct access_control_comprehensive::ResourceOwnership at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:997:5+230
datatype $42_access_control_comprehensive_ResourceOwnership {
    $42_access_control_comprehensive_ResourceOwnership($resources: Vec ($42_access_control_comprehensive_Resource), $ownership_records: Vec ($42_access_control_comprehensive_OwnershipRecord), $access_grants: Vec ($42_access_control_comprehensive_AccessGrant), $transfer_log: Vec ($42_access_control_comprehensive_TransferRecord))
}
function {:inline} $Update'$42_access_control_comprehensive_ResourceOwnership'_resources(s: $42_access_control_comprehensive_ResourceOwnership, x: Vec ($42_access_control_comprehensive_Resource)): $42_access_control_comprehensive_ResourceOwnership {
    $42_access_control_comprehensive_ResourceOwnership(x, s->$ownership_records, s->$access_grants, s->$transfer_log)
}
function {:inline} $Update'$42_access_control_comprehensive_ResourceOwnership'_ownership_records(s: $42_access_control_comprehensive_ResourceOwnership, x: Vec ($42_access_control_comprehensive_OwnershipRecord)): $42_access_control_comprehensive_ResourceOwnership {
    $42_access_control_comprehensive_ResourceOwnership(s->$resources, x, s->$access_grants, s->$transfer_log)
}
function {:inline} $Update'$42_access_control_comprehensive_ResourceOwnership'_access_grants(s: $42_access_control_comprehensive_ResourceOwnership, x: Vec ($42_access_control_comprehensive_AccessGrant)): $42_access_control_comprehensive_ResourceOwnership {
    $42_access_control_comprehensive_ResourceOwnership(s->$resources, s->$ownership_records, x, s->$transfer_log)
}
function {:inline} $Update'$42_access_control_comprehensive_ResourceOwnership'_transfer_log(s: $42_access_control_comprehensive_ResourceOwnership, x: Vec ($42_access_control_comprehensive_TransferRecord)): $42_access_control_comprehensive_ResourceOwnership {
    $42_access_control_comprehensive_ResourceOwnership(s->$resources, s->$ownership_records, s->$access_grants, x)
}
function $IsValid'$42_access_control_comprehensive_ResourceOwnership'(s: $42_access_control_comprehensive_ResourceOwnership): bool {
    $IsValid'vec'$42_access_control_comprehensive_Resource''(s->$resources)
      && $IsValid'vec'$42_access_control_comprehensive_OwnershipRecord''(s->$ownership_records)
      && $IsValid'vec'$42_access_control_comprehensive_AccessGrant''(s->$access_grants)
      && $IsValid'vec'$42_access_control_comprehensive_TransferRecord''(s->$transfer_log)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_ResourceOwnership'(s1: $42_access_control_comprehensive_ResourceOwnership, s2: $42_access_control_comprehensive_ResourceOwnership): bool {
    $IsEqual'vec'$42_access_control_comprehensive_Resource''(s1->$resources, s2->$resources)
    && $IsEqual'vec'$42_access_control_comprehensive_OwnershipRecord''(s1->$ownership_records, s2->$ownership_records)
    && $IsEqual'vec'$42_access_control_comprehensive_AccessGrant''(s1->$access_grants, s2->$access_grants)
    && $IsEqual'vec'$42_access_control_comprehensive_TransferRecord''(s1->$transfer_log, s2->$transfer_log)}
var $42_access_control_comprehensive_ResourceOwnership_$memory: $Memory $42_access_control_comprehensive_ResourceOwnership;

// struct access_control_comprehensive::Role at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:805:5+124
datatype $42_access_control_comprehensive_Role {
    $42_access_control_comprehensive_Role($id: int, $name: Vec (int), $level: int, $active: bool)
}
function {:inline} $Update'$42_access_control_comprehensive_Role'_id(s: $42_access_control_comprehensive_Role, x: int): $42_access_control_comprehensive_Role {
    $42_access_control_comprehensive_Role(x, s->$name, s->$level, s->$active)
}
function {:inline} $Update'$42_access_control_comprehensive_Role'_name(s: $42_access_control_comprehensive_Role, x: Vec (int)): $42_access_control_comprehensive_Role {
    $42_access_control_comprehensive_Role(s->$id, x, s->$level, s->$active)
}
function {:inline} $Update'$42_access_control_comprehensive_Role'_level(s: $42_access_control_comprehensive_Role, x: int): $42_access_control_comprehensive_Role {
    $42_access_control_comprehensive_Role(s->$id, s->$name, x, s->$active)
}
function {:inline} $Update'$42_access_control_comprehensive_Role'_active(s: $42_access_control_comprehensive_Role, x: bool): $42_access_control_comprehensive_Role {
    $42_access_control_comprehensive_Role(s->$id, s->$name, s->$level, x)
}
function $IsValid'$42_access_control_comprehensive_Role'(s: $42_access_control_comprehensive_Role): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'vec'u8''(s->$name)
      && $IsValid'u8'(s->$level)
      && $IsValid'bool'(s->$active)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_Role'(s1: $42_access_control_comprehensive_Role, s2: $42_access_control_comprehensive_Role): bool {
    $IsEqual'u64'(s1->$id, s2->$id)
    && $IsEqual'vec'u8''(s1->$name, s2->$name)
    && $IsEqual'u8'(s1->$level, s2->$level)
    && $IsEqual'bool'(s1->$active, s2->$active)}

// struct access_control_comprehensive::RoleManager at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:463:5+161
datatype $42_access_control_comprehensive_RoleManager {
    $42_access_control_comprehensive_RoleManager($roles: Vec ($42_access_control_comprehensive_UserRole), $super_admin: int, $role_assignments: int, $locked: bool)
}
function {:inline} $Update'$42_access_control_comprehensive_RoleManager'_roles(s: $42_access_control_comprehensive_RoleManager, x: Vec ($42_access_control_comprehensive_UserRole)): $42_access_control_comprehensive_RoleManager {
    $42_access_control_comprehensive_RoleManager(x, s->$super_admin, s->$role_assignments, s->$locked)
}
function {:inline} $Update'$42_access_control_comprehensive_RoleManager'_super_admin(s: $42_access_control_comprehensive_RoleManager, x: int): $42_access_control_comprehensive_RoleManager {
    $42_access_control_comprehensive_RoleManager(s->$roles, x, s->$role_assignments, s->$locked)
}
function {:inline} $Update'$42_access_control_comprehensive_RoleManager'_role_assignments(s: $42_access_control_comprehensive_RoleManager, x: int): $42_access_control_comprehensive_RoleManager {
    $42_access_control_comprehensive_RoleManager(s->$roles, s->$super_admin, x, s->$locked)
}
function {:inline} $Update'$42_access_control_comprehensive_RoleManager'_locked(s: $42_access_control_comprehensive_RoleManager, x: bool): $42_access_control_comprehensive_RoleManager {
    $42_access_control_comprehensive_RoleManager(s->$roles, s->$super_admin, s->$role_assignments, x)
}
function $IsValid'$42_access_control_comprehensive_RoleManager'(s: $42_access_control_comprehensive_RoleManager): bool {
    $IsValid'vec'$42_access_control_comprehensive_UserRole''(s->$roles)
      && $IsValid'address'(s->$super_admin)
      && $IsValid'u64'(s->$role_assignments)
      && $IsValid'bool'(s->$locked)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_RoleManager'(s1: $42_access_control_comprehensive_RoleManager, s2: $42_access_control_comprehensive_RoleManager): bool {
    $IsEqual'vec'$42_access_control_comprehensive_UserRole''(s1->$roles, s2->$roles)
    && $IsEqual'address'(s1->$super_admin, s2->$super_admin)
    && $IsEqual'u64'(s1->$role_assignments, s2->$role_assignments)
    && $IsEqual'bool'(s1->$locked, s2->$locked)}
var $42_access_control_comprehensive_RoleManager_$memory: $Memory $42_access_control_comprehensive_RoleManager;

// struct access_control_comprehensive::RolePermission at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:819:5+154
datatype $42_access_control_comprehensive_RolePermission {
    $42_access_control_comprehensive_RolePermission($role_id: int, $permission_id: int, $granted_by: int, $granted_at: int)
}
function {:inline} $Update'$42_access_control_comprehensive_RolePermission'_role_id(s: $42_access_control_comprehensive_RolePermission, x: int): $42_access_control_comprehensive_RolePermission {
    $42_access_control_comprehensive_RolePermission(x, s->$permission_id, s->$granted_by, s->$granted_at)
}
function {:inline} $Update'$42_access_control_comprehensive_RolePermission'_permission_id(s: $42_access_control_comprehensive_RolePermission, x: int): $42_access_control_comprehensive_RolePermission {
    $42_access_control_comprehensive_RolePermission(s->$role_id, x, s->$granted_by, s->$granted_at)
}
function {:inline} $Update'$42_access_control_comprehensive_RolePermission'_granted_by(s: $42_access_control_comprehensive_RolePermission, x: int): $42_access_control_comprehensive_RolePermission {
    $42_access_control_comprehensive_RolePermission(s->$role_id, s->$permission_id, x, s->$granted_at)
}
function {:inline} $Update'$42_access_control_comprehensive_RolePermission'_granted_at(s: $42_access_control_comprehensive_RolePermission, x: int): $42_access_control_comprehensive_RolePermission {
    $42_access_control_comprehensive_RolePermission(s->$role_id, s->$permission_id, s->$granted_by, x)
}
function $IsValid'$42_access_control_comprehensive_RolePermission'(s: $42_access_control_comprehensive_RolePermission): bool {
    $IsValid'u64'(s->$role_id)
      && $IsValid'u64'(s->$permission_id)
      && $IsValid'address'(s->$granted_by)
      && $IsValid'u64'(s->$granted_at)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_RolePermission'(s1: $42_access_control_comprehensive_RolePermission, s2: $42_access_control_comprehensive_RolePermission): bool {
    s1 == s2
}

// struct access_control_comprehensive::SystemState at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:105:5+249
datatype $42_access_control_comprehensive_SystemState {
    $42_access_control_comprehensive_SystemState($admin_capabilities: Vec ($42_access_control_comprehensive_AdminCapability), $treasury_capabilities: Vec ($42_access_control_comprehensive_TreasuryCapability), $total_funds: int, $emergency_locked: bool, $capability_counter: int)
}
function {:inline} $Update'$42_access_control_comprehensive_SystemState'_admin_capabilities(s: $42_access_control_comprehensive_SystemState, x: Vec ($42_access_control_comprehensive_AdminCapability)): $42_access_control_comprehensive_SystemState {
    $42_access_control_comprehensive_SystemState(x, s->$treasury_capabilities, s->$total_funds, s->$emergency_locked, s->$capability_counter)
}
function {:inline} $Update'$42_access_control_comprehensive_SystemState'_treasury_capabilities(s: $42_access_control_comprehensive_SystemState, x: Vec ($42_access_control_comprehensive_TreasuryCapability)): $42_access_control_comprehensive_SystemState {
    $42_access_control_comprehensive_SystemState(s->$admin_capabilities, x, s->$total_funds, s->$emergency_locked, s->$capability_counter)
}
function {:inline} $Update'$42_access_control_comprehensive_SystemState'_total_funds(s: $42_access_control_comprehensive_SystemState, x: int): $42_access_control_comprehensive_SystemState {
    $42_access_control_comprehensive_SystemState(s->$admin_capabilities, s->$treasury_capabilities, x, s->$emergency_locked, s->$capability_counter)
}
function {:inline} $Update'$42_access_control_comprehensive_SystemState'_emergency_locked(s: $42_access_control_comprehensive_SystemState, x: bool): $42_access_control_comprehensive_SystemState {
    $42_access_control_comprehensive_SystemState(s->$admin_capabilities, s->$treasury_capabilities, s->$total_funds, x, s->$capability_counter)
}
function {:inline} $Update'$42_access_control_comprehensive_SystemState'_capability_counter(s: $42_access_control_comprehensive_SystemState, x: int): $42_access_control_comprehensive_SystemState {
    $42_access_control_comprehensive_SystemState(s->$admin_capabilities, s->$treasury_capabilities, s->$total_funds, s->$emergency_locked, x)
}
function $IsValid'$42_access_control_comprehensive_SystemState'(s: $42_access_control_comprehensive_SystemState): bool {
    $IsValid'vec'$42_access_control_comprehensive_AdminCapability''(s->$admin_capabilities)
      && $IsValid'vec'$42_access_control_comprehensive_TreasuryCapability''(s->$treasury_capabilities)
      && $IsValid'u64'(s->$total_funds)
      && $IsValid'bool'(s->$emergency_locked)
      && $IsValid'u64'(s->$capability_counter)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_SystemState'(s1: $42_access_control_comprehensive_SystemState, s2: $42_access_control_comprehensive_SystemState): bool {
    $IsEqual'vec'$42_access_control_comprehensive_AdminCapability''(s1->$admin_capabilities, s2->$admin_capabilities)
    && $IsEqual'vec'$42_access_control_comprehensive_TreasuryCapability''(s1->$treasury_capabilities, s2->$treasury_capabilities)
    && $IsEqual'u64'(s1->$total_funds, s2->$total_funds)
    && $IsEqual'bool'(s1->$emergency_locked, s2->$emergency_locked)
    && $IsEqual'u64'(s1->$capability_counter, s2->$capability_counter)}
var $42_access_control_comprehensive_SystemState_$memory: $Memory $42_access_control_comprehensive_SystemState;

// struct access_control_comprehensive::TransferRecord at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1030:5+182
datatype $42_access_control_comprehensive_TransferRecord {
    $42_access_control_comprehensive_TransferRecord($resource_id: int, $from: int, $to: int, $transferred_at: int, $authorized_by: int)
}
function {:inline} $Update'$42_access_control_comprehensive_TransferRecord'_resource_id(s: $42_access_control_comprehensive_TransferRecord, x: int): $42_access_control_comprehensive_TransferRecord {
    $42_access_control_comprehensive_TransferRecord(x, s->$from, s->$to, s->$transferred_at, s->$authorized_by)
}
function {:inline} $Update'$42_access_control_comprehensive_TransferRecord'_from(s: $42_access_control_comprehensive_TransferRecord, x: int): $42_access_control_comprehensive_TransferRecord {
    $42_access_control_comprehensive_TransferRecord(s->$resource_id, x, s->$to, s->$transferred_at, s->$authorized_by)
}
function {:inline} $Update'$42_access_control_comprehensive_TransferRecord'_to(s: $42_access_control_comprehensive_TransferRecord, x: int): $42_access_control_comprehensive_TransferRecord {
    $42_access_control_comprehensive_TransferRecord(s->$resource_id, s->$from, x, s->$transferred_at, s->$authorized_by)
}
function {:inline} $Update'$42_access_control_comprehensive_TransferRecord'_transferred_at(s: $42_access_control_comprehensive_TransferRecord, x: int): $42_access_control_comprehensive_TransferRecord {
    $42_access_control_comprehensive_TransferRecord(s->$resource_id, s->$from, s->$to, x, s->$authorized_by)
}
function {:inline} $Update'$42_access_control_comprehensive_TransferRecord'_authorized_by(s: $42_access_control_comprehensive_TransferRecord, x: int): $42_access_control_comprehensive_TransferRecord {
    $42_access_control_comprehensive_TransferRecord(s->$resource_id, s->$from, s->$to, s->$transferred_at, x)
}
function $IsValid'$42_access_control_comprehensive_TransferRecord'(s: $42_access_control_comprehensive_TransferRecord): bool {
    $IsValid'u64'(s->$resource_id)
      && $IsValid'address'(s->$from)
      && $IsValid'address'(s->$to)
      && $IsValid'u64'(s->$transferred_at)
      && $IsValid'address'(s->$authorized_by)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_TransferRecord'(s1: $42_access_control_comprehensive_TransferRecord, s2: $42_access_control_comprehensive_TransferRecord): bool {
    s1 == s2
}

// struct access_control_comprehensive::TreasuryCapability at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:97:5+181
datatype $42_access_control_comprehensive_TreasuryCapability {
    $42_access_control_comprehensive_TreasuryCapability($id: int, $holder: int, $spending_limit: int, $daily_limit: int, $last_used: int)
}
function {:inline} $Update'$42_access_control_comprehensive_TreasuryCapability'_id(s: $42_access_control_comprehensive_TreasuryCapability, x: int): $42_access_control_comprehensive_TreasuryCapability {
    $42_access_control_comprehensive_TreasuryCapability(x, s->$holder, s->$spending_limit, s->$daily_limit, s->$last_used)
}
function {:inline} $Update'$42_access_control_comprehensive_TreasuryCapability'_holder(s: $42_access_control_comprehensive_TreasuryCapability, x: int): $42_access_control_comprehensive_TreasuryCapability {
    $42_access_control_comprehensive_TreasuryCapability(s->$id, x, s->$spending_limit, s->$daily_limit, s->$last_used)
}
function {:inline} $Update'$42_access_control_comprehensive_TreasuryCapability'_spending_limit(s: $42_access_control_comprehensive_TreasuryCapability, x: int): $42_access_control_comprehensive_TreasuryCapability {
    $42_access_control_comprehensive_TreasuryCapability(s->$id, s->$holder, x, s->$daily_limit, s->$last_used)
}
function {:inline} $Update'$42_access_control_comprehensive_TreasuryCapability'_daily_limit(s: $42_access_control_comprehensive_TreasuryCapability, x: int): $42_access_control_comprehensive_TreasuryCapability {
    $42_access_control_comprehensive_TreasuryCapability(s->$id, s->$holder, s->$spending_limit, x, s->$last_used)
}
function {:inline} $Update'$42_access_control_comprehensive_TreasuryCapability'_last_used(s: $42_access_control_comprehensive_TreasuryCapability, x: int): $42_access_control_comprehensive_TreasuryCapability {
    $42_access_control_comprehensive_TreasuryCapability(s->$id, s->$holder, s->$spending_limit, s->$daily_limit, x)
}
function $IsValid'$42_access_control_comprehensive_TreasuryCapability'(s: $42_access_control_comprehensive_TreasuryCapability): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'address'(s->$holder)
      && $IsValid'u64'(s->$spending_limit)
      && $IsValid'u64'(s->$daily_limit)
      && $IsValid'u64'(s->$last_used)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_TreasuryCapability'(s1: $42_access_control_comprehensive_TreasuryCapability, s2: $42_access_control_comprehensive_TreasuryCapability): bool {
    s1 == s2
}
var $42_access_control_comprehensive_TreasuryCapability_$memory: $Memory $42_access_control_comprehensive_TreasuryCapability;

// struct access_control_comprehensive::UserRole at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:455:5+227
datatype $42_access_control_comprehensive_UserRole {
    $42_access_control_comprehensive_UserRole($user: int, $role_level: int, $assigned_by: int, $assigned_at: int, $permissions: Vec (int))
}
function {:inline} $Update'$42_access_control_comprehensive_UserRole'_user(s: $42_access_control_comprehensive_UserRole, x: int): $42_access_control_comprehensive_UserRole {
    $42_access_control_comprehensive_UserRole(x, s->$role_level, s->$assigned_by, s->$assigned_at, s->$permissions)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRole'_role_level(s: $42_access_control_comprehensive_UserRole, x: int): $42_access_control_comprehensive_UserRole {
    $42_access_control_comprehensive_UserRole(s->$user, x, s->$assigned_by, s->$assigned_at, s->$permissions)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRole'_assigned_by(s: $42_access_control_comprehensive_UserRole, x: int): $42_access_control_comprehensive_UserRole {
    $42_access_control_comprehensive_UserRole(s->$user, s->$role_level, x, s->$assigned_at, s->$permissions)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRole'_assigned_at(s: $42_access_control_comprehensive_UserRole, x: int): $42_access_control_comprehensive_UserRole {
    $42_access_control_comprehensive_UserRole(s->$user, s->$role_level, s->$assigned_by, x, s->$permissions)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRole'_permissions(s: $42_access_control_comprehensive_UserRole, x: Vec (int)): $42_access_control_comprehensive_UserRole {
    $42_access_control_comprehensive_UserRole(s->$user, s->$role_level, s->$assigned_by, s->$assigned_at, x)
}
function $IsValid'$42_access_control_comprehensive_UserRole'(s: $42_access_control_comprehensive_UserRole): bool {
    $IsValid'address'(s->$user)
      && $IsValid'u8'(s->$role_level)
      && $IsValid'address'(s->$assigned_by)
      && $IsValid'u64'(s->$assigned_at)
      && $IsValid'vec'u8''(s->$permissions)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_UserRole'(s1: $42_access_control_comprehensive_UserRole, s2: $42_access_control_comprehensive_UserRole): bool {
    $IsEqual'address'(s1->$user, s2->$user)
    && $IsEqual'u8'(s1->$role_level, s2->$role_level)
    && $IsEqual'address'(s1->$assigned_by, s2->$assigned_by)
    && $IsEqual'u64'(s1->$assigned_at, s2->$assigned_at)
    && $IsEqual'vec'u8''(s1->$permissions, s2->$permissions)}

// struct access_control_comprehensive::UserRoleAssignment at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:826:5+189
datatype $42_access_control_comprehensive_UserRoleAssignment {
    $42_access_control_comprehensive_UserRoleAssignment($user: int, $role_id: int, $assigned_by: int, $assigned_at: int, $expires_at: $1_option_Option'u64')
}
function {:inline} $Update'$42_access_control_comprehensive_UserRoleAssignment'_user(s: $42_access_control_comprehensive_UserRoleAssignment, x: int): $42_access_control_comprehensive_UserRoleAssignment {
    $42_access_control_comprehensive_UserRoleAssignment(x, s->$role_id, s->$assigned_by, s->$assigned_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRoleAssignment'_role_id(s: $42_access_control_comprehensive_UserRoleAssignment, x: int): $42_access_control_comprehensive_UserRoleAssignment {
    $42_access_control_comprehensive_UserRoleAssignment(s->$user, x, s->$assigned_by, s->$assigned_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRoleAssignment'_assigned_by(s: $42_access_control_comprehensive_UserRoleAssignment, x: int): $42_access_control_comprehensive_UserRoleAssignment {
    $42_access_control_comprehensive_UserRoleAssignment(s->$user, s->$role_id, x, s->$assigned_at, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRoleAssignment'_assigned_at(s: $42_access_control_comprehensive_UserRoleAssignment, x: int): $42_access_control_comprehensive_UserRoleAssignment {
    $42_access_control_comprehensive_UserRoleAssignment(s->$user, s->$role_id, s->$assigned_by, x, s->$expires_at)
}
function {:inline} $Update'$42_access_control_comprehensive_UserRoleAssignment'_expires_at(s: $42_access_control_comprehensive_UserRoleAssignment, x: $1_option_Option'u64'): $42_access_control_comprehensive_UserRoleAssignment {
    $42_access_control_comprehensive_UserRoleAssignment(s->$user, s->$role_id, s->$assigned_by, s->$assigned_at, x)
}
function $IsValid'$42_access_control_comprehensive_UserRoleAssignment'(s: $42_access_control_comprehensive_UserRoleAssignment): bool {
    $IsValid'address'(s->$user)
      && $IsValid'u64'(s->$role_id)
      && $IsValid'address'(s->$assigned_by)
      && $IsValid'u64'(s->$assigned_at)
      && $IsValid'$1_option_Option'u64''(s->$expires_at)
}
function {:inline} $IsEqual'$42_access_control_comprehensive_UserRoleAssignment'(s1: $42_access_control_comprehensive_UserRoleAssignment, s2: $42_access_control_comprehensive_UserRoleAssignment): bool {
    $IsEqual'address'(s1->$user, s2->$user)
    && $IsEqual'u64'(s1->$role_id, s2->$role_id)
    && $IsEqual'address'(s1->$assigned_by, s2->$assigned_by)
    && $IsEqual'u64'(s1->$assigned_at, s2->$assigned_at)
    && $IsEqual'$1_option_Option'u64''(s1->$expires_at, s2->$expires_at)}

// fun access_control_comprehensive::access_control_pattern_analysis [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1323:5+4823
procedure {:timeLimit 40} $42_access_control_comprehensive_access_control_pattern_analysis$verify() returns ($ret0: Vec (bool), $ret1: Vec (bool))
{
    // declare local variables
    var $t0: Vec (bool);
    var $t1: Vec (bool);
    var $t2: $42_access_control_comprehensive_SystemState;
    var $t3: $42_access_control_comprehensive_SystemState;
    var $t4: $42_access_control_comprehensive_AdminCapability;
    var $t5: $42_access_control_comprehensive_AdminCapability;
    var $t6: $42_access_control_comprehensive_MultiSigWallet;
    var $t7: $42_access_control_comprehensive_MultiSigWallet;
    var $t8: $Mutation (Vec (bool));
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t13: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t18: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $42_access_control_comprehensive_AdminCapability;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: $1_option_Option'u64';
    var $t34: $42_access_control_comprehensive_AdminCapability;
    var $t35: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t36: int;
    var $t37: $Mutation (Vec (bool));
    var $t38: $42_access_control_comprehensive_SystemState;
    var $t39: int;
    var $t40: int;
    var $t41: bool;
    var $t42: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t43: int;
    var $t44: int;
    var $t45: int;
    var $t46: $Mutation (Vec (bool));
    var $t47: $42_access_control_comprehensive_SystemState;
    var $t48: int;
    var $t49: int;
    var $t50: bool;
    var $t51: Vec (int);
    var $t52: int;
    var $t53: int;
    var $t54: int;
    var $t55: int;
    var $t56: Vec (int);
    var $t57: int;
    var $t58: int;
    var $t59: bool;
    var $t60: $42_access_control_comprehensive_PendingTransaction;
    var $t61: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t62: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction));
    var $t63: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var $t64: int;
    var $t65: Vec (int);
    var $t66: int;
    var $t67: int;
    var $t68: int;
    var $t69: int;
    var $t70: Vec (int);
    var $t71: int;
    var $t72: int;
    var $t73: bool;
    var $t74: $42_access_control_comprehensive_PendingTransaction;
    var $t75: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t76: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction));
    var $t77: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var $t78: int;
    var $t79: $Mutation ($42_access_control_comprehensive_MultiSigWallet);
    var $t80: int;
    var $t81: int;
    var $t82: $Mutation ($42_access_control_comprehensive_MultiSigWallet);
    var $t83: int;
    var $t84: int;
    var $t85: $42_access_control_comprehensive_MultiSigWallet;
    var $t86: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t87: int;
    var $t88: $42_access_control_comprehensive_PendingTransaction;
    var $t89: Vec (int);
    var $t90: int;
    var $t91: $Mutation (Vec (bool));
    var $t92: int;
    var $t93: bool;
    var $t94: $Mutation ($42_access_control_comprehensive_MultiSigWallet);
    var $t95: int;
    var $t96: int;
    var $t97: $42_access_control_comprehensive_MultiSigWallet;
    var $t98: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t99: int;
    var $t100: $42_access_control_comprehensive_PendingTransaction;
    var $t101: Vec (int);
    var $t102: int;
    var $t103: $Mutation (Vec (bool));
    var $t104: int;
    var $t105: bool;
    var $t106: $42_access_control_comprehensive_SystemState;
    var $t107: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t108: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var $t109: int;
    var $t110: bool;
    var $t111: int;
    var $t112: $42_access_control_comprehensive_SystemState;
    var $t113: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t114: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var $t115: int;
    var $t116: bool;
    var $t117: int;
    var $t118: $42_access_control_comprehensive_MultiSigWallet;
    var $t119: Vec (int);
    var $t120: int;
    var $t121: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t122: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var $t123: int;
    var $t124: $42_access_control_comprehensive_MultiSigWallet;
    var $t125: Vec (int);
    var $t126: int;
    var $t127: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t128: Vec ($42_access_control_comprehensive_ExecutedTransaction);
    var $t129: int;
    var $t130: Vec (bool);
    var $t131: Vec (bool);
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'$42_access_control_comprehensive_MultiSigWallet': $42_access_control_comprehensive_MultiSigWallet;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'bool': bool;
    var $temp_0'vec'bool'': Vec (bool);

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := vector::empty<bool>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1324:34+21
    assume {:print "$at(2,52906,52927)"} true;
    call $t0 := $1_vector_empty'bool'();
    if ($abort_flag) {
        assume {:print "$at(2,52906,52927)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[vulnerable_results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1324:34+21
    assume {:print "$track_local(3,0,0):", $t0} $t0 == $t0;

    // $t1 := vector::empty<bool>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1325:30+21
    assume {:print "$at(2,52959,52980)"} true;
    call $t1 := $1_vector_empty'bool'();
    if ($abort_flag) {
        assume {:print "$at(2,52959,52980)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // trace_local[secure_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1325:30+21
    assume {:print "$track_local(3,0,1):", $t1} $t1 == $t1;

    // $t12 := vector::empty<0x42::access_control_comprehensive::AdminCapability>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1329:33+15
    assume {:print "$at(2,53112,53127)"} true;
    call $t12 := $1_vector_empty'$42_access_control_comprehensive_AdminCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,53112,53127)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t13 := vector::empty<0x42::access_control_comprehensive::TreasuryCapability>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1330:36+15
    assume {:print "$at(2,53165,53180)"} true;
    call $t13 := $1_vector_empty'$42_access_control_comprehensive_TreasuryCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,53165,53180)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t14 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1331:26+7
    assume {:print "$at(2,53208,53215)"} true;
    $t14 := 1000000;
    assume $IsValid'u64'($t14);

    // $t15 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1332:31+5
    assume {:print "$at(2,53248,53253)"} true;
    $t15 := false;
    assume $IsValid'bool'($t15);

    // $t16 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1333:33+1
    assume {:print "$at(2,53288,53289)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t2 := pack 0x42::access_control_comprehensive::SystemState($t12, $t13, $t14, $t15, $t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1328:27+236
    assume {:print "$at(2,53065,53301)"} true;
    $t2 := $42_access_control_comprehensive_SystemState($t12, $t13, $t14, $t15, $t16);

    // trace_local[system_vuln]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1328:27+236
    assume {:print "$track_local(3,0,2):", $t2} $t2 == $t2;

    // $t17 := vector::empty<0x42::access_control_comprehensive::AdminCapability>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1337:33+15
    assume {:print "$at(2,53381,53396)"} true;
    call $t17 := $1_vector_empty'$42_access_control_comprehensive_AdminCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,53381,53396)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t18 := vector::empty<0x42::access_control_comprehensive::TreasuryCapability>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1338:36+15
    assume {:print "$at(2,53434,53449)"} true;
    call $t18 := $1_vector_empty'$42_access_control_comprehensive_TreasuryCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,53434,53449)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t19 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1339:26+7
    assume {:print "$at(2,53477,53484)"} true;
    $t19 := 1000000;
    assume $IsValid'u64'($t19);

    // $t20 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1340:31+5
    assume {:print "$at(2,53517,53522)"} true;
    $t20 := false;
    assume $IsValid'bool'($t20);

    // $t21 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1341:33+1
    assume {:print "$at(2,53557,53558)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t3 := pack 0x42::access_control_comprehensive::SystemState($t17, $t18, $t19, $t20, $t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1336:29+236
    assume {:print "$at(2,53334,53570)"} true;
    $t3 := $42_access_control_comprehensive_SystemState($t17, $t18, $t19, $t20, $t21);

    // trace_local[system_secure]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1336:29+236
    assume {:print "$track_local(3,0,3):", $t3} $t3 == $t3;

    // $t22 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1346:13+18
    assume {:print "$at(2,53713,53731)"} true;
    $t22 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t23 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1347:13+6
    assume {:print "$at(2,53746,53752)"} true;
    $t23 := 291;
    assume $IsValid'address'($t23);

    // $t24 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1348:13+1
    assume {:print "$at(2,53767,53768)"} true;
    $t24 := 1;
    assume $IsValid'u64'($t24);

    // $t25 := 0x999 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1349:13+6
    assume {:print "$at(2,53814,53820)"} true;
    $t25 := 2457;
    assume $IsValid'address'($t25);

    // $t26 := 0x999 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1350:13+6
    assume {:print "$at(2,53848,53854)"} true;
    $t26 := 2457;
    assume $IsValid'address'($t26);

    // $t27 := 255 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1351:13+3
    assume {:print "$at(2,53885,53888)"} true;
    $t27 := 255;
    assume $IsValid'u64'($t27);

    // assert Eq<address>($t25, $t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:273:9+35
    assume {:print "$at(2,11373,11408)"} true;
    assert {:msg "assert_failed(2,11373,11408): precondition does not hold at this call"}
      $IsEqual'address'($t25, $t26);

    // assert Le($t24, $t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:274:9+40
    assume {:print "$at(2,11418,11458)"} true;
    assert {:msg "assert_failed(2,11418,11458): precondition does not hold at this call"}
      ($t24 <= $t27);

    // assert Gt($t24, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:275:9+25
    assume {:print "$at(2,11468,11493)"} true;
    assert {:msg "assert_failed(2,11468,11493): precondition does not hold at this call"}
      ($t24 > 0);

    // assert Neq<address>($t23, 0x0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:276:9+24
    assume {:print "$at(2,11503,11527)"} true;
    assert {:msg "assert_failed(2,11503,11527): precondition does not hold at this call"}
      !$IsEqual'address'($t23, 0);

    // assert Not(select access_control_comprehensive::SystemState.emergency_locked<0x42::access_control_comprehensive::SystemState>($t22)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:277:9+34
    assume {:print "$at(2,11537,11571)"} true;
    assert {:msg "assert_failed(2,11537,11571): precondition does not hold at this call"}
      !$Dereference($t22)->$emergency_locked;

    // assert Lt(select access_control_comprehensive::SystemState.capability_counter<0x42::access_control_comprehensive::SystemState>($t22), 1000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:278:9+48
    assume {:print "$at(2,11581,11629)"} true;
    assert {:msg "assert_failed(2,11581,11629): precondition does not hold at this call"}
      ($Dereference($t22)->$capability_counter < 1000000);

    // $t28 := access_control_comprehensive::create_admin_capability_secure($t22, $t23, $t24, $t25, $t26, $t27) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1345:37+250
    assume {:print "$at(2,53668,53918)"} true;
    call $t28,$t22 := $42_access_control_comprehensive_create_admin_capability_secure($t22, $t23, $t24, $t25, $t26, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,53668,53918)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t22): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t22)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t3)@]($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1345:37+250
    assume {:print "$at(2,53668,53918)"} true;
    $t3 := $Dereference($t22);

    // trace_local[system_secure]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1345:37+250
    assume {:print "$track_local(3,0,3):", $t3} $t3 == $t3;

    // trace_local[legitimate_capability]($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1345:37+250
    assume {:print "$track_local(3,0,4):", $t28} $t28 == $t28;

    // $t29 := 999 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1356:17+3
    assume {:print "$at(2,54045,54048)"} true;
    $t29 := 999;
    assume $IsValid'u64'($t29);

    // $t30 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1357:21+6
    assume {:print "$at(2,54071,54077)"} true;
    $t30 := 291;
    assume $IsValid'address'($t30);

    // $t31 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1358:26+1
    assume {:print "$at(2,54105,54106)"} true;
    $t31 := 1;
    assume $IsValid'u64'($t31);

    // $t32 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1359:25+7
    assume {:print "$at(2,54133,54140)"} true;
    $t32 := 1000000;
    assume $IsValid'u64'($t32);

    // $t33 := opaque begin: option::none<u64>() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1360:25+14
    assume {:print "$at(2,54167,54181)"} true;

    // assume And(WellFormed($t33), Le(Len<u64>(select option::Option.vec($t33)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1360:25+14
    assume ($IsValid'$1_option_Option'u64''($t33) && (LenVec($t33->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t33, option::spec_none<u64>()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1360:25+14
    assume $IsEqual'$1_option_Option'u64''($t33, $1_option_spec_none'u64'());

    // $t33 := opaque end: option::none<u64>() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1360:25+14

    // $t34 := pack 0x42::access_control_comprehensive::AdminCapability($t29, $t30, $t31, $t32, $t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1355:31+183
    assume {:print "$at(2,54010,54193)"} true;
    $t34 := $42_access_control_comprehensive_AdminCapability($t29, $t30, $t31, $t32, $t33);

    // trace_local[fake_capability]($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1355:31+183
    assume {:print "$track_local(3,0,5):", $t34} $t34 == $t34;

    // $t35 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1363:45+16
    assume {:print "$at(2,54242,54258)"} true;
    $t35 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t36 := 50000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1363:80+5
    $t36 := 50000;
    assume $IsValid'u64'($t36);

    // access_control_comprehensive::withdraw_with_capability_vulnerable($t35, $t34, $t36) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1363:9+77
    call $t35 := $42_access_control_comprehensive_withdraw_with_capability_vulnerable($t35, $t34, $t36);
    if ($abort_flag) {
        assume {:print "$at(2,54206,54283)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t35): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t35)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t2)@]($t35) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1363:9+77
    assume {:print "$at(2,54206,54283)"} true;
    $t2 := $Dereference($t35);

    // trace_local[system_vuln]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1363:9+77
    assume {:print "$track_local(3,0,2):", $t2} $t2 == $t2;

    // $t37 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:27+23
    assume {:print "$at(2,54312,54335)"} true;
    $t37 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t38 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:52+11
    $t38 := $t2;

    // $t39 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t38) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:52+23
    $t39 := $t38->$total_funds;

    // $t40 := 950000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:79+6
    $t40 := 950000;
    assume $IsValid'u64'($t40);

    // $t41 := ==($t39, $t40) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:52+33
    $t41 := $IsEqual'u64'($t39, $t40);

    // vector::push_back<bool>($t37, $t41) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:9+77
    call $t37 := $1_vector_push_back'bool'($t37, $t41);
    if ($abort_flag) {
        assume {:print "$at(2,54294,54371)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t37) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:9+77
    $t0 := $Dereference($t37);

    // trace_local[vulnerable_results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1364:9+77
    assume {:print "$track_local(3,0,0):", $t0} $t0 == $t0;

    // $t42 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1367:41+18
    assume {:print "$at(2,54475,54493)"} true;
    $t42 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t43 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1367:85+6
    $t43 := 291;
    assume $IsValid'address'($t43);

    // $t44 := 50000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1367:93+5
    $t44 := 50000;
    assume $IsValid'u64'($t44);

    // $t45 := 1000001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1367:100+7
    $t45 := 1000001;
    assume $IsValid'u64'($t45);

    // access_control_comprehensive::withdraw_with_capability_secure($t42, $t28, $t43, $t44, $t45) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1367:9+99
    call $t42 := $42_access_control_comprehensive_withdraw_with_capability_secure($t42, $t28, $t43, $t44, $t45);
    if ($abort_flag) {
        assume {:print "$at(2,54443,54542)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t42): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t42)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t3)@]($t42) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1367:9+99
    assume {:print "$at(2,54443,54542)"} true;
    $t3 := $Dereference($t42);

    // trace_local[system_secure]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1367:9+99
    assume {:print "$track_local(3,0,3):", $t3} $t3 == $t3;

    // $t46 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:27+19
    assume {:print "$at(2,54571,54590)"} true;
    $t46 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t47 := copy($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:48+13
    $t47 := $t3;

    // $t48 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t47) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:48+25
    $t48 := $t47->$total_funds;

    // $t49 := 950000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:77+6
    $t49 := 950000;
    assume $IsValid'u64'($t49);

    // $t50 := ==($t48, $t49) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:48+35
    $t50 := $IsEqual'u64'($t48, $t49);

    // vector::push_back<bool>($t46, $t50) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:9+75
    call $t46 := $1_vector_push_back'bool'($t46, $t50);
    if ($abort_flag) {
        assume {:print "$at(2,54553,54628)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t46) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:9+75
    $t1 := $Dereference($t46);

    // trace_local[secure_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1368:9+75
    assume {:print "$track_local(3,0,1):", $t1} $t1 == $t1;

    // $t51 := ["0x111", "0x222", "0x333"] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1372:21+6
    assume {:print "$at(2,54750,54756)"} true;
    $t51 := MakeVec3(273, 546, 819);
    assume $IsValid'vec'address''($t51);

    // $t52 := 2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1373:24+1
    assume {:print "$at(2,54806,54807)"} true;
    $t52 := 2;
    assume $IsValid'u64'($t52);

    // $t53 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1376:25+1
    assume {:print "$at(2,54915,54916)"} true;
    $t53 := 1;
    assume $IsValid'u64'($t53);

    // $t54 := 0x456 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1377:25+6
    assume {:print "$at(2,54943,54949)"} true;
    $t54 := 1110;
    assume $IsValid'address'($t54);

    // $t55 := 100000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1378:29+6
    assume {:print "$at(2,54980,54986)"} true;
    $t55 := 100000;
    assume $IsValid'u64'($t55);

    // $t56 := vector::empty<address>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1379:32+15
    assume {:print "$at(2,55020,55035)"} true;
    call $t56 := $1_vector_empty'address'();
    if ($abort_flag) {
        assume {:print "$at(2,55020,55035)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t57 := 0x111 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1380:33+6
    assume {:print "$at(2,55070,55076)"} true;
    $t57 := 273;
    assume $IsValid'address'($t57);

    // $t58 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1381:33+7
    assume {:print "$at(2,55111,55118)"} true;
    $t58 := 1000000;
    assume $IsValid'u64'($t58);

    // $t59 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1382:31+5
    assume {:print "$at(2,55151,55156)"} true;
    $t59 := false;
    assume $IsValid'bool'($t59);

    // $t60 := pack 0x42::access_control_comprehensive::PendingTransaction($t53, $t54, $t55, $t56, $t57, $t58, $t59) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1375:17+307
    assume {:print "$at(2,54869,55176)"} true;
    $t60 := $42_access_control_comprehensive_PendingTransaction($t53, $t54, $t55, $t56, $t57, $t58, $t59);

    // $t61 := vector::empty<0x42::access_control_comprehensive::PendingTransaction>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1374:35+6
    assume {:print "$at(2,54844,54850)"} true;
    call $t61 := $1_vector_empty'$42_access_control_comprehensive_PendingTransaction'();
    if ($abort_flag) {
        assume {:print "$at(2,54844,54850)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t62 := borrow_local($t61) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1374:35+6
    $t62 := $Mutation($Local(61), EmptyVec(), $t61);

    // vector::push_back<0x42::access_control_comprehensive::PendingTransaction>($t62, $t60) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1374:35+6
    call $t62 := $1_vector_push_back'$42_access_control_comprehensive_PendingTransaction'($t62, $t60);
    if ($abort_flag) {
        assume {:print "$at(2,54844,54850)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t61)@]($t62) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1374:35+6
    $t61 := $Dereference($t62);

    // $t63 := vector::empty<0x42::access_control_comprehensive::ExecutedTransaction>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1385:36+15
    assume {:print "$at(2,55229,55244)"} true;
    call $t63 := $1_vector_empty'$42_access_control_comprehensive_ExecutedTransaction'();
    if ($abort_flag) {
        assume {:print "$at(2,55229,55244)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t64 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1386:20+1
    assume {:print "$at(2,55266,55267)"} true;
    $t64 := 1;
    assume $IsValid'u64'($t64);

    // $t6 := pack 0x42::access_control_comprehensive::MultiSigWallet($t51, $t52, $t61, $t63, $t64) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1371:27+567
    assume {:print "$at(2,54712,55279)"} true;
    $t6 := $42_access_control_comprehensive_MultiSigWallet($t51, $t52, $t61, $t63, $t64);

    // trace_local[wallet_vuln]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1371:27+567
    assume {:print "$track_local(3,0,6):", $t6} $t6 == $t6;

    // $t65 := ["0x111", "0x222", "0x333"] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1390:21+6
    assume {:print "$at(2,55350,55356)"} true;
    $t65 := MakeVec3(273, 546, 819);
    assume $IsValid'vec'address''($t65);

    // $t66 := 2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1391:24+1
    assume {:print "$at(2,55406,55407)"} true;
    $t66 := 2;
    assume $IsValid'u64'($t66);

    // $t67 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1394:25+1
    assume {:print "$at(2,55515,55516)"} true;
    $t67 := 1;
    assume $IsValid'u64'($t67);

    // $t68 := 0x456 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1395:25+6
    assume {:print "$at(2,55543,55549)"} true;
    $t68 := 1110;
    assume $IsValid'address'($t68);

    // $t69 := 100000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1396:29+6
    assume {:print "$at(2,55580,55586)"} true;
    $t69 := 100000;
    assume $IsValid'u64'($t69);

    // $t70 := vector::empty<address>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1397:32+15
    assume {:print "$at(2,55620,55635)"} true;
    call $t70 := $1_vector_empty'address'();
    if ($abort_flag) {
        assume {:print "$at(2,55620,55635)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t71 := 0x111 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1398:33+6
    assume {:print "$at(2,55670,55676)"} true;
    $t71 := 273;
    assume $IsValid'address'($t71);

    // $t72 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1399:33+7
    assume {:print "$at(2,55711,55718)"} true;
    $t72 := 1000000;
    assume $IsValid'u64'($t72);

    // $t73 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1400:31+5
    assume {:print "$at(2,55751,55756)"} true;
    $t73 := false;
    assume $IsValid'bool'($t73);

    // $t74 := pack 0x42::access_control_comprehensive::PendingTransaction($t67, $t68, $t69, $t70, $t71, $t72, $t73) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1393:17+307
    assume {:print "$at(2,55469,55776)"} true;
    $t74 := $42_access_control_comprehensive_PendingTransaction($t67, $t68, $t69, $t70, $t71, $t72, $t73);

    // $t75 := vector::empty<0x42::access_control_comprehensive::PendingTransaction>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1392:35+6
    assume {:print "$at(2,55444,55450)"} true;
    call $t75 := $1_vector_empty'$42_access_control_comprehensive_PendingTransaction'();
    if ($abort_flag) {
        assume {:print "$at(2,55444,55450)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t76 := borrow_local($t75) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1392:35+6
    $t76 := $Mutation($Local(75), EmptyVec(), $t75);

    // vector::push_back<0x42::access_control_comprehensive::PendingTransaction>($t76, $t74) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1392:35+6
    call $t76 := $1_vector_push_back'$42_access_control_comprehensive_PendingTransaction'($t76, $t74);
    if ($abort_flag) {
        assume {:print "$at(2,55444,55450)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t75)@]($t76) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1392:35+6
    $t75 := $Dereference($t76);

    // $t77 := vector::empty<0x42::access_control_comprehensive::ExecutedTransaction>() on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1403:36+15
    assume {:print "$at(2,55829,55844)"} true;
    call $t77 := $1_vector_empty'$42_access_control_comprehensive_ExecutedTransaction'();
    if ($abort_flag) {
        assume {:print "$at(2,55829,55844)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t78 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1404:20+1
    assume {:print "$at(2,55866,55867)"} true;
    $t78 := 1;
    assume $IsValid'u64'($t78);

    // $t7 := pack 0x42::access_control_comprehensive::MultiSigWallet($t65, $t66, $t75, $t77, $t78) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1389:29+567
    assume {:print "$at(2,55312,55879)"} true;
    $t7 := $42_access_control_comprehensive_MultiSigWallet($t65, $t66, $t75, $t77, $t78);

    // trace_local[wallet_secure]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1389:29+567
    assume {:print "$track_local(3,0,7):", $t7} $t7 == $t7;

    // $t79 := borrow_local($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1408:40+16
    assume {:print "$at(2,55990,56006)"} true;
    $t79 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t80 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1408:58+1
    $t80 := 1;
    assume $IsValid'u64'($t80);

    // $t81 := 0x111 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1408:61+6
    $t81 := 273;
    assume $IsValid'address'($t81);

    // access_control_comprehensive::approve_transaction_vulnerable($t79, $t80, $t81) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1408:9+59
    call $t79 := $42_access_control_comprehensive_approve_transaction_vulnerable($t79, $t80, $t81);
    if ($abort_flag) {
        assume {:print "$at(2,55959,56018)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t6)@]($t79) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1408:9+59
    $t6 := $Dereference($t79);

    // trace_local[wallet_vuln]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1408:9+59
    assume {:print "$track_local(3,0,6):", $t6} $t6 == $t6;

    // $t82 := borrow_local($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1409:40+16
    assume {:print "$at(2,56060,56076)"} true;
    $t82 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t83 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1409:58+1
    $t83 := 1;
    assume $IsValid'u64'($t83);

    // $t84 := 0x111 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1409:61+6
    $t84 := 273;
    assume $IsValid'address'($t84);

    // access_control_comprehensive::approve_transaction_vulnerable($t82, $t83, $t84) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1409:9+59
    call $t82 := $42_access_control_comprehensive_approve_transaction_vulnerable($t82, $t83, $t84);
    if ($abort_flag) {
        assume {:print "$at(2,56029,56088)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t6)@]($t82) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1409:9+59
    $t6 := $Dereference($t82);

    // trace_local[wallet_vuln]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1409:9+59
    assume {:print "$track_local(3,0,6):", $t6} $t6 == $t6;

    // $t85 := copy($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1410:62+11
    assume {:print "$at(2,56165,56176)"} true;
    $t85 := $t6;

    // $t86 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t85) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1410:61+33
    $t86 := $t85->$pending_transactions;

    // $t87 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1410:96+1
    $t87 := 0;
    assume $IsValid'u64'($t87);

    // $t88 := vector::borrow<0x42::access_control_comprehensive::PendingTransaction>($t86, $t87) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1410:46+52
    call $t88 := $1_vector_borrow'$42_access_control_comprehensive_PendingTransaction'($t86, $t87);
    if ($abort_flag) {
        assume {:print "$at(2,56149,56201)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t89 := get_field<0x42::access_control_comprehensive::PendingTransaction>.approvals($t88) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1410:45+63
    $t89 := $t88->$approvals;

    // $t90 := vector::length<address>($t89) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1410:30+79
    call $t90 := $1_vector_length'address'($t89);
    if ($abort_flag) {
        assume {:print "$at(2,56133,56212)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t91 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:27+23
    assume {:print "$at(2,56241,56264)"} true;
    $t91 := $Mutation($Local(0), EmptyVec(), $t0);

    // trace_local[$t32]($t91) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:52+14
    $temp_0'vec'bool'' := $Dereference($t91);
    assume {:print "$track_local(3,0,8):", $temp_0'vec'bool''} $temp_0'vec'bool'' == $temp_0'vec'bool'';

    // $t92 := 2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:70+1
    $t92 := 2;
    assume $IsValid'u64'($t92);

    // $t93 := >=($t90, $t92) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:52+19
    call $t93 := $Ge($t90, $t92);

    // trace_local[$t8]($t93) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:9+63
    assume {:print "$track_local(3,0,10):", $t93} $t93 == $t93;

    // vector::push_back<bool>($t91, $t93) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:9+63
    call $t91 := $1_vector_push_back'bool'($t91, $t93);
    if ($abort_flag) {
        assume {:print "$at(2,56223,56286)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t91) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:9+63
    $t0 := $Dereference($t91);

    // trace_local[vulnerable_results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1411:9+63
    assume {:print "$track_local(3,0,0):", $t0} $t0 == $t0;

    // $t94 := borrow_local($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1414:36+18
    assume {:print "$at(2,56382,56400)"} true;
    $t94 := $Mutation($Local(7), EmptyVec(), $t7);

    // $t95 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1414:56+1
    $t95 := 1;
    assume $IsValid'u64'($t95);

    // $t96 := 0x111 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1414:59+6
    $t96 := 273;
    assume $IsValid'address'($t96);

    // access_control_comprehensive::approve_transaction_secure($t94, $t95, $t96) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1414:9+57
    call $t94 := $42_access_control_comprehensive_approve_transaction_secure($t94, $t95, $t96);
    if ($abort_flag) {
        assume {:print "$at(2,56355,56412)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t7)@]($t94) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1414:9+57
    $t7 := $Dereference($t94);

    // trace_local[wallet_secure]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1414:9+57
    assume {:print "$track_local(3,0,7):", $t7} $t7 == $t7;

    // $t97 := copy($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1416:64+13
    assume {:print "$at(2,56545,56558)"} true;
    $t97 := $t7;

    // $t98 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t97) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1416:63+35
    $t98 := $t97->$pending_transactions;

    // $t99 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1416:100+1
    $t99 := 0;
    assume $IsValid'u64'($t99);

    // $t100 := vector::borrow<0x42::access_control_comprehensive::PendingTransaction>($t98, $t99) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1416:48+54
    call $t100 := $1_vector_borrow'$42_access_control_comprehensive_PendingTransaction'($t98, $t99);
    if ($abort_flag) {
        assume {:print "$at(2,56529,56583)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t101 := get_field<0x42::access_control_comprehensive::PendingTransaction>.approvals($t100) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1416:47+65
    $t101 := $t100->$approvals;

    // $t102 := vector::length<address>($t101) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1416:32+81
    call $t102 := $1_vector_length'address'($t101);
    if ($abort_flag) {
        assume {:print "$at(2,56513,56594)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // $t103 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:27+19
    assume {:print "$at(2,56623,56642)"} true;
    $t103 := $Mutation($Local(1), EmptyVec(), $t1);

    // trace_local[$t32]($t103) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:48+16
    $temp_0'vec'bool'' := $Dereference($t103);
    assume {:print "$track_local(3,0,8):", $temp_0'vec'bool''} $temp_0'vec'bool'' == $temp_0'vec'bool'';

    // $t104 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:68+1
    $t104 := 1;
    assume $IsValid'u64'($t104);

    // $t105 := ==($t102, $t104) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:48+21
    $t105 := $IsEqual'u64'($t102, $t104);

    // trace_local[$t8]($t105) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:9+61
    assume {:print "$track_local(3,0,10):", $t105} $t105 == $t105;

    // vector::push_back<bool>($t103, $t105) on_abort goto L2 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:9+61
    call $t103 := $1_vector_push_back'bool'($t103, $t105);
    if ($abort_flag) {
        assume {:print "$at(2,56605,56666)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t103) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:9+61
    $t1 := $Dereference($t103);

    // trace_local[secure_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1417:9+61
    assume {:print "$track_local(3,0,1):", $t1} $t1 == $t1;

    // $t106 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1420:13+197
    assume {:print "$at(2,56703,56900)"} true;
    $t106 := $t2;

    // ($t107, $t108, $t109, $t110, $t111) := unpack 0x42::access_control_comprehensive::SystemState($t106) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1420:13+197
    $t107 := $t106->$admin_capabilities;
    $t108 := $t106->$treasury_capabilities;
    $t109 := $t106->$total_funds;
    $t110 := $t106->$emergency_locked;
    $t111 := $t106->$capability_counter;

    // drop($t111) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1420:13+197

    // drop($t110) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1420:13+197

    // drop($t109) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1420:13+197

    // drop($t108) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1420:13+197

    // drop($t107) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1420:13+197

    // $t112 := move($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1428:13+197
    assume {:print "$at(2,56931,57128)"} true;
    $t112 := $t3;

    // ($t113, $t114, $t115, $t116, $t117) := unpack 0x42::access_control_comprehensive::SystemState($t112) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1428:13+197
    $t113 := $t112->$admin_capabilities;
    $t114 := $t112->$treasury_capabilities;
    $t115 := $t112->$total_funds;
    $t116 := $t112->$emergency_locked;
    $t117 := $t112->$capability_counter;

    // drop($t117) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1428:13+197

    // drop($t116) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1428:13+197

    // drop($t115) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1428:13+197

    // drop($t114) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1428:13+197

    // drop($t113) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1428:13+197

    // $t118 := move($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1436:13+177
    assume {:print "$at(2,57161,57338)"} true;
    $t118 := $t6;

    // ($t119, $t120, $t121, $t122, $t123) := unpack 0x42::access_control_comprehensive::MultiSigWallet($t118) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1436:13+177
    $t119 := $t118->$owners;
    $t120 := $t118->$threshold;
    $t121 := $t118->$pending_transactions;
    $t122 := $t118->$executed_transactions;
    $t123 := $t118->$nonce;

    // drop($t123) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1436:13+177

    // drop($t122) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1436:13+177

    // drop($t121) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1436:13+177

    // drop($t120) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1436:13+177

    // drop($t119) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1436:13+177

    // $t124 := move($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1444:13+177
    assume {:print "$at(2,57369,57546)"} true;
    $t124 := $t7;

    // ($t125, $t126, $t127, $t128, $t129) := unpack 0x42::access_control_comprehensive::MultiSigWallet($t124) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1444:13+177
    $t125 := $t124->$owners;
    $t126 := $t124->$threshold;
    $t127 := $t124->$pending_transactions;
    $t128 := $t124->$executed_transactions;
    $t129 := $t124->$nonce;

    // drop($t129) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1444:13+177

    // drop($t128) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1444:13+177

    // drop($t127) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1444:13+177

    // drop($t126) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1444:13+177

    // drop($t125) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1444:13+177

    // $t130 := move($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1452:10+18
    assume {:print "$at(2,57576,57594)"} true;
    $t130 := $t0;

    // $t131 := move($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1452:30+14
    $t131 := $t1;

    // trace_return[0]($t130) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1323:80+4748
    assume {:print "$at(2,52870,57618)"} true;
    assume {:print "$track_return(3,0,0):", $t130} $t130 == $t130;

    // trace_return[1]($t131) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1323:80+4748
    assume {:print "$track_return(3,0,1):", $t131} $t131 == $t131;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1453:5+1
    assume {:print "$at(2,57617,57618)"} true;
L1:

    // return ($t130, $t131) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1453:5+1
    assume {:print "$at(2,57617,57618)"} true;
    $ret0 := $t130;
    $ret1 := $t131;
    return;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1453:5+1
L2:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1453:5+1
    assume {:print "$at(2,57617,57618)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::approve_transaction_secure [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:713:5+1077
procedure {:inline 1} $42_access_control_comprehensive_approve_transaction_secure(_$t0: $Mutation ($42_access_control_comprehensive_MultiSigWallet), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_MultiSigWallet))
{
    // declare local variables
    var $t3: int;
    var $t4: $Mutation ($42_access_control_comprehensive_PendingTransaction);
    var $t5: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t6: int;
    var $t7: int;
    var $t8: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t9: int;
    var $t10: bool;
    var $t11: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction));
    var $t12: $Mutation ($42_access_control_comprehensive_PendingTransaction);
    var $t13: bool;
    var $t14: Vec (int);
    var $t15: bool;
    var $t16: Vec (int);
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: Vec (int);
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: $Mutation (Vec (int));
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t0: $Mutation ($42_access_control_comprehensive_MultiSigWallet);
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_MultiSigWallet': $42_access_control_comprehensive_MultiSigWallet;
    var $temp_0'$42_access_control_comprehensive_PendingTransaction': $42_access_control_comprehensive_PendingTransaction;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:713:5+1
    assume {:print "$at(2,29095,29096)"} true;
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // trace_local[transaction_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:713:5+1
    assume {:print "$track_local(3,3,1):", $t1} $t1 == $t1;

    // trace_local[approver]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:713:5+1
    assume {:print "$track_local(3,3,2):", $t2} $t2 == $t2;

    // $t5 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:719:53+28
    assume {:print "$at(2,29341,29369)"} true;
    $t5 := $Dereference($t0)->$pending_transactions;

    // $t6 := access_control_comprehensive::find_pending_transaction_index($t5, $t1) on_abort goto L14 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:719:22+76
    call $t6 := $42_access_control_comprehensive_find_pending_transaction_index($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,29310,29386)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(3,3):", $t7} $t7 == $t7;
        goto L14;
    }

    // trace_local[tx_idx]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:719:22+76
    assume {:print "$track_local(3,3,3):", $t6} $t6 == $t6;

    // $t8 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:41+28
    assume {:print "$at(2,29429,29457)"} true;
    $t8 := $Dereference($t0)->$pending_transactions;

    // $t9 := vector::length<0x42::access_control_comprehensive::PendingTransaction>($t8) on_abort goto L14 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:26+44
    call $t9 := $1_vector_length'$42_access_control_comprehensive_PendingTransaction'($t8);
    if ($abort_flag) {
        assume {:print "$at(2,29414,29458)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(3,3):", $t7} $t7 == $t7;
        goto L14;
    }

    // $t10 := <($t6, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:17+53
    call $t10 := $Lt($t6, $t9);

    // if ($t10) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:9+6
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:722:37+32
    assume {:print "$at(2,29516,29548)"} true;
L1:

    // $t11 := borrow_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:722:37+32
    assume {:print "$at(2,29516,29548)"} true;
    $t11 := $ChildMutation($t0, 2, $Dereference($t0)->$pending_transactions);

    // $t12 := vector::borrow_mut<0x42::access_control_comprehensive::PendingTransaction>($t11, $t6) on_abort goto L14 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:722:18+60
    call $t12,$t11 := $1_vector_borrow_mut'$42_access_control_comprehensive_PendingTransaction'($t11, $t6);
    if ($abort_flag) {
        assume {:print "$at(2,29497,29557)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(3,3):", $t7} $t7 == $t7;
        goto L14;
    }

    // trace_local[tx]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:722:18+60
    $temp_0'$42_access_control_comprehensive_PendingTransaction' := $Dereference($t12);
    assume {:print "$track_local(3,3,4):", $temp_0'$42_access_control_comprehensive_PendingTransaction'} $temp_0'$42_access_control_comprehensive_PendingTransaction' == $temp_0'$42_access_control_comprehensive_PendingTransaction';

    // $t13 := get_field<0x42::access_control_comprehensive::PendingTransaction>.executed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:18+11
    assume {:print "$at(2,29577,29588)"} true;
    $t13 := $Dereference($t12)->$executed;

    // if ($t13) goto L15 else goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:17+12
    if ($t13) { goto L15; } else { goto L3; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:26+14
    assume {:print "$at(2,29694,29708)"} true;
L3:

    // $t14 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.owners($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:26+14
    assume {:print "$at(2,29694,29708)"} true;
    $t14 := $Dereference($t0)->$owners;

    // $t15 := access_control_comprehensive::is_owner($t14, $t2) on_abort goto L14 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:17+34
    call $t15 := $42_access_control_comprehensive_is_owner($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,29685,29719)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(3,3):", $t7} $t7 == $t7;
        goto L14;
    }

    // if ($t15) goto L5 else goto L16 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6
    if ($t15) { goto L5; } else { goto L16; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:31+13
    assume {:print "$at(2,29821,29834)"} true;
L5:

    // $t16 := get_field<0x42::access_control_comprehensive::PendingTransaction>.approvals($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:31+13
    assume {:print "$at(2,29821,29834)"} true;
    $t16 := $Dereference($t12)->$approvals;

    // $t17 := access_control_comprehensive::has_approved($t16, $t2) on_abort goto L14 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:18+37
    call $t17 := $42_access_control_comprehensive_has_approved($t16, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,29808,29845)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(3,3):", $t7} $t7 == $t7;
        goto L14;
    }

    // if ($t17) goto L17 else goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:17+38
    if ($t17) { goto L17; } else { goto L7; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:17+14
    assume {:print "$at(2,29937,29951)"} true;
L7:

    // $t18 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:34+1
    assume {:print "$at(2,29954,29955)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := >($t1, $t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:17+18
    call $t19 := $Gt($t1, $t18);

    // if ($t19) goto L9 else goto L18 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6
    if ($t19) { goto L9; } else { goto L18; }

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:32+13
    assume {:print "$at(2,30006,30019)"} true;
L9:

    // $t20 := get_field<0x42::access_control_comprehensive::PendingTransaction>.approvals($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:32+13
    assume {:print "$at(2,30006,30019)"} true;
    $t20 := $Dereference($t12)->$approvals;

    // $t21 := vector::length<address>($t20) on_abort goto L14 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:17+29
    call $t21 := $1_vector_length'address'($t20);
    if ($abort_flag) {
        assume {:print "$at(2,29991,30020)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(3,3):", $t7} $t7 == $t7;
        goto L14;
    }

    // $t22 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.threshold($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:49+16
    $t22 := $Dereference($t0)->$threshold;

    // $t23 := <($t21, $t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:17+48
    call $t23 := $Lt($t21, $t22);

    // if ($t23) goto L11 else goto L19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:9+6
    if ($t23) { goto L11; } else { goto L19; }

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:736:27+17
    assume {:print "$at(2,30136,30153)"} true;
L11:

    // $t24 := borrow_field<0x42::access_control_comprehensive::PendingTransaction>.approvals($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:736:27+17
    assume {:print "$at(2,30136,30153)"} true;
    $t24 := $ChildMutation($t12, 3, $Dereference($t12)->$approvals);

    // vector::push_back<address>($t24, $t2) on_abort goto L14 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:736:9+46
    call $t24 := $1_vector_push_back'address'($t24, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,30118,30164)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(3,3):", $t7} $t7 == $t7;
        goto L14;
    }

    // write_back[Reference($t12).approvals (vector<address>)]($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:736:9+46
    $t12 := $UpdateMutation($t12, $Update'$42_access_control_comprehensive_PendingTransaction'_approvals($Dereference($t12), $Dereference($t24)));

    // write_back[Reference($t11)[]]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:736:9+46
    $t11 := $UpdateMutation($t11, UpdateVec($Dereference($t11), ReadVec($t12->p, LenVec($t11->p)), $Dereference($t12)));

    // write_back[Reference($t0).pending_transactions (vector<0x42::access_control_comprehensive::PendingTransaction>)]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:736:9+46
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_MultiSigWallet'_pending_transactions($Dereference($t0), $Dereference($t11)));

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:736:9+46
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:717:7+936
    assume {:print "$at(2,29236,30172)"} true;
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:717:7+936
    goto L13;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:9+6
    assume {:print "$at(2,29983,29989)"} true;
L10:

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:9+6
    assume {:print "$at(2,29983,29989)"} true;
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:9+6

    // $t25 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:67+23
    $t25 := 3012;
    assume $IsValid'u64'($t25);

    // trace_abort($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:9+6
    assume {:print "$at(2,29983,29989)"} true;
    assume {:print "$track_abort(3,3):", $t25} $t25 == $t25;

    // $t7 := move($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:9+6
    $t7 := $t25;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:733:9+6
    goto L14;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6
    assume {:print "$at(2,29929,29935)"} true;
L8:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6
    assume {:print "$at(2,29929,29935)"} true;

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6

    // $t26 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:37+14
    $t26 := 3001;
    assume $IsValid'u64'($t26);

    // trace_abort($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6
    assume {:print "$at(2,29929,29935)"} true;
    assume {:print "$track_abort(3,3):", $t26} $t26 == $t26;

    // $t7 := move($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6
    $t7 := $t26;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:732:9+6
    goto L14;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:9+6
    assume {:print "$at(2,29799,29805)"} true;
L6:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:9+6
    assume {:print "$at(2,29799,29805)"} true;

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:9+6
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:9+6

    // $t27 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:57+23
    $t27 := 3012;
    assume $IsValid'u64'($t27);

    // trace_abort($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:9+6
    assume {:print "$at(2,29799,29805)"} true;
    assume {:print "$track_abort(3,3):", $t27} $t27 == $t27;

    // $t7 := move($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:9+6
    $t7 := $t27;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:729:9+6
    goto L14;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6
    assume {:print "$at(2,29677,29683)"} true;
L4:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6
    assume {:print "$at(2,29677,29683)"} true;

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6

    // $t28 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:53+14
    $t28 := 3001;
    assume $IsValid'u64'($t28);

    // trace_abort($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6
    assume {:print "$at(2,29677,29683)"} true;
    assume {:print "$track_abort(3,3):", $t28} $t28 == $t28;

    // $t7 := move($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6
    $t7 := $t28;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:726:9+6
    goto L14;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:9+6
    assume {:print "$at(2,29568,29574)"} true;
L2:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:9+6
    assume {:print "$at(2,29568,29574)"} true;

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:9+6
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,3,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:9+6

    // $t29 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:31+23
    $t29 := 3012;
    assume $IsValid'u64'($t29);

    // trace_abort($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:9+6
    assume {:print "$at(2,29568,29574)"} true;
    assume {:print "$track_abort(3,3):", $t29} $t29 == $t29;

    // $t7 := move($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:9+6
    $t7 := $t29;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:723:9+6
    goto L14;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:9+6
    assume {:print "$at(2,29397,29403)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:9+6
    assume {:print "$at(2,29397,29403)"} true;

    // $t30 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:72+14
    $t30 := 3001;
    assume $IsValid'u64'($t30);

    // trace_abort($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:9+6
    assume {:print "$at(2,29397,29403)"} true;
    assume {:print "$track_abort(3,3):", $t30} $t30 == $t30;

    // $t7 := move($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:9+6
    $t7 := $t30;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:720:9+6
    goto L14;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L10 at <internal>:1:1+10
    goto L10;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:737:5+1
    assume {:print "$at(2,30171,30172)"} true;
L13:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:737:5+1
    assume {:print "$at(2,30171,30172)"} true;
    $ret0 := $t0;
    return;

    // label L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:737:5+1
L14:

    // abort($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:737:5+1
    assume {:print "$at(2,30171,30172)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // drop($t11) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L2 at <internal>:1:1+10
    goto L2;

    // label L16 at <internal>:1:1+10
L16:

    // drop($t11) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

    // label L17 at <internal>:1:1+10
L17:

    // drop($t11) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L18 at <internal>:1:1+10
L18:

    // drop($t11) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L8 at <internal>:1:1+10
    goto L8;

    // label L19 at <internal>:1:1+10
L19:

    // drop($t11) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L12 at <internal>:1:1+10
    goto L12;

}

// fun access_control_comprehensive::approve_transaction_vulnerable [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:635:5+981
procedure {:inline 1} $42_access_control_comprehensive_approve_transaction_vulnerable(_$t0: $Mutation ($42_access_control_comprehensive_MultiSigWallet), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_MultiSigWallet))
{
    // declare local variables
    var $t3: $Mutation ($42_access_control_comprehensive_PendingTransaction);
    var $t4: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t5: int;
    var $t6: int;
    var $t7: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t8: int;
    var $t9: bool;
    var $t10: $Mutation (Vec ($42_access_control_comprehensive_PendingTransaction));
    var $t11: $Mutation ($42_access_control_comprehensive_PendingTransaction);
    var $t12: bool;
    var $t13: $Mutation (Vec (int));
    var $t14: int;
    var $t15: int;
    var $t0: $Mutation ($42_access_control_comprehensive_MultiSigWallet);
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_MultiSigWallet': $42_access_control_comprehensive_MultiSigWallet;
    var $temp_0'$42_access_control_comprehensive_PendingTransaction': $42_access_control_comprehensive_PendingTransaction;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:635:5+1
    assume {:print "$at(2,25740,25741)"} true;
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,4,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // trace_local[transaction_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:635:5+1
    assume {:print "$track_local(3,4,1):", $t1} $t1 == $t1;

    // trace_local[approver]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:635:5+1
    assume {:print "$track_local(3,4,2):", $t2} $t2 == $t2;

    // $t4 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:640:53+28
    assume {:print "$at(2,25940,25968)"} true;
    $t4 := $Dereference($t0)->$pending_transactions;

    // $t5 := access_control_comprehensive::find_pending_transaction_index($t4, $t1) on_abort goto L6 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:640:22+76
    call $t5 := $42_access_control_comprehensive_find_pending_transaction_index($t4, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,25909,25985)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(3,4):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[transaction_id]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:640:22+76
    assume {:print "$track_local(3,4,1):", $t5} $t5 == $t5;

    // $t7 := get_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:41+28
    assume {:print "$at(2,26028,26056)"} true;
    $t7 := $Dereference($t0)->$pending_transactions;

    // $t8 := vector::length<0x42::access_control_comprehensive::PendingTransaction>($t7) on_abort goto L6 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:26+44
    call $t8 := $1_vector_length'$42_access_control_comprehensive_PendingTransaction'($t7);
    if ($abort_flag) {
        assume {:print "$at(2,26013,26057)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(3,4):", $t6} $t6 == $t6;
        goto L6;
    }

    // $t9 := <($t5, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:17+53
    call $t9 := $Lt($t5, $t8);

    // if ($t9) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:9+6
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:643:37+32
    assume {:print "$at(2,26115,26147)"} true;
L1:

    // $t10 := borrow_field<0x42::access_control_comprehensive::MultiSigWallet>.pending_transactions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:643:37+32
    assume {:print "$at(2,26115,26147)"} true;
    $t10 := $ChildMutation($t0, 2, $Dereference($t0)->$pending_transactions);

    // $t11 := vector::borrow_mut<0x42::access_control_comprehensive::PendingTransaction>($t10, $t5) on_abort goto L6 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:643:18+60
    call $t11,$t10 := $1_vector_borrow_mut'$42_access_control_comprehensive_PendingTransaction'($t10, $t5);
    if ($abort_flag) {
        assume {:print "$at(2,26096,26156)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(3,4):", $t6} $t6 == $t6;
        goto L6;
    }

    // trace_local[tx]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:643:18+60
    $temp_0'$42_access_control_comprehensive_PendingTransaction' := $Dereference($t11);
    assume {:print "$track_local(3,4,3):", $temp_0'$42_access_control_comprehensive_PendingTransaction'} $temp_0'$42_access_control_comprehensive_PendingTransaction' == $temp_0'$42_access_control_comprehensive_PendingTransaction';

    // $t12 := get_field<0x42::access_control_comprehensive::PendingTransaction>.executed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:18+11
    assume {:print "$at(2,26176,26187)"} true;
    $t12 := $Dereference($t11)->$executed;

    // if ($t12) goto L7 else goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:17+12
    if ($t12) { goto L7; } else { goto L3; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:651:27+17
    assume {:print "$at(2,26529,26546)"} true;
L3:

    // $t13 := borrow_field<0x42::access_control_comprehensive::PendingTransaction>.approvals($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:651:27+17
    assume {:print "$at(2,26529,26546)"} true;
    $t13 := $ChildMutation($t11, 3, $Dereference($t11)->$approvals);

    // vector::push_back<address>($t13, $t2) on_abort goto L6 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:651:9+46
    call $t13 := $1_vector_push_back'address'($t13, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,26511,26557)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(3,4):", $t6} $t6 == $t6;
        goto L6;
    }

    // write_back[Reference($t11).approvals (vector<address>)]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:651:9+46
    $t11 := $UpdateMutation($t11, $Update'$42_access_control_comprehensive_PendingTransaction'_approvals($Dereference($t11), $Dereference($t13)));

    // write_back[Reference($t10)[]]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:651:9+46
    $t10 := $UpdateMutation($t10, UpdateVec($Dereference($t10), ReadVec($t11->p, LenVec($t10->p)), $Dereference($t11)));

    // write_back[Reference($t0).pending_transactions (vector<0x42::access_control_comprehensive::PendingTransaction>)]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:651:9+46
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_MultiSigWallet'_pending_transactions($Dereference($t0), $Dereference($t10)));

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:651:9+46
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,4,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:639:7+836
    assume {:print "$at(2,25885,26721)"} true;
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,4,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:639:7+836
    goto L5;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:9+6
    assume {:print "$at(2,26167,26173)"} true;
L2:

    // trace_local[wallet]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:9+6
    assume {:print "$at(2,26167,26173)"} true;
    $temp_0'$42_access_control_comprehensive_MultiSigWallet' := $Dereference($t0);
    assume {:print "$track_local(3,4,0):", $temp_0'$42_access_control_comprehensive_MultiSigWallet'} $temp_0'$42_access_control_comprehensive_MultiSigWallet' == $temp_0'$42_access_control_comprehensive_MultiSigWallet';

    // drop($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:9+6

    // $t14 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:31+23
    $t14 := 3012;
    assume $IsValid'u64'($t14);

    // trace_abort($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:9+6
    assume {:print "$at(2,26167,26173)"} true;
    assume {:print "$track_abort(3,4):", $t14} $t14 == $t14;

    // $t6 := move($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:9+6
    $t6 := $t14;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:644:9+6
    goto L6;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:9+6
    assume {:print "$at(2,25996,26002)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:9+6
    assume {:print "$at(2,25996,26002)"} true;

    // $t15 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:72+14
    $t15 := 3001;
    assume $IsValid'u64'($t15);

    // trace_abort($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:9+6
    assume {:print "$at(2,25996,26002)"} true;
    assume {:print "$track_abort(3,4):", $t15} $t15 == $t15;

    // $t6 := move($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:9+6
    $t6 := $t15;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:641:9+6
    goto L6;

    // label L4 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L4:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L2 at <internal>:1:1+10
    goto L2;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:655:5+1
    assume {:print "$at(2,26720,26721)"} true;
L5:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:655:5+1
    assume {:print "$at(2,26720,26721)"} true;
    $ret0 := $t0;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:655:5+1
L6:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:655:5+1
    assume {:print "$at(2,26720,26721)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L7 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L7:

    // drop($t10) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

}

// fun access_control_comprehensive::assign_role_vulnerable [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:473:5+1275
procedure {:inline 1} $42_access_control_comprehensive_assign_role_vulnerable(_$t0: $Mutation ($42_access_control_comprehensive_RoleManager), _$t1: int, _$t2: int, _$t3: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_RoleManager))
{
    // declare local variables
    var $t4: $42_access_control_comprehensive_UserRole;
    var $t5: bool;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: int;
    var $t9: $42_access_control_comprehensive_UserRole;
    var $t10: $Mutation (Vec ($42_access_control_comprehensive_UserRole));
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: $Mutation (int);
    var $t15: int;
    var $t0: $Mutation ($42_access_control_comprehensive_RoleManager);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$42_access_control_comprehensive_RoleManager': $42_access_control_comprehensive_RoleManager;
    var $temp_0'$42_access_control_comprehensive_UserRole': $42_access_control_comprehensive_UserRole;
    var $temp_0'address': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[manager]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:473:5+1
    assume {:print "$at(2,19082,19083)"} true;
    $temp_0'$42_access_control_comprehensive_RoleManager' := $Dereference($t0);
    assume {:print "$track_local(3,6,0):", $temp_0'$42_access_control_comprehensive_RoleManager'} $temp_0'$42_access_control_comprehensive_RoleManager' == $temp_0'$42_access_control_comprehensive_RoleManager';

    // trace_local[target_user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:473:5+1
    assume {:print "$track_local(3,6,1):", $t1} $t1 == $t1;

    // trace_local[role_level]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:473:5+1
    assume {:print "$track_local(3,6,2):", $t2} $t2 == $t2;

    // trace_local[assigner]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:473:5+1
    assume {:print "$track_local(3,6,3):", $t3} $t3 == $t3;

    // $t5 := get_field<0x42::access_control_comprehensive::RoleManager>.locked($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:18+14
    assume {:print "$at(2,19263,19277)"} true;
    $t5 := $Dereference($t0)->$locked;

    // if ($t5) goto L0 else goto L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:17+15
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:492:19+11
    assume {:print "$at(2,19893,19904)"} true;
L1:

    // $t6 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:495:26+7
    assume {:print "$at(2,20038,20045)"} true;
    $t6 := 1000000;
    assume $IsValid'u64'($t6);

    // $t7 := vector::empty<u8>() on_abort goto L3 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:496:26+15
    assume {:print "$at(2,20073,20088)"} true;
    call $t7 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,20073,20088)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,6):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t9 := pack 0x42::access_control_comprehensive::UserRole($t1, $t2, $t3, $t6, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:491:20+237
    assume {:print "$at(2,19863,20100)"} true;
    $t9 := $42_access_control_comprehensive_UserRole($t1, $t2, $t3, $t6, $t7);

    // trace_local[role]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:491:20+237
    assume {:print "$track_local(3,6,4):", $t9} $t9 == $t9;

    // $t10 := borrow_field<0x42::access_control_comprehensive::RoleManager>.roles($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:501:27+18
    assume {:print "$at(2,20258,20276)"} true;
    $t10 := $ChildMutation($t0, 0, $Dereference($t0)->$roles);

    // vector::push_back<0x42::access_control_comprehensive::UserRole>($t10, $t9) on_abort goto L3 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:501:9+43
    call $t10 := $1_vector_push_back'$42_access_control_comprehensive_UserRole'($t10, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,20240,20283)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,6):", $t8} $t8 == $t8;
        goto L3;
    }

    // write_back[Reference($t0).roles (vector<0x42::access_control_comprehensive::UserRole>)]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:501:9+43
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_RoleManager'_roles($Dereference($t0), $Dereference($t10)));

    // trace_local[manager]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:501:9+43
    $temp_0'$42_access_control_comprehensive_RoleManager' := $Dereference($t0);
    assume {:print "$track_local(3,6,0):", $temp_0'$42_access_control_comprehensive_RoleManager'} $temp_0'$42_access_control_comprehensive_RoleManager' == $temp_0'$42_access_control_comprehensive_RoleManager';

    // $t11 := get_field<0x42::access_control_comprehensive::RoleManager>.role_assignments($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:502:36+24
    assume {:print "$at(2,20321,20345)"} true;
    $t11 := $Dereference($t0)->$role_assignments;

    // $t12 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:502:63+1
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t11, $t12) on_abort goto L3 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:502:36+28
    call $t13 := $AddU64($t11, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,20321,20349)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,6):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t14 := borrow_field<0x42::access_control_comprehensive::RoleManager>.role_assignments($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:502:9+24
    $t14 := $ChildMutation($t0, 2, $Dereference($t0)->$role_assignments);

    // write_ref($t14, $t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:502:9+55
    $t14 := $UpdateMutation($t14, $t13);

    // write_back[Reference($t0).role_assignments (u64)]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:502:9+55
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_RoleManager'_role_assignments($Dereference($t0), $Dereference($t14)));

    // trace_local[manager]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:502:9+55
    $temp_0'$42_access_control_comprehensive_RoleManager' := $Dereference($t0);
    assume {:print "$track_local(3,6,0):", $temp_0'$42_access_control_comprehensive_RoleManager'} $temp_0'$42_access_control_comprehensive_RoleManager' == $temp_0'$42_access_control_comprehensive_RoleManager';

    // trace_local[manager]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:478:7+1114
    assume {:print "$at(2,19243,20357)"} true;
    $temp_0'$42_access_control_comprehensive_RoleManager' := $Dereference($t0);
    assume {:print "$track_local(3,6,0):", $temp_0'$42_access_control_comprehensive_RoleManager'} $temp_0'$42_access_control_comprehensive_RoleManager' == $temp_0'$42_access_control_comprehensive_RoleManager';

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:478:7+1114
    goto L2;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:9+6
    assume {:print "$at(2,19254,19260)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:9+6
    assume {:print "$at(2,19254,19260)"} true;

    // $t15 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:34+23
    $t15 := 3012;
    assume $IsValid'u64'($t15);

    // trace_abort($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:9+6
    assume {:print "$at(2,19254,19260)"} true;
    assume {:print "$track_abort(3,6):", $t15} $t15 == $t15;

    // $t8 := move($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:9+6
    $t8 := $t15;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:479:9+6
    goto L3;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:503:5+1
    assume {:print "$at(2,20356,20357)"} true;
L2:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:503:5+1
    assume {:print "$at(2,20356,20357)"} true;
    $ret0 := $t0;
    return;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:503:5+1
L3:

    // abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:503:5+1
    assume {:print "$at(2,20356,20357)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::check_permission_level_verified [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:73:5+131
procedure {:timeLimit 40} $42_access_control_comprehensive_check_permission_level_verified$verify(_$t0: int, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'bool': bool;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:73:5+1
    assume {:print "$at(2,3279,3280)"} true;
    assume $IsValid'u8'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:73:5+1
    assume $IsValid'u8'($t1);

    // trace_local[user_level]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:73:5+1
    assume {:print "$track_local(3,11,0):", $t0} $t0 == $t0;

    // trace_local[required_level]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:73:5+1
    assume {:print "$track_local(3,11,1):", $t1} $t1 == $t1;

    // $t2 := >=($t0, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:74:9+28
    assume {:print "$at(2,3375,3403)"} true;
    call $t2 := $Ge($t0, $t1);

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:74:9+28
    assume {:print "$track_return(3,11,0):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:75:5+1
    assume {:print "$at(2,3409,3410)"} true;
L1:

    // assert Not(false) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:81:9+16
    assume {:print "$at(2,3657,3673)"} true;
    assert {:msg "assert_failed(2,3657,3673): function does not abort under this condition"}
      !false;

    // assert Eq<bool>($t2, Ge($t0, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:78:9+49
    assume {:print "$at(2,3466,3515)"} true;
    assert {:msg "assert_failed(2,3466,3515): post-condition does not hold"}
      $IsEqual'bool'($t2, ($t0 >= $t1));

    // assert Implies(Ge($t0, $t1), Eq<bool>($t2, true)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:79:9+56
    assume {:print "$at(2,3525,3581)"} true;
    assert {:msg "assert_failed(2,3525,3581): post-condition does not hold"}
      (($t0 >= $t1) ==> $IsEqual'bool'($t2, true));

    // assert Implies(Lt($t0, $t1), Eq<bool>($t2, false)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:80:9+56
    assume {:print "$at(2,3591,3647)"} true;
    assert {:msg "assert_failed(2,3591,3647): post-condition does not hold"}
      (($t0 < $t1) ==> $IsEqual'bool'($t2, false));

    // return $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:80:9+56
    $ret0 := $t2;
    return;

}

// fun access_control_comprehensive::comprehensive_access_control_simulation [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1235:5+3382
procedure {:timeLimit 40} $42_access_control_comprehensive_comprehensive_access_control_simulation$verify() returns ($ret0: Vec (bool), $ret1: Vec (int))
{
    // declare local variables
    var $t0: Vec (bool);
    var $t1: Vec (int);
    var $t2: $42_access_control_comprehensive_SystemState;
    var $t3: $42_access_control_comprehensive_AdminCapability;
    var $t4: int;
    var $t5: int;
    var $t6: $42_access_control_comprehensive_ProtocolWitness;
    var $t7: $42_access_control_comprehensive_ProtocolWitness;
    var $t8: $42_access_control_comprehensive_ProtocolState;
    var $t9: $42_access_control_comprehensive_RoleManager;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t14: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_option_Option'u64';
    var $t23: $42_access_control_comprehensive_AdminCapability;
    var $t24: $42_access_control_comprehensive_SystemState;
    var $t25: int;
    var $t26: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t27: int;
    var $t28: $42_access_control_comprehensive_SystemState;
    var $t29: int;
    var $t30: $Mutation (Vec (bool));
    var $t31: bool;
    var $t32: $Mutation (Vec (int));
    var $t33: $Mutation (Vec (int));
    var $t34: bool;
    var $t35: $42_access_control_comprehensive_ProtocolWitness;
    var $t36: bool;
    var $t37: $42_access_control_comprehensive_ProtocolWitness;
    var $t38: int;
    var $t39: $42_access_control_comprehensive_ProtocolState;
    var $t40: int;
    var $t41: $42_access_control_comprehensive_ProtocolState;
    var $t42: $Mutation (Vec (bool));
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: bool;
    var $t49: int;
    var $t50: int;
    var $t51: int;
    var $t52: int;
    var $t53: int;
    var $t54: int;
    var $t55: int;
    var $t56: Vec (int);
    var $t57: $42_access_control_comprehensive_UserRole;
    var $t58: Vec ($42_access_control_comprehensive_UserRole);
    var $t59: $Mutation (Vec ($42_access_control_comprehensive_UserRole));
    var $t60: int;
    var $t61: int;
    var $t62: bool;
    var $t63: $42_access_control_comprehensive_RoleManager;
    var $t64: Vec ($42_access_control_comprehensive_UserRole);
    var $t65: int;
    var $t66: $Mutation ($42_access_control_comprehensive_RoleManager);
    var $t67: int;
    var $t68: int;
    var $t69: int;
    var $t70: $42_access_control_comprehensive_RoleManager;
    var $t71: Vec ($42_access_control_comprehensive_UserRole);
    var $t72: int;
    var $t73: $Mutation (Vec (bool));
    var $t74: bool;
    var $t75: $Mutation (Vec (int));
    var $t76: $Mutation (Vec (int));
    var $t77: $42_access_control_comprehensive_SystemState;
    var $t78: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t79: Vec ($42_access_control_comprehensive_TreasuryCapability);
    var $t80: int;
    var $t81: bool;
    var $t82: int;
    var $t83: $42_access_control_comprehensive_RoleManager;
    var $t84: Vec ($42_access_control_comprehensive_UserRole);
    var $t85: int;
    var $t86: int;
    var $t87: bool;
    var $t88: Vec (bool);
    var $t89: Vec (int);
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'$42_access_control_comprehensive_ProtocolState': $42_access_control_comprehensive_ProtocolState;
    var $temp_0'$42_access_control_comprehensive_ProtocolWitness': $42_access_control_comprehensive_ProtocolWitness;
    var $temp_0'$42_access_control_comprehensive_RoleManager': $42_access_control_comprehensive_RoleManager;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'u64': int;
    var $temp_0'vec'bool'': Vec (bool);
    var $temp_0'vec'u64'': Vec (int);

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := vector::empty<bool>() on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1236:40+21
    assume {:print "$at(2,49375,49396)"} true;
    call $t0 := $1_vector_empty'bool'();
    if ($abort_flag) {
        assume {:print "$at(2,49375,49396)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // trace_local[vulnerabilities_detected]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1236:40+21
    assume {:print "$track_local(3,12,0):", $t0} $t0 == $t0;

    // $t1 := vector::empty<u64>() on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1237:30+20
    assume {:print "$at(2,49428,49448)"} true;
    call $t1 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(2,49428,49448)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // trace_local[attack_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1237:30+20
    assume {:print "$track_local(3,12,1):", $t1} $t1 == $t1;

    // $t13 := vector::empty<0x42::access_control_comprehensive::AdminCapability>() on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1241:33+15
    assume {:print "$at(2,49580,49595)"} true;
    call $t13 := $1_vector_empty'$42_access_control_comprehensive_AdminCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,49580,49595)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t14 := vector::empty<0x42::access_control_comprehensive::TreasuryCapability>() on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1242:36+15
    assume {:print "$at(2,49633,49648)"} true;
    call $t14 := $1_vector_empty'$42_access_control_comprehensive_TreasuryCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,49633,49648)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t15 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1243:26+7
    assume {:print "$at(2,49676,49683)"} true;
    $t15 := 1000000;
    assume $IsValid'u64'($t15);

    // $t16 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1244:31+5
    assume {:print "$at(2,49716,49721)"} true;
    $t16 := false;
    assume $IsValid'bool'($t16);

    // $t17 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1245:33+1
    assume {:print "$at(2,49756,49757)"} true;
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t2 := pack 0x42::access_control_comprehensive::SystemState($t13, $t14, $t15, $t16, $t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1240:22+236
    assume {:print "$at(2,49533,49769)"} true;
    $t2 := $42_access_control_comprehensive_SystemState($t13, $t14, $t15, $t16, $t17);

    // trace_local[system]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1240:22+236
    assume {:print "$track_local(3,12,2):", $t2} $t2 == $t2;

    // $t18 := 999 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1249:17+3
    assume {:print "$at(2,49839,49842)"} true;
    $t18 := 999;
    assume $IsValid'u64'($t18);

    // $t19 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1250:21+6
    assume {:print "$at(2,49876,49882)"} true;
    $t19 := 291;
    assume $IsValid'address'($t19);

    // $t20 := 255 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1251:26+3
    assume {:print "$at(2,49910,49913)"} true;
    $t20 := 255;
    assume $IsValid'u64'($t20);

    // $t21 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1252:25+7
    assume {:print "$at(2,49960,49967)"} true;
    $t21 := 1000000;
    assume $IsValid'u64'($t21);

    // $t22 := opaque begin: option::none<u64>() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1253:25+14
    assume {:print "$at(2,49994,50008)"} true;

    // assume And(WellFormed($t22), Le(Len<u64>(select option::Option.vec($t22)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1253:25+14
    assume ($IsValid'$1_option_Option'u64''($t22) && (LenVec($t22->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t22, option::spec_none<u64>()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1253:25+14
    assume $IsEqual'$1_option_Option'u64''($t22, $1_option_spec_none'u64'());

    // $t22 := opaque end: option::none<u64>() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1253:25+14

    // $t23 := pack 0x42::access_control_comprehensive::AdminCapability($t18, $t19, $t20, $t21, $t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1248:31+216
    assume {:print "$at(2,49804,50020)"} true;
    $t23 := $42_access_control_comprehensive_AdminCapability($t18, $t19, $t20, $t21, $t22);

    // trace_local[fake_capability]($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1248:31+216
    assume {:print "$track_local(3,12,3):", $t23} $t23 == $t23;

    // $t24 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1256:29+6
    assume {:print "$at(2,50053,50059)"} true;
    $t24 := $t2;

    // $t25 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1256:29+18
    $t25 := $t24->$total_funds;

    // trace_local[$t7]($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1256:29+18
    assume {:print "$track_local(3,12,4):", $t25} $t25 == $t25;

    // $t26 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1257:45+11
    assume {:print "$at(2,50118,50129)"} true;
    $t26 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t27 := 100000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1257:75+6
    $t27 := 100000;
    assume $IsValid'u64'($t27);

    // access_control_comprehensive::withdraw_with_capability_vulnerable($t26, $t23, $t27) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1257:9+73
    call $t26 := $42_access_control_comprehensive_withdraw_with_capability_vulnerable($t26, $t23, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,50082,50155)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t26): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t26)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t2)@]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1257:9+73
    assume {:print "$at(2,50082,50155)"} true;
    $t2 := $Dereference($t26);

    // trace_local[system]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1257:9+73
    assume {:print "$track_local(3,12,2):", $t2} $t2 == $t2;

    // $t28 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1258:27+6
    assume {:print "$at(2,50184,50190)"} true;
    $t28 := $t2;

    // $t29 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1258:27+18
    $t29 := $t28->$total_funds;

    // trace_local[$t9]($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1258:27+18
    assume {:print "$track_local(3,12,5):", $t29} $t29 == $t29;

    // $t30 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1260:27+29
    assume {:print "$at(2,50233,50262)"} true;
    $t30 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t31 := !=($t25, $t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1260:58+28
    $t31 := !$IsEqual'u64'($t25, $t29);

    // vector::push_back<bool>($t30, $t31) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1260:9+78
    call $t30 := $1_vector_push_back'bool'($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(2,50215,50293)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1260:9+78
    $t0 := $Dereference($t30);

    // trace_local[vulnerabilities_detected]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1260:9+78
    assume {:print "$track_local(3,12,0):", $t0} $t0 == $t0;

    // $t32 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1261:27+19
    assume {:print "$at(2,50322,50341)"} true;
    $t32 := $Mutation($Local(1), EmptyVec(), $t1);

    // vector::push_back<u64>($t32, $t25) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1261:9+53
    call $t32 := $1_vector_push_back'u64'($t32, $t25);
    if ($abort_flag) {
        assume {:print "$at(2,50304,50357)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1261:9+53
    $t1 := $Dereference($t32);

    // trace_local[attack_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1261:9+53
    assume {:print "$track_local(3,12,1):", $t1} $t1 == $t1;

    // $t33 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1262:27+19
    assume {:print "$at(2,50386,50405)"} true;
    $t33 := $Mutation($Local(1), EmptyVec(), $t1);

    // vector::push_back<u64>($t33, $t29) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1262:9+51
    call $t33 := $1_vector_push_back'u64'($t33, $t29);
    if ($abort_flag) {
        assume {:print "$at(2,50368,50419)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1262:9+51
    $t1 := $Dereference($t33);

    // trace_local[attack_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1262:9+51
    assume {:print "$track_local(3,12,1):", $t1} $t1 == $t1;

    // $t34 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1265:24+18
    assume {:print "$at(2,50506,50524)"} true;
    $t34 := false;
    assume $IsValid'bool'($t34);

    // $t35 := pack 0x42::access_control_comprehensive::ProtocolWitness($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1265:24+18
    $t35 := $42_access_control_comprehensive_ProtocolWitness($t34);

    // $t36 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1266:24+18
    assume {:print "$at(2,50550,50568)"} true;
    $t36 := false;
    assume $IsValid'bool'($t36);

    // $t37 := pack 0x42::access_control_comprehensive::ProtocolWitness($t36) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1266:24+18
    $t37 := $42_access_control_comprehensive_ProtocolWitness($t36);

    // trace_local[witness2]($t37) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1268:53+8
    assume {:print "$at(2,50672,50680)"} true;
    assume {:print "$track_local(3,12,6):", $t37} $t37 == $t37;

    // $t38 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1268:63+6
    $t38 := 291;
    assume $IsValid'address'($t38);

    // $t39 := access_control_comprehensive::initialize_protocol_vulnerable($t35, $t38) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1268:22+48
    call $t39 := $42_access_control_comprehensive_initialize_protocol_vulnerable($t35, $t38);
    if ($abort_flag) {
        assume {:print "$at(2,50641,50689)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // trace_local[state1]($t39) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1268:22+48
    assume {:print "$track_local(3,12,8):", $t39} $t39 == $t39;

    // $t40 := 0x456 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1269:63+6
    assume {:print "$at(2,50754,50760)"} true;
    $t40 := 1110;
    assume $IsValid'address'($t40);

    // $t41 := access_control_comprehensive::initialize_protocol_vulnerable($t37, $t40) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1269:22+48
    call $t41 := $42_access_control_comprehensive_initialize_protocol_vulnerable($t37, $t40);
    if ($abort_flag) {
        assume {:print "$at(2,50713,50761)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t42 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1271:27+29
    assume {:print "$at(2,50815,50844)"} true;
    $t42 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t43 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1271:58+4
    $t43 := true;
    assume $IsValid'bool'($t43);

    // vector::push_back<bool>($t42, $t43) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1271:9+54
    call $t42 := $1_vector_push_back'bool'($t42, $t43);
    if ($abort_flag) {
        assume {:print "$at(2,50797,50851)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t42) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1271:9+54
    $t0 := $Dereference($t42);

    // trace_local[vulnerabilities_detected]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1271:9+54
    assume {:print "$track_local(3,12,0):", $t0} $t0 == $t0;

    // ($t44, $t45, $t46, $t47) := unpack 0x42::access_control_comprehensive::ProtocolState($t39) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1274:13+83
    assume {:print "$at(2,50930,51013)"} true;
    $t44 := $t39->$initialized;
    $t45 := $t39->$admin;
    $t46 := $t39->$total_supply;
    $t47 := $t39->$capabilities_issued;

    // drop($t47) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1274:13+83

    // drop($t46) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1274:13+83

    // drop($t45) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1274:13+83

    // drop($t44) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1274:13+83

    // ($t48, $t49, $t50, $t51) := unpack 0x42::access_control_comprehensive::ProtocolState($t41) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1275:13+83
    assume {:print "$at(2,51037,51120)"} true;
    $t48 := $t41->$initialized;
    $t49 := $t41->$admin;
    $t50 := $t41->$total_supply;
    $t51 := $t41->$capabilities_issued;

    // drop($t51) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1275:13+83

    // drop($t50) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1275:13+83

    // drop($t49) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1275:13+83

    // drop($t48) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1275:13+83

    // $t52 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1281:27+6
    assume {:print "$at(2,51312,51318)"} true;
    $t52 := 291;
    assume $IsValid'address'($t52);

    // $t53 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1282:33+1
    assume {:print "$at(2,51353,51354)"} true;
    $t53 := 1;
    assume $IsValid'u8'($t53);

    // $t54 := 0x999 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1283:34+6
    assume {:print "$at(2,51406,51412)"} true;
    $t54 := 2457;
    assume $IsValid'address'($t54);

    // $t55 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1284:34+7
    assume {:print "$at(2,51448,51455)"} true;
    $t55 := 1000000;
    assume $IsValid'u64'($t55);

    // $t56 := vector::empty<u8>() on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1285:34+15
    assume {:print "$at(2,51491,51506)"} true;
    call $t56 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,51491,51506)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t57 := pack 0x42::access_control_comprehensive::UserRole($t52, $t53, $t54, $t55, $t56) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1280:17+252
    assume {:print "$at(2,51274,51526)"} true;
    $t57 := $42_access_control_comprehensive_UserRole($t52, $t53, $t54, $t55, $t56);

    // $t58 := vector::empty<0x42::access_control_comprehensive::UserRole>() on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1279:20+6
    assume {:print "$at(2,51249,51255)"} true;
    call $t58 := $1_vector_empty'$42_access_control_comprehensive_UserRole'();
    if ($abort_flag) {
        assume {:print "$at(2,51249,51255)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t59 := borrow_local($t58) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1279:20+6
    $t59 := $Mutation($Local(58), EmptyVec(), $t58);

    // vector::push_back<0x42::access_control_comprehensive::UserRole>($t59, $t57) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1279:20+6
    call $t59 := $1_vector_push_back'$42_access_control_comprehensive_UserRole'($t59, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,51249,51255)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t58)@]($t59) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1279:20+6
    $t58 := $Dereference($t59);

    // $t60 := 0x999 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1288:26+6
    assume {:print "$at(2,51569,51575)"} true;
    $t60 := 2457;
    assume $IsValid'address'($t60);

    // $t61 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1289:31+1
    assume {:print "$at(2,51608,51609)"} true;
    $t61 := 1;
    assume $IsValid'u64'($t61);

    // $t62 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1290:21+5
    assume {:print "$at(2,51632,51637)"} true;
    $t62 := false;
    assume $IsValid'bool'($t62);

    // $t9 := pack 0x42::access_control_comprehensive::RoleManager($t58, $t60, $t61, $t62) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1278:28+434
    assume {:print "$at(2,51215,51649)"} true;
    $t9 := $42_access_control_comprehensive_RoleManager($t58, $t60, $t61, $t62);

    // trace_local[role_manager]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1278:28+434
    assume {:print "$track_local(3,12,9):", $t9} $t9 == $t9;

    // $t63 := copy($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1293:50+12
    assume {:print "$at(2,51703,51715)"} true;
    $t63 := $t9;

    // $t64 := get_field<0x42::access_control_comprehensive::RoleManager>.roles($t63) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1293:49+19
    $t64 := $t63->$roles;

    // $t65 := vector::length<0x42::access_control_comprehensive::UserRole>($t64) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1293:34+35
    call $t65 := $1_vector_length'$42_access_control_comprehensive_UserRole'($t64);
    if ($abort_flag) {
        assume {:print "$at(2,51687,51722)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // trace_local[$t45]($t65) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1293:34+35
    assume {:print "$track_local(3,12,10):", $t65} $t65 == $t65;

    // $t66 := borrow_local($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1295:32+17
    assume {:print "$at(2,51821,51838)"} true;
    $t66 := $Mutation($Local(9), EmptyVec(), $t9);

    // $t67 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1295:51+6
    $t67 := 291;
    assume $IsValid'address'($t67);

    // $t68 := 4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1295:59+1
    $t68 := 4;
    assume $IsValid'u8'($t68);

    // $t69 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1295:62+6
    $t69 := 291;
    assume $IsValid'address'($t69);

    // access_control_comprehensive::assign_role_vulnerable($t66, $t67, $t68, $t69) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1295:9+60
    call $t66 := $42_access_control_comprehensive_assign_role_vulnerable($t66, $t67, $t68, $t69);
    if ($abort_flag) {
        assume {:print "$at(2,51798,51858)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t9)@]($t66) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1295:9+60
    $t9 := $Dereference($t66);

    // trace_local[role_manager]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1295:9+60
    assume {:print "$track_local(3,12,9):", $t9} $t9 == $t9;

    // $t70 := copy($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1296:48+12
    assume {:print "$at(2,51908,51920)"} true;
    $t70 := $t9;

    // $t71 := get_field<0x42::access_control_comprehensive::RoleManager>.roles($t70) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1296:47+19
    $t71 := $t70->$roles;

    // $t72 := vector::length<0x42::access_control_comprehensive::UserRole>($t71) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1296:32+35
    call $t72 := $1_vector_length'$42_access_control_comprehensive_UserRole'($t71);
    if ($abort_flag) {
        assume {:print "$at(2,51892,51927)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // trace_local[$t48]($t72) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1296:32+35
    assume {:print "$track_local(3,12,11):", $t72} $t72 == $t72;

    // $t73 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1298:27+29
    assume {:print "$at(2,51958,51987)"} true;
    $t73 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t74 := >($t72, $t65) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1298:58+37
    call $t74 := $Gt($t72, $t65);

    // vector::push_back<bool>($t73, $t74) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1298:9+87
    call $t73 := $1_vector_push_back'bool'($t73, $t74);
    if ($abort_flag) {
        assume {:print "$at(2,51940,52027)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t73) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1298:9+87
    $t0 := $Dereference($t73);

    // trace_local[vulnerabilities_detected]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1298:9+87
    assume {:print "$track_local(3,12,0):", $t0} $t0 == $t0;

    // $t75 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1299:27+19
    assume {:print "$at(2,52056,52075)"} true;
    $t75 := $Mutation($Local(1), EmptyVec(), $t1);

    // vector::push_back<u64>($t75, $t65) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1299:9+58
    call $t75 := $1_vector_push_back'u64'($t75, $t65);
    if ($abort_flag) {
        assume {:print "$at(2,52038,52096)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t75) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1299:9+58
    $t1 := $Dereference($t75);

    // trace_local[attack_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1299:9+58
    assume {:print "$track_local(3,12,1):", $t1} $t1 == $t1;

    // $t76 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1300:27+19
    assume {:print "$at(2,52125,52144)"} true;
    $t76 := $Mutation($Local(1), EmptyVec(), $t1);

    // vector::push_back<u64>($t76, $t72) on_abort goto L2 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1300:9+56
    call $t76 := $1_vector_push_back'u64'($t76, $t72);
    if ($abort_flag) {
        assume {:print "$at(2,52107,52163)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,12):", $t12} $t12 == $t12;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t76) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1300:9+56
    $t1 := $Dereference($t76);

    // trace_local[attack_results]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1300:9+56
    assume {:print "$track_local(3,12,1):", $t1} $t1 == $t1;

    // $t77 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1303:13+197
    assume {:print "$at(2,52200,52397)"} true;
    $t77 := $t2;

    // ($t78, $t79, $t80, $t81, $t82) := unpack 0x42::access_control_comprehensive::SystemState($t77) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1303:13+197
    $t78 := $t77->$admin_capabilities;
    $t79 := $t77->$treasury_capabilities;
    $t80 := $t77->$total_funds;
    $t81 := $t77->$emergency_locked;
    $t82 := $t77->$capability_counter;

    // drop($t82) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1303:13+197

    // drop($t81) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1303:13+197

    // drop($t80) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1303:13+197

    // drop($t79) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1303:13+197

    // drop($t78) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1303:13+197

    // $t83 := move($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1311:13+133
    assume {:print "$at(2,52423,52556)"} true;
    $t83 := $t9;

    // ($t84, $t85, $t86, $t87) := unpack 0x42::access_control_comprehensive::RoleManager($t83) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1311:13+133
    $t84 := $t83->$roles;
    $t85 := $t83->$super_admin;
    $t86 := $t83->$role_assignments;
    $t87 := $t83->$locked;

    // drop($t87) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1311:13+133

    // drop($t86) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1311:13+133

    // drop($t85) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1311:13+133

    // drop($t84) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1311:13+133

    // $t88 := move($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1318:10+24
    assume {:print "$at(2,52585,52609)"} true;
    $t88 := $t0;

    // $t89 := move($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1318:36+14
    $t89 := $t1;

    // trace_return[0]($t88) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1235:87+3300
    assume {:print "$at(2,49333,52633)"} true;
    assume {:print "$track_return(3,12,0):", $t88} $t88 == $t88;

    // trace_return[1]($t89) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1235:87+3300
    assume {:print "$track_return(3,12,1):", $t89} $t89 == $t89;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1319:5+1
    assume {:print "$at(2,52632,52633)"} true;
L1:

    // return ($t88, $t89) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1319:5+1
    assume {:print "$at(2,52632,52633)"} true;
    $ret0 := $t88;
    $ret1 := $t89;
    return;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1319:5+1
L2:

    // abort($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1319:5+1
    assume {:print "$at(2,52632,52633)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::count_unique_owner_approvals [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:5+567
procedure {:timeLimit 40} $42_access_control_comprehensive_count_unique_owner_approvals$verify(_$t0: Vec (int), _$t1: Vec (int)) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: Vec (int);
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: $Mutation (Vec (int));
    var $t23: int;
    var $t0: Vec (int);
    var $t1: Vec (int);
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:5+1
    assume {:print "$at(2,62226,62227)"} true;
    assume $IsValid'vec'address''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:5+1
    assume $IsValid'vec'address''($t1);

    // trace_local[owners]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:5+1
    assume {:print "$track_local(3,13,0):", $t0} $t0 == $t0;

    // trace_local[approvals]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:5+1
    assume {:print "$track_local(3,13,1):", $t1} $t1 == $t1;

    // $t7 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1582:21+1
    assume {:print "$at(2,62342,62343)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // trace_local[count]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1582:21+1
    assume {:print "$track_local(3,13,2):", $t7} $t7 == $t7;

    // $t3 := vector::empty<address>() on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1583:23+24
    assume {:print "$at(2,62368,62392)"} true;
    call $t3 := $1_vector_empty'address'();
    if ($abort_flag) {
        assume {:print "$at(2,62368,62392)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // trace_local[checked]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1583:23+24
    assume {:print "$track_local(3,13,3):", $t3} $t3 == $t3;

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1585:17+1
    assume {:print "$at(2,62413,62414)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_local[i]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1585:17+1
    assume {:print "$track_local(3,13,4):", $t9} $t9 == $t9;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume {:print "$at(2,62432,62433)"} true;
L7:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume {:print "$at(2,62432,62433)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'u64'($t2);

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'vec'address''($t3);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'u64'($t4);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'bool'($t6);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'address'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t14;

    // assume WellFormed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'vec'address''($t14);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'bool'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'u64'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t19;

    // assume WellFormed($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t21;

    // assume WellFormed($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    havoc $t22;

    // assume WellFormed($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume $IsValid'vec'address''($Dereference($t22));

    // trace_local[count]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume {:print "$info(): enter loop, variable(s) count, checked, i, $t6 havocked and reassigned"} true;
    assume {:print "$track_local(3,13,2):", $t2} $t2 == $t2;

    // trace_local[checked]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume {:print "$track_local(3,13,3):", $t3} $t3 == $t3;

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume {:print "$track_local(3,13,4):", $t4} $t4 == $t4;

    // trace_local[$t6]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume {:print "$track_local(3,13,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+1
    assume !$abort_flag;

    // $t10 := vector::length<address>($t1) on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:20+25
    call $t10 := $1_vector_length'address'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,62436,62461)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // $t11 := <($t4, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:16+29
    call $t11 := $Lt($t4, $t10);

    // if ($t11) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:9+343
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1587:44+9
    assume {:print "$at(2,62509,62518)"} true;
L1:

    // $t12 := vector::borrow<address>($t1, $t4) on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1587:29+28
    assume {:print "$at(2,62494,62522)"} true;
    call $t12 := $1_vector_borrow'address'($t1, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,62494,62522)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // trace_local[approver]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1587:28+29
    assume {:print "$track_local(3,13,5):", $t12} $t12 == $t12;

    // $t13 := vector::contains<address>($t0, $t12) on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:17+35
    assume {:print "$at(2,62541,62576)"} true;
    call $t13 := $1_vector_contains'address'($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,62541,62576)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // if ($t13) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:17+77
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:74+8
L3:

    // $t14 := copy($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:74+8
    assume {:print "$at(2,62598,62606)"} true;
    $t14 := $t3;

    // $t15 := vector::contains<address>($t14, $t12) on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:57+37
    call $t15 := $1_vector_contains'address'($t14, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,62581,62618)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // $t16 := !($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:56+38
    call $t16 := $Not($t15);

    // $t6 := $t16 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:56+38
    $t6 := $t16;

    // trace_local[$t6]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:56+38
    assume {:print "$track_local(3,13,6):", $t16} $t16 == $t16;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:13+195
L8:

    // if ($t6) goto L4 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:13+195
    assume {:print "$at(2,62537,62732)"} true;
    if ($t6) { goto L4; } else { goto L6; }

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1589:25+5
    assume {:print "$at(2,62647,62652)"} true;
L4:

    // $t17 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1589:33+1
    assume {:print "$at(2,62655,62656)"} true;
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := +($t2, $t17) on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1589:25+9
    call $t18 := $AddU64($t2, $t17);
    if ($abort_flag) {
        assume {:print "$at(2,62647,62656)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // trace_local[count]($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1589:17+17
    assume {:print "$track_local(3,13,2):", $t18} $t18 == $t18;

    // $t22 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1590:35+12
    assume {:print "$at(2,62693,62705)"} true;
    $t22 := $Mutation($Local(3), EmptyVec(), $t3);

    // vector::push_back<address>($t22, $t12) on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1590:17+41
    call $t22 := $1_vector_push_back'address'($t22, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,62675,62716)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // write_back[LocalRoot($t3)@]($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1590:17+41
    $t3 := $Dereference($t22);

    // trace_local[checked]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1590:17+41
    assume {:print "$track_local(3,13,3):", $t3} $t3 == $t3;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1592:17+1
    assume {:print "$at(2,62751,62752)"} true;
L6:

    // $t19 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1592:21+1
    assume {:print "$at(2,62755,62756)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := +($t4, $t19) on_abort goto L11 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1592:17+5
    call $t20 := $AddU64($t4, $t19);
    if ($abort_flag) {
        assume {:print "$at(2,62751,62756)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,13):", $t8} $t8 == $t8;
        goto L11;
    }

    // trace_local[i]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1592:13+9
    assume {:print "$track_local(3,13,4):", $t20} $t20 == $t20;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:9+343
    assume {:print "$at(2,62425,62768)"} true;
    goto L9;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:17+77
    assume {:print "$at(2,62541,62618)"} true;
L2:

    // $t21 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:17+77
    assume {:print "$at(2,62541,62618)"} true;
    $t21 := false;
    assume $IsValid'bool'($t21);

    // $t6 := $t21 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:17+77
    $t6 := $t21;

    // trace_local[$t6]($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:17+77
    assume {:print "$track_local(3,13,6):", $t21} $t21 == $t21;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1588:17+77
    goto L8;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:9+343
    assume {:print "$at(2,62425,62768)"} true;
L0:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:98+474
    assume {:print "$at(2,62319,62793)"} true;
    assume {:print "$track_return(3,13,0):", $t2} $t2 == $t2;

    // $t23 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:98+474
    $t23 := $t2;

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1581:98+474
    goto L10;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:9+343
    // Loop invariant checking block for the loop started with header: L7
    assume {:print "$at(2,62425,62768)"} true;
L9:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1586:9+343
    assume {:print "$at(2,62425,62768)"} true;
    assume false;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1596:5+1
    assume {:print "$at(2,62792,62793)"} true;
L10:

    // return $t23 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1596:5+1
    assume {:print "$at(2,62792,62793)"} true;
    $ret0 := $t23;
    return;

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1596:5+1
L11:

    // abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1596:5+1
    assume {:print "$at(2,62792,62793)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::create_admin_capability_secure [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1353
procedure {:inline 1} $42_access_control_comprehensive_create_admin_capability_secure(_$t0: $Mutation ($42_access_control_comprehensive_SystemState), _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ($ret0: $42_access_control_comprehensive_AdminCapability, $ret1: $Mutation ($42_access_control_comprehensive_SystemState))
{
    // declare local variables
    var $t6: $42_access_control_comprehensive_AdminCapability;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: $1_option_Option'u64';
    var $t26: $42_access_control_comprehensive_AdminCapability;
    var $t27: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability));
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t0: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // bytecode translation starts here
    // assume Eq<address>($t3, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:273:9+35
    assume {:print "$at(2,11373,11408)"} true;
    assume $IsEqual'address'($t3, $t4);

    // assume Le($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:274:9+40
    assume {:print "$at(2,11418,11458)"} true;
    assume ($t2 <= $t5);

    // assume Gt($t2, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:275:9+25
    assume {:print "$at(2,11468,11493)"} true;
    assume ($t2 > 0);

    // assume Neq<address>($t1, 0x0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:276:9+24
    assume {:print "$at(2,11503,11527)"} true;
    assume !$IsEqual'address'($t1, 0);

    // assume Not(select access_control_comprehensive::SystemState.emergency_locked<0x42::access_control_comprehensive::SystemState>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:277:9+34
    assume {:print "$at(2,11537,11571)"} true;
    assume !$Dereference($t0)->$emergency_locked;

    // assume Lt(select access_control_comprehensive::SystemState.capability_counter<0x42::access_control_comprehensive::SystemState>($t0), 1000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:278:9+48
    assume {:print "$at(2,11581,11629)"} true;
    assume ($Dereference($t0)->$capability_counter < 1000000);

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$at(2,9965,9966)"} true;
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // trace_local[holder]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,1):", $t1} $t1 == $t1;

    // trace_local[permissions]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,2):", $t2} $t2 == $t2;

    // trace_local[authority]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,3):", $t3} $t3 == $t3;

    // trace_local[system_admin]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,4):", $t4} $t4 == $t4;

    // trace_local[max_permissions]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,5):", $t5} $t5 == $t5;

    // $t7 := ==($t3, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:17+25
    assume {:print "$at(2,10275,10300)"} true;
    $t7 := $IsEqual'address'($t3, $t4);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:17+11
    assume {:print "$at(2,10378,10389)"} true;
L1:

    // $t8 := <=($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:17+30
    assume {:print "$at(2,10378,10408)"} true;
    call $t8 := $Le($t2, $t5);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:17+11
    assume {:print "$at(2,10450,10461)"} true;
L3:

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:31+1
    assume {:print "$at(2,10464,10465)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := >($t2, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:17+15
    call $t10 := $Gt($t2, $t9);

    // if ($t10) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:17+6
    assume {:print "$at(2,10549,10555)"} true;
L5:

    // $t11 := 0x0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:27+4
    assume {:print "$at(2,10559,10563)"} true;
    $t11 := 0;
    assume $IsValid'address'($t11);

    // $t12 := !=($t1, $t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:17+14
    $t12 := !$IsEqual'address'($t1, $t11);

    // if ($t12) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    if ($t12) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:18+23
    assume {:print "$at(2,10654,10677)"} true;
L7:

    // $t13 := get_field<0x42::access_control_comprehensive::SystemState>.emergency_locked($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:18+23
    assume {:print "$at(2,10654,10677)"} true;
    $t13 := $Dereference($t0)->$emergency_locked;

    // if ($t13) goto L8 else goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:17+24
    if ($t13) { goto L8; } else { goto L9; }

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:17+25
    assume {:print "$at(2,10722,10747)"} true;
L9:

    // $t14 := get_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:17+25
    assume {:print "$at(2,10722,10747)"} true;
    $t14 := $Dereference($t0)->$capability_counter;

    // $t15 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:45+10
    $t15 := 1000000;
    assume $IsValid'u64'($t15);

    // $t16 := <($t14, $t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:17+38
    call $t16 := $Lt($t14, $t15);

    // if ($t16) goto L11 else goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    if ($t16) { goto L11; } else { goto L10; }

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:37+25
    assume {:print "$at(2,10874,10899)"} true;
L11:

    // $t17 := get_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:37+25
    assume {:print "$at(2,10874,10899)"} true;
    $t17 := $Dereference($t0)->$capability_counter;

    // $t18 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:65+1
    $t18 := 1;
    assume $IsValid'u64'($t18);

    // $t19 := +($t17, $t18) on_abort goto L13 with $t20 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:37+29
    call $t19 := $AddU64($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(2,10874,10903)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(3,14):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t21 := borrow_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+25
    $t21 := $ChildMutation($t0, 4, $Dereference($t0)->$capability_counter);

    // write_ref($t21, $t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+57
    $t21 := $UpdateMutation($t21, $t19);

    // write_back[Reference($t0).capability_counter (u64)]($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+57
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_SystemState'_capability_counter($Dereference($t0), $Dereference($t21)));

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+57
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // $t22 := get_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:259:17+25
    assume {:print "$at(2,10968,10993)"} true;
    $t22 := $Dereference($t0)->$capability_counter;

    // $t23 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:262:25+7
    assume {:print "$at(2,11067,11074)"} true;
    $t23 := 1000000;
    assume $IsValid'u64'($t23);

    // $t24 := 1086400 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:38+15
    assume {:print "$at(2,11114,11129)"} true;
    $t24 := 1086400;
    assume $IsValid'u64'($t24);

    // $t25 := opaque begin: option::some<u64>($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29

    // assume And(WellFormed($t25), Le(Len<u64>(select option::Option.vec($t25)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29
    assume ($IsValid'$1_option_Option'u64''($t25) && (LenVec($t25->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t25, option::spec_some<u64>($t24)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29
    assume $IsEqual'$1_option_Option'u64''($t25, $1_option_spec_some'u64'($t24));

    // $t25 := opaque end: option::some<u64>($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29

    // $t26 := pack 0x42::access_control_comprehensive::AdminCapability($t22, $t1, $t2, $t23, $t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:258:26+229
    assume {:print "$at(2,10933,11162)"} true;
    $t26 := $42_access_control_comprehensive_AdminCapability($t22, $t1, $t2, $t23, $t25);

    // trace_local[capability]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:258:26+229
    assume {:print "$track_local(3,14,6):", $t26} $t26 == $t26;

    // $t27 := borrow_field<0x42::access_control_comprehensive::SystemState>.admin_capabilities($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:27+30
    assume {:print "$at(2,11245,11275)"} true;
    $t27 := $ChildMutation($t0, 0, $Dereference($t0)->$admin_capabilities);

    // vector::push_back<0x42::access_control_comprehensive::AdminCapability>($t27, $t26) on_abort goto L13 with $t20 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:9+61
    call $t27 := $1_vector_push_back'$42_access_control_comprehensive_AdminCapability'($t27, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,11227,11288)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(3,14):", $t20} $t20 == $t20;
        goto L13;
    }

    // write_back[Reference($t0).admin_capabilities (vector<0x42::access_control_comprehensive::AdminCapability>)]($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:9+61
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_SystemState'_admin_capabilities($Dereference($t0), $Dereference($t27)));

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:9+61
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // trace_return[0]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:240:24+1107
    assume {:print "$at(2,10211,11318)"} true;
    assume {:print "$track_return(3,14,0):", $t26} $t26 == $t26;

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:240:24+1107
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:240:24+1107

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:240:24+1107
    goto L12;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    assume {:print "$at(2,10714,10720)"} true;
L10:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    assume {:print "$at(2,10714,10720)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6

    // $t28 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:57+20
    $t28 := 3002;
    assume $IsValid'u64'($t28);

    // trace_abort($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    assume {:print "$at(2,10714,10720)"} true;
    assume {:print "$track_abort(3,14):", $t28} $t28 == $t28;

    // $t20 := move($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    $t20 := $t28;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    goto L13;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    assume {:print "$at(2,10645,10651)"} true;
L8:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    assume {:print "$at(2,10645,10651)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6

    // $t29 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:43+23
    $t29 := 3012;
    assume $IsValid'u64'($t29);

    // trace_abort($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    assume {:print "$at(2,10645,10651)"} true;
    assume {:print "$track_abort(3,14):", $t29} $t29 == $t29;

    // $t20 := move($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    $t20 := $t29;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    goto L13;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    assume {:print "$at(2,10541,10547)"} true;
L6:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    assume {:print "$at(2,10541,10547)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6

    // $t30 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:33+20
    $t30 := 3002;
    assume $IsValid'u64'($t30);

    // trace_abort($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    assume {:print "$at(2,10541,10547)"} true;
    assume {:print "$track_abort(3,14):", $t30} $t30 == $t30;

    // $t20 := move($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    $t20 := $t30;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    goto L13;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    assume {:print "$at(2,10442,10448)"} true;
L4:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    assume {:print "$at(2,10442,10448)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6

    // $t31 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:34+20
    $t31 := 3002;
    assume $IsValid'u64'($t31);

    // trace_abort($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    assume {:print "$at(2,10442,10448)"} true;
    assume {:print "$track_abort(3,14):", $t31} $t31 == $t31;

    // $t20 := move($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    $t20 := $t31;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    goto L13;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    assume {:print "$at(2,10370,10376)"} true;
L2:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    assume {:print "$at(2,10370,10376)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6

    // $t32 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:49+20
    $t32 := 3002;
    assume $IsValid'u64'($t32);

    // trace_abort($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    assume {:print "$at(2,10370,10376)"} true;
    assume {:print "$track_abort(3,14):", $t32} $t32 == $t32;

    // $t20 := move($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    $t20 := $t32;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    goto L13;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    assume {:print "$at(2,10267,10273)"} true;
L0:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    assume {:print "$at(2,10267,10273)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6

    // $t33 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:44+14
    $t33 := 3001;
    assume $IsValid'u64'($t33);

    // trace_abort($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    assume {:print "$at(2,10267,10273)"} true;
    assume {:print "$track_abort(3,14):", $t33} $t33 == $t33;

    // $t20 := move($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    $t20 := $t33;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    goto L13;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:270:5+1
    assume {:print "$at(2,11317,11318)"} true;
L12:

    // return $t26 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:270:5+1
    assume {:print "$at(2,11317,11318)"} true;
    $ret0 := $t26;
    $ret1 := $t0;
    return;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:270:5+1
L13:

    // abort($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:270:5+1
    assume {:print "$at(2,11317,11318)"} true;
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::create_admin_capability_secure [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1353
procedure {:timeLimit 40} $42_access_control_comprehensive_create_admin_capability_secure$verify(_$t0: $Mutation ($42_access_control_comprehensive_SystemState), _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ($ret0: $42_access_control_comprehensive_AdminCapability, $ret1: $Mutation ($42_access_control_comprehensive_SystemState))
{
    // declare local variables
    var $t6: $42_access_control_comprehensive_AdminCapability;
    var $t7: $42_access_control_comprehensive_SystemState;
    var $t8: bool;
    var $t9: bool;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $Mutation (int);
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: $1_option_Option'u64';
    var $t27: $42_access_control_comprehensive_AdminCapability;
    var $t28: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability));
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t0: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$at(2,9965,9966)"} true;
    assume ($IsValid'$42_access_control_comprehensive_SystemState'($Dereference($t0)) && (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume $IsValid'address'($t3);

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume $IsValid'address'($t4);

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume $IsValid'u64'($t5);

    // assume Eq<address>($t3, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:273:9+35
    assume {:print "$at(2,11373,11408)"} true;
    assume $IsEqual'address'($t3, $t4);

    // assume Le($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:274:9+40
    assume {:print "$at(2,11418,11458)"} true;
    assume ($t2 <= $t5);

    // assume Gt($t2, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:275:9+25
    assume {:print "$at(2,11468,11493)"} true;
    assume ($t2 > 0);

    // assume Neq<address>($t1, 0x0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:276:9+24
    assume {:print "$at(2,11503,11527)"} true;
    assume !$IsEqual'address'($t1, 0);

    // assume Not(select access_control_comprehensive::SystemState.emergency_locked<0x42::access_control_comprehensive::SystemState>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:277:9+34
    assume {:print "$at(2,11537,11571)"} true;
    assume !$Dereference($t0)->$emergency_locked;

    // assume Lt(select access_control_comprehensive::SystemState.capability_counter<0x42::access_control_comprehensive::SystemState>($t0), 1000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:278:9+48
    assume {:print "$at(2,11581,11629)"} true;
    assume ($Dereference($t0)->$capability_counter < 1000000);

    // $t7 := read_ref($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:278:9+48
    $t7 := $Dereference($t0);

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$at(2,9965,9966)"} true;
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // trace_local[holder]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,1):", $t1} $t1 == $t1;

    // trace_local[permissions]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,2):", $t2} $t2 == $t2;

    // trace_local[authority]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,3):", $t3} $t3 == $t3;

    // trace_local[system_admin]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,4):", $t4} $t4 == $t4;

    // trace_local[max_permissions]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:233:5+1
    assume {:print "$track_local(3,14,5):", $t5} $t5 == $t5;

    // $t8 := ==($t3, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:17+25
    assume {:print "$at(2,10275,10300)"} true;
    $t8 := $IsEqual'address'($t3, $t4);

    // if ($t8) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:17+11
    assume {:print "$at(2,10378,10389)"} true;
L1:

    // $t9 := <=($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:17+30
    assume {:print "$at(2,10378,10408)"} true;
    call $t9 := $Le($t2, $t5);

    // if ($t9) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    if ($t9) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:17+11
    assume {:print "$at(2,10450,10461)"} true;
L3:

    // $t10 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:31+1
    assume {:print "$at(2,10464,10465)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := >($t2, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:17+15
    call $t11 := $Gt($t2, $t10);

    // if ($t11) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    if ($t11) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:17+6
    assume {:print "$at(2,10549,10555)"} true;
L5:

    // $t12 := 0x0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:27+4
    assume {:print "$at(2,10559,10563)"} true;
    $t12 := 0;
    assume $IsValid'address'($t12);

    // $t13 := !=($t1, $t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:17+14
    $t13 := !$IsEqual'address'($t1, $t12);

    // if ($t13) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    if ($t13) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:18+23
    assume {:print "$at(2,10654,10677)"} true;
L7:

    // $t14 := get_field<0x42::access_control_comprehensive::SystemState>.emergency_locked($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:18+23
    assume {:print "$at(2,10654,10677)"} true;
    $t14 := $Dereference($t0)->$emergency_locked;

    // if ($t14) goto L8 else goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:17+24
    if ($t14) { goto L8; } else { goto L9; }

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:17+25
    assume {:print "$at(2,10722,10747)"} true;
L9:

    // $t15 := get_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:17+25
    assume {:print "$at(2,10722,10747)"} true;
    $t15 := $Dereference($t0)->$capability_counter;

    // $t16 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:45+10
    $t16 := 1000000;
    assume $IsValid'u64'($t16);

    // $t17 := <($t15, $t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:17+38
    call $t17 := $Lt($t15, $t16);

    // if ($t17) goto L11 else goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    if ($t17) { goto L11; } else { goto L10; }

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:37+25
    assume {:print "$at(2,10874,10899)"} true;
L11:

    // $t18 := get_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:37+25
    assume {:print "$at(2,10874,10899)"} true;
    $t18 := $Dereference($t0)->$capability_counter;

    // $t19 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:65+1
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := +($t18, $t19) on_abort goto L13 with $t21 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:37+29
    call $t20 := $AddU64($t18, $t19);
    if ($abort_flag) {
        assume {:print "$at(2,10874,10903)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(3,14):", $t21} $t21 == $t21;
        goto L13;
    }

    // $t22 := borrow_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+25
    $t22 := $ChildMutation($t0, 4, $Dereference($t0)->$capability_counter);

    // write_ref($t22, $t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+57
    $t22 := $UpdateMutation($t22, $t20);

    // write_back[Reference($t0).capability_counter (u64)]($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+57
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_SystemState'_capability_counter($Dereference($t0), $Dereference($t22)));

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:256:9+57
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // $t23 := get_field<0x42::access_control_comprehensive::SystemState>.capability_counter($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:259:17+25
    assume {:print "$at(2,10968,10993)"} true;
    $t23 := $Dereference($t0)->$capability_counter;

    // $t24 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:262:25+7
    assume {:print "$at(2,11067,11074)"} true;
    $t24 := 1000000;
    assume $IsValid'u64'($t24);

    // $t25 := 1086400 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:38+15
    assume {:print "$at(2,11114,11129)"} true;
    $t25 := 1086400;
    assume $IsValid'u64'($t25);

    // $t26 := opaque begin: option::some<u64>($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29

    // assume And(WellFormed($t26), Le(Len<u64>(select option::Option.vec($t26)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29
    assume ($IsValid'$1_option_Option'u64''($t26) && (LenVec($t26->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t26, option::spec_some<u64>($t25)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29
    assume $IsEqual'$1_option_Option'u64''($t26, $1_option_spec_some'u64'($t25));

    // $t26 := opaque end: option::some<u64>($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:263:25+29

    // $t27 := pack 0x42::access_control_comprehensive::AdminCapability($t23, $t1, $t2, $t24, $t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:258:26+229
    assume {:print "$at(2,10933,11162)"} true;
    $t27 := $42_access_control_comprehensive_AdminCapability($t23, $t1, $t2, $t24, $t26);

    // trace_local[capability]($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:258:26+229
    assume {:print "$track_local(3,14,6):", $t27} $t27 == $t27;

    // $t28 := borrow_field<0x42::access_control_comprehensive::SystemState>.admin_capabilities($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:27+30
    assume {:print "$at(2,11245,11275)"} true;
    $t28 := $ChildMutation($t0, 0, $Dereference($t0)->$admin_capabilities);

    // vector::push_back<0x42::access_control_comprehensive::AdminCapability>($t28, $t27) on_abort goto L13 with $t21 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:9+61
    call $t28 := $1_vector_push_back'$42_access_control_comprehensive_AdminCapability'($t28, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,11227,11288)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(3,14):", $t21} $t21 == $t21;
        goto L13;
    }

    // write_back[Reference($t0).admin_capabilities (vector<0x42::access_control_comprehensive::AdminCapability>)]($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:9+61
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_SystemState'_admin_capabilities($Dereference($t0), $Dereference($t28)));

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:267:9+61
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // trace_return[0]($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:240:24+1107
    assume {:print "$at(2,10211,11318)"} true;
    assume {:print "$track_return(3,14,0):", $t27} $t27 == $t27;

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:240:24+1107
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,14,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:240:24+1107
    assume {:print "$at(2,10211,11318)"} true;
    goto L12;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    assume {:print "$at(2,10714,10720)"} true;
L10:

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    assume {:print "$at(2,10714,10720)"} true;

    // $t29 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:57+20
    $t29 := 3002;
    assume $IsValid'u64'($t29);

    // trace_abort($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    assume {:print "$at(2,10714,10720)"} true;
    assume {:print "$track_abort(3,14):", $t29} $t29 == $t29;

    // $t21 := move($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    $t21 := $t29;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:253:9+6
    goto L13;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    assume {:print "$at(2,10645,10651)"} true;
L8:

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    assume {:print "$at(2,10645,10651)"} true;

    // $t30 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:43+23
    $t30 := 3012;
    assume $IsValid'u64'($t30);

    // trace_abort($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    assume {:print "$at(2,10645,10651)"} true;
    assume {:print "$track_abort(3,14):", $t30} $t30 == $t30;

    // $t21 := move($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    $t21 := $t30;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:252:9+6
    goto L13;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    assume {:print "$at(2,10541,10547)"} true;
L6:

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    assume {:print "$at(2,10541,10547)"} true;

    // $t31 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:33+20
    $t31 := 3002;
    assume $IsValid'u64'($t31);

    // trace_abort($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    assume {:print "$at(2,10541,10547)"} true;
    assume {:print "$track_abort(3,14):", $t31} $t31 == $t31;

    // $t21 := move($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    $t21 := $t31;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:249:9+6
    goto L13;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    assume {:print "$at(2,10442,10448)"} true;
L4:

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    assume {:print "$at(2,10442,10448)"} true;

    // $t32 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:34+20
    $t32 := 3002;
    assume $IsValid'u64'($t32);

    // trace_abort($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    assume {:print "$at(2,10442,10448)"} true;
    assume {:print "$track_abort(3,14):", $t32} $t32 == $t32;

    // $t21 := move($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    $t21 := $t32;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:246:9+6
    goto L13;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    assume {:print "$at(2,10370,10376)"} true;
L2:

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    assume {:print "$at(2,10370,10376)"} true;

    // $t33 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:49+20
    $t33 := 3002;
    assume $IsValid'u64'($t33);

    // trace_abort($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    assume {:print "$at(2,10370,10376)"} true;
    assume {:print "$track_abort(3,14):", $t33} $t33 == $t33;

    // $t21 := move($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    $t21 := $t33;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:245:9+6
    goto L13;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    assume {:print "$at(2,10267,10273)"} true;
L0:

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    assume {:print "$at(2,10267,10273)"} true;

    // $t34 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:44+14
    $t34 := 3001;
    assume $IsValid'u64'($t34);

    // trace_abort($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    assume {:print "$at(2,10267,10273)"} true;
    assume {:print "$track_abort(3,14):", $t34} $t34 == $t34;

    // $t21 := move($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    $t21 := $t34;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:242:9+6
    goto L13;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:270:5+1
    assume {:print "$at(2,11317,11318)"} true;
L12:

    // assert Not(Neq<address>($t3, $t4)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:285:9+56
    assume {:print "$at(2,11895,11951)"} true;
    assert {:msg "assert_failed(2,11895,11951): function does not abort under this condition"}
      !!$IsEqual'address'($t3, $t4);

    // assert Not(Gt($t2, $t5)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:286:9+66
    assume {:print "$at(2,11961,12027)"} true;
    assert {:msg "assert_failed(2,11961,12027): function does not abort under this condition"}
      !($t2 > $t5);

    // assert Not(Eq<u64>($t2, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:287:9+53
    assume {:print "$at(2,12037,12090)"} true;
    assert {:msg "assert_failed(2,12037,12090): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(Eq<address>($t1, 0x0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:288:9+51
    assume {:print "$at(2,12100,12151)"} true;
    assert {:msg "assert_failed(2,12100,12151): function does not abort under this condition"}
      !$IsEqual'address'($t1, 0);

    // assert Not(select access_control_comprehensive::SystemState.emergency_locked<0x42::access_control_comprehensive::SystemState>($t7)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:289:9+63
    assume {:print "$at(2,12161,12224)"} true;
    assert {:msg "assert_failed(2,12161,12224): function does not abort under this condition"}
      !$t7->$emergency_locked;

    // assert Not(Ge(select access_control_comprehensive::SystemState.capability_counter<0x42::access_control_comprehensive::SystemState>($t7), 1000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:290:9+76
    assume {:print "$at(2,12234,12310)"} true;
    assert {:msg "assert_failed(2,12234,12310): function does not abort under this condition"}
      !($t7->$capability_counter >= 1000000);

    // assert Eq<address>(select access_control_comprehensive::AdminCapability.holder<0x42::access_control_comprehensive::AdminCapability>($t27), $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:280:9+32
    assume {:print "$at(2,11641,11673)"} true;
    assert {:msg "assert_failed(2,11641,11673): post-condition does not hold"}
      $IsEqual'address'($t27->$holder, $t1);

    // assert Eq<u64>(select access_control_comprehensive::AdminCapability.permissions<0x42::access_control_comprehensive::AdminCapability>($t27), $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:281:9+42
    assume {:print "$at(2,11683,11725)"} true;
    assert {:msg "assert_failed(2,11683,11725): post-condition does not hold"}
      $IsEqual'u64'($t27->$permissions, $t2);

    // assert Eq<u64>(select access_control_comprehensive::AdminCapability.id<0x42::access_control_comprehensive::AdminCapability>($t27), Add(select access_control_comprehensive::SystemState.capability_counter<0x42::access_control_comprehensive::SystemState>($t7), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:282:9+56
    assume {:print "$at(2,11735,11791)"} true;
    assert {:msg "assert_failed(2,11735,11791): post-condition does not hold"}
      $IsEqual'u64'($t27->$id, ($t7->$capability_counter + 1));

    // assert Eq<num>(Len<0x42::access_control_comprehensive::AdminCapability>(select access_control_comprehensive::SystemState.admin_capabilities<0x42::access_control_comprehensive::SystemState>($t0)), Add(Len<0x42::access_control_comprehensive::AdminCapability>(select access_control_comprehensive::SystemState.admin_capabilities<0x42::access_control_comprehensive::SystemState>($t7)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:283:9+82
    assume {:print "$at(2,11801,11883)"} true;
    assert {:msg "assert_failed(2,11801,11883): post-condition does not hold"}
      $IsEqual'num'(LenVec($Dereference($t0)->$admin_capabilities), (LenVec($t7->$admin_capabilities) + 1));

    // return $t27 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:283:9+82
    $ret0 := $t27;
    $ret1 := $t0;
    return;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:270:5+1
    assume {:print "$at(2,11317,11318)"} true;
L13:

    // assert Or(Or(Or(Or(Or(Neq<address>($t3, $t4), Gt($t2, $t5)), Eq<u64>($t2, 0)), Eq<address>($t1, 0x0)), select access_control_comprehensive::SystemState.emergency_locked<0x42::access_control_comprehensive::SystemState>($t7)), Ge(select access_control_comprehensive::SystemState.capability_counter<0x42::access_control_comprehensive::SystemState>($t7), 1000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:272:5+991
    assume {:print "$at(2,11326,12317)"} true;
    assert {:msg "assert_failed(2,11326,12317): abort not covered by any of the `aborts_if` clauses"}
      (((((!$IsEqual'address'($t3, $t4) || ($t2 > $t5)) || $IsEqual'u64'($t2, 0)) || $IsEqual'address'($t1, 0)) || $t7->$emergency_locked) || ($t7->$capability_counter >= 1000000));

    // assert Or(Or(Or(Or(Or(And(Neq<address>($t3, $t4), Eq(3001, $t21)), And(Gt($t2, $t5), Eq(3002, $t21))), And(Eq<u64>($t2, 0), Eq(3002, $t21))), And(Eq<address>($t1, 0x0), Eq(3002, $t21))), And(select access_control_comprehensive::SystemState.emergency_locked<0x42::access_control_comprehensive::SystemState>($t7), Eq(3012, $t21))), And(Ge(select access_control_comprehensive::SystemState.capability_counter<0x42::access_control_comprehensive::SystemState>($t7), 1000000), Eq(3002, $t21))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:272:5+991
    assert {:msg "assert_failed(2,11326,12317): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$IsEqual'address'($t3, $t4) && $IsEqual'num'(3001, $t21)) || (($t2 > $t5) && $IsEqual'num'(3002, $t21))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(3002, $t21))) || ($IsEqual'address'($t1, 0) && $IsEqual'num'(3002, $t21))) || ($t7->$emergency_locked && $IsEqual'num'(3012, $t21))) || (($t7->$capability_counter >= 1000000) && $IsEqual'num'(3002, $t21)));

    // abort($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:272:5+991
    $abort_code := $t21;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::create_protocol_capability_secure [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:411:5+847
procedure {:timeLimit 40} $42_access_control_comprehensive_create_protocol_capability_secure$verify(_$t0: $42_access_control_comprehensive_ProtocolWitness, _$t1: $Mutation ($42_access_control_comprehensive_ProtocolState), _$t2: int) returns ($ret0: $42_access_control_comprehensive_ProtocolCapability, $ret1: $Mutation ($42_access_control_comprehensive_ProtocolState))
{
    // declare local variables
    var $t3: $42_access_control_comprehensive_ProtocolState;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: $Mutation (int);
    var $t13: bool;
    var $t14: bool;
    var $t15: $42_access_control_comprehensive_ProtocolCapability;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t0: $42_access_control_comprehensive_ProtocolWitness;
    var $t1: $Mutation ($42_access_control_comprehensive_ProtocolState);
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_ProtocolCapability': $42_access_control_comprehensive_ProtocolCapability;
    var $temp_0'$42_access_control_comprehensive_ProtocolState': $42_access_control_comprehensive_ProtocolState;
    var $temp_0'$42_access_control_comprehensive_ProtocolWitness': $42_access_control_comprehensive_ProtocolWitness;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t1->l == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:411:5+1
    assume {:print "$at(2,16840,16841)"} true;
    assume $IsValid'$42_access_control_comprehensive_ProtocolWitness'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:411:5+1
    assume $IsValid'$42_access_control_comprehensive_ProtocolState'($Dereference($t1));

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:411:5+1
    assume $IsValid'address'($t2);

    // assume select access_control_comprehensive::ProtocolState.initialized<0x42::access_control_comprehensive::ProtocolState>($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:437:9+36
    assume {:print "$at(2,17745,17781)"} true;
    assume $Dereference($t1)->$initialized;

    // assume Eq<address>(select access_control_comprehensive::ProtocolState.admin<0x42::access_control_comprehensive::ProtocolState>($t1), $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:438:9+39
    assume {:print "$at(2,17791,17830)"} true;
    assume $IsEqual'address'($Dereference($t1)->$admin, $t2);

    // assume Eq<u64>(select access_control_comprehensive::ProtocolState.capabilities_issued<0x42::access_control_comprehensive::ProtocolState>($t1), 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:439:9+49
    assume {:print "$at(2,17840,17889)"} true;
    assume $IsEqual'u64'($Dereference($t1)->$capabilities_issued, 0);

    // $t3 := read_ref($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:439:9+49
    $t3 := $Dereference($t1);

    // trace_local[witness]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:411:5+1
    assume {:print "$at(2,16840,16841)"} true;
    assume {:print "$track_local(3,16,0):", $t0} $t0 == $t0;

    // trace_local[protocol_state]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:411:5+1
    $temp_0'$42_access_control_comprehensive_ProtocolState' := $Dereference($t1);
    assume {:print "$track_local(3,16,1):", $temp_0'$42_access_control_comprehensive_ProtocolState'} $temp_0'$42_access_control_comprehensive_ProtocolState' == $temp_0'$42_access_control_comprehensive_ProtocolState';

    // trace_local[admin]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:411:5+1
    assume {:print "$track_local(3,16,2):", $t2} $t2 == $t2;

    // $t4 := unpack 0x42::access_control_comprehensive::ProtocolWitness($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:417:13+18
    assume {:print "$at(2,17081,17099)"} true;
    $t4 := $t0->$dummy_field;

    // drop($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:417:13+18

    // $t5 := get_field<0x42::access_control_comprehensive::ProtocolState>.initialized($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:17+26
    assume {:print "$at(2,17181,17207)"} true;
    $t5 := $Dereference($t1)->$initialized;

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:9+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:17+20
    assume {:print "$at(2,17286,17306)"} true;
L1:

    // $t6 := get_field<0x42::access_control_comprehensive::ProtocolState>.admin($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:17+20
    assume {:print "$at(2,17286,17306)"} true;
    $t6 := $Dereference($t1)->$admin;

    // $t7 := ==($t6, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:17+29
    $t7 := $IsEqual'address'($t6, $t2);

    // if ($t7) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:9+6
    if ($t7) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:17+34
    assume {:print "$at(2,17401,17435)"} true;
L3:

    // $t8 := get_field<0x42::access_control_comprehensive::ProtocolState>.capabilities_issued($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:17+34
    assume {:print "$at(2,17401,17435)"} true;
    $t8 := $Dereference($t1)->$capabilities_issued;

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:55+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := ==($t8, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:17+39
    $t10 := $IsEqual'u64'($t8, $t9);

    // if ($t10) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:9+6
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:427:46+1
    assume {:print "$at(2,17534,17535)"} true;
L5:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:427:46+1
    assume {:print "$at(2,17534,17535)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := borrow_field<0x42::access_control_comprehensive::ProtocolState>.capabilities_issued($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:427:9+34
    $t12 := $ChildMutation($t1, 3, $Dereference($t1)->$capabilities_issued);

    // write_ref($t12, $t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:427:9+38
    $t12 := $UpdateMutation($t12, $t11);

    // write_back[Reference($t1).capabilities_issued (u64)]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:427:9+38
    $t1 := $UpdateMutation($t1, $Update'$42_access_control_comprehensive_ProtocolState'_capabilities_issued($Dereference($t1), $Dereference($t12)));

    // trace_local[protocol_state]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:427:9+38
    $temp_0'$42_access_control_comprehensive_ProtocolState' := $Dereference($t1);
    assume {:print "$track_local(3,16,1):", $temp_0'$42_access_control_comprehensive_ProtocolState'} $temp_0'$42_access_control_comprehensive_ProtocolState' == $temp_0'$42_access_control_comprehensive_ProtocolState';

    // $t13 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:430:27+4
    assume {:print "$at(2,17596,17600)"} true;
    $t13 := true;
    assume $IsValid'bool'($t13);

    // $t14 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:432:26+4
    assume {:print "$at(2,17664,17668)"} true;
    $t14 := true;
    assume $IsValid'bool'($t14);

    // $t15 := pack 0x42::access_control_comprehensive::ProtocolCapability($t13, $t2, $t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:429:9+132
    assume {:print "$at(2,17548,17680)"} true;
    $t15 := $42_access_control_comprehensive_ProtocolCapability($t13, $t2, $t14);

    // trace_return[0]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:415:27+670
    assume {:print "$at(2,17017,17687)"} true;
    assume {:print "$track_return(3,16,0):", $t15} $t15 == $t15;

    // trace_local[protocol_state]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:415:27+670
    $temp_0'$42_access_control_comprehensive_ProtocolState' := $Dereference($t1);
    assume {:print "$track_local(3,16,1):", $temp_0'$42_access_control_comprehensive_ProtocolState'} $temp_0'$42_access_control_comprehensive_ProtocolState' == $temp_0'$42_access_control_comprehensive_ProtocolState';

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:415:27+670
    goto L6;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:9+6
    assume {:print "$at(2,17393,17399)"} true;
L4:

    // drop($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:9+6
    assume {:print "$at(2,17393,17399)"} true;

    // $t16 := 3008 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:58+20
    $t16 := 3008;
    assume $IsValid'u64'($t16);

    // trace_abort($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:9+6
    assume {:print "$at(2,17393,17399)"} true;
    assume {:print "$track_abort(3,16):", $t16} $t16 == $t16;

    // $t17 := move($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:9+6
    $t17 := $t16;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:426:9+6
    goto L7;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:9+6
    assume {:print "$at(2,17278,17284)"} true;
L2:

    // drop($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:9+6
    assume {:print "$at(2,17278,17284)"} true;

    // $t18 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:48+14
    $t18 := 3001;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:9+6
    assume {:print "$at(2,17278,17284)"} true;
    assume {:print "$track_abort(3,16):", $t18} $t18 == $t18;

    // $t17 := move($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:9+6
    $t17 := $t18;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:423:9+6
    goto L7;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:9+6
    assume {:print "$at(2,17173,17179)"} true;
L0:

    // drop($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:9+6
    assume {:print "$at(2,17173,17179)"} true;

    // $t19 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:45+14
    $t19 := 3001;
    assume $IsValid'u64'($t19);

    // trace_abort($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:9+6
    assume {:print "$at(2,17173,17179)"} true;
    assume {:print "$track_abort(3,16):", $t19} $t19 == $t19;

    // $t17 := move($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:9+6
    $t17 := $t19;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:420:9+6
    goto L7;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:434:5+1
    assume {:print "$at(2,17686,17687)"} true;
L6:

    // assert Not(Not(select access_control_comprehensive::ProtocolState.initialized<0x42::access_control_comprehensive::ProtocolState>($t3))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:446:9+58
    assume {:print "$at(2,18101,18159)"} true;
    assert {:msg "assert_failed(2,18101,18159): function does not abort under this condition"}
      !!$t3->$initialized;

    // assert Not(Neq<address>(select access_control_comprehensive::ProtocolState.admin<0x42::access_control_comprehensive::ProtocolState>($t3), $t2)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:447:9+60
    assume {:print "$at(2,18169,18229)"} true;
    assert {:msg "assert_failed(2,18169,18229): function does not abort under this condition"}
      !!$IsEqual'address'($t3->$admin, $t2);

    // assert Not(Neq<u64>(select access_control_comprehensive::ProtocolState.capabilities_issued<0x42::access_control_comprehensive::ProtocolState>($t3), 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:448:9+76
    assume {:print "$at(2,18239,18315)"} true;
    assert {:msg "assert_failed(2,18239,18315): function does not abort under this condition"}
      !!$IsEqual'u64'($t3->$capabilities_issued, 0);

    // assert Eq<address>(select access_control_comprehensive::ProtocolCapability.protocol_admin<0x42::access_control_comprehensive::ProtocolCapability>($t15), $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:441:9+39
    assume {:print "$at(2,17901,17940)"} true;
    assert {:msg "assert_failed(2,17901,17940): post-condition does not hold"}
      $IsEqual'address'($t15->$protocol_admin, $t2);

    // assert Eq<bool>(select access_control_comprehensive::ProtocolCapability.initialized<0x42::access_control_comprehensive::ProtocolCapability>($t15), true) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:442:9+35
    assume {:print "$at(2,17950,17985)"} true;
    assert {:msg "assert_failed(2,17950,17985): post-condition does not hold"}
      $IsEqual'bool'($t15->$initialized, true);

    // assert Eq<bool>(select access_control_comprehensive::ProtocolCapability.witness_used<0x42::access_control_comprehensive::ProtocolCapability>($t15), true) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:443:9+36
    assume {:print "$at(2,17995,18031)"} true;
    assert {:msg "assert_failed(2,17995,18031): post-condition does not hold"}
      $IsEqual'bool'($t15->$witness_used, true);

    // assert Eq<u64>(select access_control_comprehensive::ProtocolState.capabilities_issued<0x42::access_control_comprehensive::ProtocolState>($t1), 1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:444:9+48
    assume {:print "$at(2,18041,18089)"} true;
    assert {:msg "assert_failed(2,18041,18089): post-condition does not hold"}
      $IsEqual'u64'($Dereference($t1)->$capabilities_issued, 1);

    // return $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:444:9+48
    $ret0 := $t15;
    $ret1 := $t1;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:434:5+1
    assume {:print "$at(2,17686,17687)"} true;
L7:

    // assert Or(Or(Not(select access_control_comprehensive::ProtocolState.initialized<0x42::access_control_comprehensive::ProtocolState>($t3)), Neq<address>(select access_control_comprehensive::ProtocolState.admin<0x42::access_control_comprehensive::ProtocolState>($t3), $t2)), Neq<u64>(select access_control_comprehensive::ProtocolState.capabilities_issued<0x42::access_control_comprehensive::ProtocolState>($t3), 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:436:5+627
    assume {:print "$at(2,17695,18322)"} true;
    assert {:msg "assert_failed(2,17695,18322): abort not covered by any of the `aborts_if` clauses"}
      ((!$t3->$initialized || !$IsEqual'address'($t3->$admin, $t2)) || !$IsEqual'u64'($t3->$capabilities_issued, 0));

    // assert Or(Or(And(Not(select access_control_comprehensive::ProtocolState.initialized<0x42::access_control_comprehensive::ProtocolState>($t3)), Eq(3001, $t17)), And(Neq<address>(select access_control_comprehensive::ProtocolState.admin<0x42::access_control_comprehensive::ProtocolState>($t3), $t2), Eq(3001, $t17))), And(Neq<u64>(select access_control_comprehensive::ProtocolState.capabilities_issued<0x42::access_control_comprehensive::ProtocolState>($t3), 0), Eq(3008, $t17))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:436:5+627
    assert {:msg "assert_failed(2,17695,18322): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((!$t3->$initialized && $IsEqual'num'(3001, $t17)) || (!$IsEqual'address'($t3->$admin, $t2) && $IsEqual'num'(3001, $t17))) || (!$IsEqual'u64'($t3->$capabilities_issued, 0) && $IsEqual'num'(3008, $t17)));

    // abort($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:436:5+627
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::cross_platform_access_analysis [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1457:5+2788
procedure {:timeLimit 40} $42_access_control_comprehensive_cross_platform_access_analysis$verify() returns ($ret0: Vec (int), $ret1: Vec (bool))
{
    // declare local variables
    var $t0: Vec (int);
    var $t1: Vec (bool);
    var $t2: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t3: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t4: $42_access_control_comprehensive_AdminCapability;
    var $t5: $42_access_control_comprehensive_ResourceOwnership;
    var $t6: $Mutation (Vec (bool));
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_option_Option'u64';
    var $t17: $42_access_control_comprehensive_AdminCapability;
    var $t18: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability));
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_option_Option'u64';
    var $t24: $42_access_control_comprehensive_AdminCapability;
    var $t25: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability));
    var $t26: $Mutation (Vec (int));
    var $t27: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t28: int;
    var $t29: $Mutation (Vec (int));
    var $t30: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t31: int;
    var $t32: $Mutation (Vec (bool));
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: bool;
    var $t39: int;
    var $t40: $42_access_control_comprehensive_Resource;
    var $t41: Vec ($42_access_control_comprehensive_Resource);
    var $t42: $Mutation (Vec ($42_access_control_comprehensive_Resource));
    var $t43: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var $t44: Vec ($42_access_control_comprehensive_AccessGrant);
    var $t45: Vec ($42_access_control_comprehensive_TransferRecord);
    var $t46: $42_access_control_comprehensive_ResourceOwnership;
    var $t47: Vec ($42_access_control_comprehensive_Resource);
    var $t48: int;
    var $t49: $42_access_control_comprehensive_Resource;
    var $t50: int;
    var $t51: $Mutation ($42_access_control_comprehensive_ResourceOwnership);
    var $t52: int;
    var $t53: int;
    var $t54: int;
    var $t55: $42_access_control_comprehensive_ResourceOwnership;
    var $t56: Vec ($42_access_control_comprehensive_Resource);
    var $t57: int;
    var $t58: $42_access_control_comprehensive_Resource;
    var $t59: int;
    var $t60: $Mutation (Vec (bool));
    var $t61: bool;
    var $t62: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t63: int;
    var $t64: int;
    var $t65: bool;
    var $t66: $42_access_control_comprehensive_AdminCapability;
    var $t67: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability));
    var $t68: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t69: int;
    var $t70: int;
    var $t71: bool;
    var $t72: $42_access_control_comprehensive_AdminCapability;
    var $t73: $Mutation (Vec ($42_access_control_comprehensive_AdminCapability));
    var $t74: $42_access_control_comprehensive_ResourceOwnership;
    var $t75: Vec ($42_access_control_comprehensive_Resource);
    var $t76: Vec ($42_access_control_comprehensive_OwnershipRecord);
    var $t77: Vec ($42_access_control_comprehensive_AccessGrant);
    var $t78: Vec ($42_access_control_comprehensive_TransferRecord);
    var $t79: Vec (int);
    var $t80: Vec (bool);
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'$42_access_control_comprehensive_ResourceOwnership': $42_access_control_comprehensive_ResourceOwnership;
    var $temp_0'bool': bool;
    var $temp_0'vec'$42_access_control_comprehensive_AdminCapability'': Vec ($42_access_control_comprehensive_AdminCapability);
    var $temp_0'vec'bool'': Vec (bool);
    var $temp_0'vec'u64'': Vec (int);

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := vector::empty<u64>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1458:23+20
    assume {:print "$at(2,57865,57885)"} true;
    call $t0 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(2,57865,57885)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1458:23+20
    assume {:print "$track_local(3,18,0):", $t0} $t0 == $t0;

    // $t1 := vector::empty<bool>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1459:33+21
    assume {:print "$at(2,57920,57941)"} true;
    call $t1 := $1_vector_empty'bool'();
    if ($abort_flag) {
        assume {:print "$at(2,57920,57941)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // trace_local[patterns_detected]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1459:33+21
    assume {:print "$track_local(3,18,1):", $t1} $t1 == $t1;

    // $t2 := vector::empty<0x42::access_control_comprehensive::AdminCapability>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1462:32+32
    assume {:print "$at(2,58024,58056)"} true;
    call $t2 := $1_vector_empty'$42_access_control_comprehensive_AdminCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,58024,58056)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // trace_local[sui_capabilities]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1462:32+32
    assume {:print "$track_local(3,18,2):", $t2} $t2 == $t2;

    // $t3 := vector::empty<0x42::access_control_comprehensive::AdminCapability>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1463:34+32
    assume {:print "$at(2,58092,58124)"} true;
    call $t3 := $1_vector_empty'$42_access_control_comprehensive_AdminCapability'();
    if ($abort_flag) {
        assume {:print "$at(2,58092,58124)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // trace_local[aptos_capabilities]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1463:34+32
    assume {:print "$track_local(3,18,3):", $t3} $t3 == $t3;

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1467:17+1
    assume {:print "$at(2,58240,58241)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1468:21+6
    assume {:print "$at(2,58264,58270)"} true;
    $t12 := 291;
    assume $IsValid'address'($t12);

    // $t13 := 31 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1469:26+2
    assume {:print "$at(2,58298,58300)"} true;
    $t13 := 31;
    assume $IsValid'u64'($t13);

    // $t14 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1470:25+7
    assume {:print "$at(2,58352,58359)"} true;
    $t14 := 1000000;
    assume $IsValid'u64'($t14);

    // $t15 := 1086400 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1471:38+7
    assume {:print "$at(2,58399,58406)"} true;
    $t15 := 1086400;
    assume $IsValid'u64'($t15);

    // $t16 := opaque begin: option::some<u64>($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1471:25+21

    // assume And(WellFormed($t16), Le(Len<u64>(select option::Option.vec($t16)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1471:25+21
    assume ($IsValid'$1_option_Option'u64''($t16) && (LenVec($t16->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t16, option::spec_some<u64>($t15)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1471:25+21
    assume $IsEqual'$1_option_Option'u64''($t16, $1_option_spec_some'u64'($t15));

    // $t16 := opaque end: option::some<u64>($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1471:25+21

    // $t17 := pack 0x42::access_control_comprehensive::AdminCapability($t11, $t12, $t13, $t14, $t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1466:23+238
    assume {:print "$at(2,58205,58443)"} true;
    $t17 := $42_access_control_comprehensive_AdminCapability($t11, $t12, $t13, $t14, $t16);

    // trace_local[sui_cap]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1466:23+238
    assume {:print "$track_local(3,18,4):", $t17} $t17 == $t17;

    // $t18 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1473:27+21
    assume {:print "$at(2,58472,58493)"} true;
    $t18 := $Mutation($Local(2), EmptyVec(), $t2);

    // vector::push_back<0x42::access_control_comprehensive::AdminCapability>($t18, $t17) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1473:9+49
    call $t18 := $1_vector_push_back'$42_access_control_comprehensive_AdminCapability'($t18, $t17);
    if ($abort_flag) {
        assume {:print "$at(2,58454,58503)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t18: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t18); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t2)@]($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1473:9+49
    assume {:print "$at(2,58454,58503)"} true;
    $t2 := $Dereference($t18);

    // trace_local[sui_capabilities]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1473:9+49
    assume {:print "$track_local(3,18,2):", $t2} $t2 == $t2;

    // $t19 := 2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1477:17+1
    assume {:print "$at(2,58623,58624)"} true;
    $t19 := 2;
    assume $IsValid'u64'($t19);

    // $t20 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1478:21+6
    assume {:print "$at(2,58647,58653)"} true;
    $t20 := 291;
    assume $IsValid'address'($t20);

    // $t21 := 7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1479:26+1
    assume {:print "$at(2,58681,58682)"} true;
    $t21 := 7;
    assume $IsValid'u64'($t21);

    // $t22 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1480:25+7
    assume {:print "$at(2,58736,58743)"} true;
    $t22 := 1000000;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: option::none<u64>() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1481:25+14
    assume {:print "$at(2,58770,58784)"} true;

    // assume And(WellFormed($t23), Le(Len<u64>(select option::Option.vec($t23)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1481:25+14
    assume ($IsValid'$1_option_Option'u64''($t23) && (LenVec($t23->$vec) <= 1));

    // assume Eq<0x1::option::Option<u64>>($t23, option::spec_none<u64>()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1481:25+14
    assume $IsEqual'$1_option_Option'u64''($t23, $1_option_spec_none'u64'());

    // $t23 := opaque end: option::none<u64>() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1481:25+14

    // $t24 := pack 0x42::access_control_comprehensive::AdminCapability($t19, $t20, $t21, $t22, $t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1476:25+237
    assume {:print "$at(2,58588,58825)"} true;
    $t24 := $42_access_control_comprehensive_AdminCapability($t19, $t20, $t21, $t22, $t23);

    // trace_local[sui_cap]($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1476:25+237
    assume {:print "$track_local(3,18,4):", $t24} $t24 == $t24;

    // $t25 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1483:27+23
    assume {:print "$at(2,58854,58877)"} true;
    $t25 := $Mutation($Local(3), EmptyVec(), $t3);

    // vector::push_back<0x42::access_control_comprehensive::AdminCapability>($t25, $t24) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1483:9+53
    call $t25 := $1_vector_push_back'$42_access_control_comprehensive_AdminCapability'($t25, $t24);
    if ($abort_flag) {
        assume {:print "$at(2,58836,58889)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t25: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t25); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t3)@]($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1483:9+53
    assume {:print "$at(2,58836,58889)"} true;
    $t3 := $Dereference($t25);

    // trace_local[aptos_capabilities]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1483:9+53
    assume {:print "$track_local(3,18,3):", $t3} $t3 == $t3;

    // $t26 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1485:27+12
    assume {:print "$at(2,58920,58932)"} true;
    $t26 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t27 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1485:56+17
    $t27 := $t2;

    // $t28 := vector::length<0x42::access_control_comprehensive::AdminCapability>($t27) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1485:41+33
    call $t28 := $1_vector_length'$42_access_control_comprehensive_AdminCapability'($t27);
    if ($abort_flag) {
        assume {:print "$at(2,58934,58967)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // vector::push_back<u64>($t26, $t28) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1485:9+66
    call $t26 := $1_vector_push_back'u64'($t26, $t28);
    if ($abort_flag) {
        assume {:print "$at(2,58902,58968)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // write_back[LocalRoot($t0)@]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1485:9+66
    $t0 := $Dereference($t26);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1485:9+66
    assume {:print "$track_local(3,18,0):", $t0} $t0 == $t0;

    // $t29 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1486:27+12
    assume {:print "$at(2,58997,59009)"} true;
    $t29 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t30 := copy($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1486:56+19
    $t30 := $t3;

    // $t31 := vector::length<0x42::access_control_comprehensive::AdminCapability>($t30) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1486:41+35
    call $t31 := $1_vector_length'$42_access_control_comprehensive_AdminCapability'($t30);
    if ($abort_flag) {
        assume {:print "$at(2,59011,59046)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // vector::push_back<u64>($t29, $t31) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1486:9+68
    call $t29 := $1_vector_push_back'u64'($t29, $t31);
    if ($abort_flag) {
        assume {:print "$at(2,58979,59047)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // write_back[LocalRoot($t0)@]($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1486:9+68
    $t0 := $Dereference($t29);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1486:9+68
    assume {:print "$track_local(3,18,0):", $t0} $t0 == $t0;

    // $t32 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1487:27+22
    assume {:print "$at(2,59076,59098)"} true;
    $t32 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t33 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1487:51+4
    $t33 := true;
    assume $IsValid'bool'($t33);

    // vector::push_back<bool>($t32, $t33) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1487:9+47
    call $t32 := $1_vector_push_back'bool'($t32, $t33);
    if ($abort_flag) {
        assume {:print "$at(2,59058,59105)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // write_back[LocalRoot($t1)@]($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1487:9+47
    $t1 := $Dereference($t32);

    // trace_local[patterns_detected]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1487:9+47
    assume {:print "$track_local(3,18,1):", $t1} $t1 == $t1;

    // $t34 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1493:25+1
    assume {:print "$at(2,59323,59324)"} true;
    $t34 := 1;
    assume $IsValid'u64'($t34);

    // $t35 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1494:28+6
    assume {:print "$at(2,59354,59360)"} true;
    $t35 := 291;
    assume $IsValid'address'($t35);

    // $t36 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1495:36+1
    assume {:print "$at(2,59398,59399)"} true;
    $t36 := 1;
    assume $IsValid'u8'($t36);

    // $t37 := 50000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1496:28+5
    assume {:print "$at(2,59429,59434)"} true;
    $t37 := 50000;
    assume $IsValid'u64'($t37);

    // $t38 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1497:29+5
    assume {:print "$at(2,59465,59470)"} true;
    $t38 := false;
    assume $IsValid'bool'($t38);

    // $t39 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1498:33+7
    assume {:print "$at(2,59505,59512)"} true;
    $t39 := 1000000;
    assume $IsValid'u64'($t39);

    // $t40 := pack 0x42::access_control_comprehensive::Resource($t34, $t35, $t36, $t37, $t38, $t39) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1492:17+245
    assume {:print "$at(2,59287,59532)"} true;
    $t40 := $42_access_control_comprehensive_Resource($t34, $t35, $t36, $t37, $t38, $t39);

    // $t41 := vector::empty<0x42::access_control_comprehensive::Resource>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1491:24+6
    assume {:print "$at(2,59262,59268)"} true;
    call $t41 := $1_vector_empty'$42_access_control_comprehensive_Resource'();
    if ($abort_flag) {
        assume {:print "$at(2,59262,59268)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t42 := borrow_local($t41) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1491:24+6
    $t42 := $Mutation($Local(41), EmptyVec(), $t41);

    // vector::push_back<0x42::access_control_comprehensive::Resource>($t42, $t40) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1491:24+6
    call $t42 := $1_vector_push_back'$42_access_control_comprehensive_Resource'($t42, $t40);
    if ($abort_flag) {
        assume {:print "$at(2,59262,59268)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // write_back[LocalRoot($t41)@]($t42) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1491:24+6
    $t41 := $Dereference($t42);

    // $t43 := vector::empty<0x42::access_control_comprehensive::OwnershipRecord>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1501:32+15
    assume {:print "$at(2,59581,59596)"} true;
    call $t43 := $1_vector_empty'$42_access_control_comprehensive_OwnershipRecord'();
    if ($abort_flag) {
        assume {:print "$at(2,59581,59596)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t44 := vector::empty<0x42::access_control_comprehensive::AccessGrant>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1502:28+15
    assume {:print "$at(2,59626,59641)"} true;
    call $t44 := $1_vector_empty'$42_access_control_comprehensive_AccessGrant'();
    if ($abort_flag) {
        assume {:print "$at(2,59626,59641)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t45 := vector::empty<0x42::access_control_comprehensive::TransferRecord>() on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1503:27+15
    assume {:print "$at(2,59670,59685)"} true;
    call $t45 := $1_vector_empty'$42_access_control_comprehensive_TransferRecord'();
    if ($abort_flag) {
        assume {:print "$at(2,59670,59685)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t5 := pack 0x42::access_control_comprehensive::ResourceOwnership($t41, $t43, $t44, $t45) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1490:25+479
    assume {:print "$at(2,59218,59697)"} true;
    $t5 := $42_access_control_comprehensive_ResourceOwnership($t41, $t43, $t44, $t45);

    // trace_local[ownership]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1490:25+479
    assume {:print "$track_local(3,18,5):", $t5} $t5 == $t5;

    // $t46 := copy($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1506:45+9
    assume {:print "$at(2,59746,59755)"} true;
    $t46 := $t5;

    // $t47 := get_field<0x42::access_control_comprehensive::ResourceOwnership>.resources($t46) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1506:44+20
    $t47 := $t46->$resources;

    // $t48 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1506:66+1
    $t48 := 0;
    assume $IsValid'u64'($t48);

    // $t49 := vector::borrow<0x42::access_control_comprehensive::Resource>($t47, $t48) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1506:29+39
    call $t49 := $1_vector_borrow'$42_access_control_comprehensive_Resource'($t47, $t48);
    if ($abort_flag) {
        assume {:print "$at(2,59730,59769)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t50 := get_field<0x42::access_control_comprehensive::Resource>.owner($t49) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1506:29+45
    $t50 := $t49->$owner;

    // $t51 := borrow_local($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1507:38+14
    assume {:print "$at(2,59815,59829)"} true;
    $t51 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t52 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1507:54+1
    $t52 := 1;
    assume $IsValid'u64'($t52);

    // $t53 := 0x456 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1507:57+6
    $t53 := 1110;
    assume $IsValid'address'($t53);

    // $t54 := 0x789 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1507:65+6
    $t54 := 1929;
    assume $IsValid'address'($t54);

    // access_control_comprehensive::transfer_resource_vulnerable($t51, $t52, $t53, $t54) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1507:9+63
    call $t51 := $42_access_control_comprehensive_transfer_resource_vulnerable($t51, $t52, $t53, $t54);
    if ($abort_flag) {
        assume {:print "$at(2,59786,59849)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::OwnershipRecord: select access_control_comprehensive::ResourceOwnership.ownership_records($t51): Le(Len<address>(select option::Option.vec(select access_control_comprehensive::OwnershipRecord.previous_owner($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t51)->$ownership_records; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$previous_owner->$vec) <= 1)))));

    // assert forall $elem: 0x42::access_control_comprehensive::AccessGrant: select access_control_comprehensive::ResourceOwnership.access_grants($t51): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t51)->$access_grants; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t5)@]($t51) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1507:9+63
    assume {:print "$at(2,59786,59849)"} true;
    $t5 := $Dereference($t51);

    // trace_local[ownership]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1507:9+63
    assume {:print "$track_local(3,18,5):", $t5} $t5 == $t5;

    // $t55 := copy($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1508:43+9
    assume {:print "$at(2,59919,59928)"} true;
    $t55 := $t5;

    // $t56 := get_field<0x42::access_control_comprehensive::ResourceOwnership>.resources($t55) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1508:42+20
    $t56 := $t55->$resources;

    // $t57 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1508:64+1
    $t57 := 0;
    assume $IsValid'u64'($t57);

    // $t58 := vector::borrow<0x42::access_control_comprehensive::Resource>($t56, $t57) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1508:27+39
    call $t58 := $1_vector_borrow'$42_access_control_comprehensive_Resource'($t56, $t57);
    if ($abort_flag) {
        assume {:print "$at(2,59903,59942)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t59 := get_field<0x42::access_control_comprehensive::Resource>.owner($t58) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1508:27+45
    $t59 := $t58->$owner;

    // $t60 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1510:27+22
    assume {:print "$at(2,59979,60001)"} true;
    $t60 := $Mutation($Local(1), EmptyVec(), $t1);

    // trace_local[$t27]($t60) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1510:51+13
    $temp_0'vec'bool'' := $Dereference($t60);
    assume {:print "$track_local(3,18,6):", $temp_0'vec'bool''} $temp_0'vec'bool'' == $temp_0'vec'bool'';

    // $t61 := !=($t50, $t59) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1510:51+28
    $t61 := !$IsEqual'address'($t50, $t59);

    // trace_local[$t28]($t61) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1510:9+71
    assume {:print "$track_local(3,18,9):", $t61} $t61 == $t61;

    // vector::push_back<bool>($t60, $t61) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1510:9+71
    call $t60 := $1_vector_push_back'bool'($t60, $t61);
    if ($abort_flag) {
        assume {:print "$at(2,59961,60032)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // write_back[LocalRoot($t1)@]($t60) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1510:9+71
    $t1 := $Dereference($t60);

    // trace_local[patterns_detected]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1510:9+71
    assume {:print "$track_local(3,18,1):", $t1} $t1 == $t1;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume {:print "$at(2,60087,60104)"} true;
L3:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume {:print "$at(2,60087,60104)"} true;
    havoc $t2;

    // assume And(WellFormed($t2), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t2: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t2) && (var $range_0 := $t2; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t62 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    havoc $t62;

    // assume And(WellFormed($t62), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t62: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t62) && (var $range_0 := $t62; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t63 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    havoc $t63;

    // assume WellFormed($t63) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume $IsValid'u64'($t63);

    // $t64 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    havoc $t64;

    // assume WellFormed($t64) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume $IsValid'u64'($t64);

    // $t65 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    havoc $t65;

    // assume WellFormed($t65) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume $IsValid'bool'($t65);

    // $t66 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    havoc $t66;

    // assume And(WellFormed($t66), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($t66))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume ($IsValid'$42_access_control_comprehensive_AdminCapability'($t66) && (LenVec($t66->$expires_at->$vec) <= 1));

    // $t67 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    havoc $t67;

    // assume And(WellFormed($t67), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t67: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($Dereference($t67)) && (var $range_0 := $Dereference($t67); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // trace_local[sui_capabilities]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume {:print "$info(): enter loop, variable(s) sui_capabilities havocked and reassigned"} true;
    assume {:print "$track_local(3,18,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    assume !$abort_flag;

    // $t62 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:31+17
    $t62 := $t2;

    // $t63 := vector::length<0x42::access_control_comprehensive::AdminCapability>($t62) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:16+33
    call $t63 := $1_vector_length'$42_access_control_comprehensive_AdminCapability'($t62);
    if ($abort_flag) {
        assume {:print "$at(2,60072,60105)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t64 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:52+1
    $t64 := 0;
    assume $IsValid'u64'($t64);

    // $t65 := >($t63, $t64) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:16+37
    call $t65 := $Gt($t63, $t64);

    // if ($t65) goto L0 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:9+123
    if ($t65) { goto L0; } else { goto L2; }

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1514:41+21
    assume {:print "$at(2,60154,60175)"} true;
L0:

    // $t67 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1514:41+21
    assume {:print "$at(2,60154,60175)"} true;
    $t67 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t66 := vector::pop_back<0x42::access_control_comprehensive::AdminCapability>($t67) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1514:24+39
    call $t66,$t67 := $1_vector_pop_back'$42_access_control_comprehensive_AdminCapability'($t67);
    if ($abort_flag) {
        assume {:print "$at(2,60137,60176)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t67: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t67); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t2)@]($t67) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1514:24+39
    assume {:print "$at(2,60137,60176)"} true;
    $t2 := $Dereference($t67);

    // trace_local[sui_capabilities]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1514:24+39
    assume {:print "$track_local(3,18,2):", $t2} $t2 == $t2;

    // drop($t66) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1514:24+39

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1513:9+123
    assume {:print "$at(2,60065,60188)"} true;
    goto L7;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume {:print "$at(2,60221,60240)"} true;
L2:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume {:print "$at(2,60221,60240)"} true;
    havoc $t3;

    // assume And(WellFormed($t3), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t3: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t3) && (var $range_0 := $t3; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t68 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    havoc $t68;

    // assume And(WellFormed($t68), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t68: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t68) && (var $range_0 := $t68; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t69 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    havoc $t69;

    // assume WellFormed($t69) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume $IsValid'u64'($t69);

    // $t70 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    havoc $t70;

    // assume WellFormed($t70) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume $IsValid'u64'($t70);

    // $t71 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    havoc $t71;

    // assume WellFormed($t71) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume $IsValid'bool'($t71);

    // $t72 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    havoc $t72;

    // assume And(WellFormed($t72), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($t72))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume ($IsValid'$42_access_control_comprehensive_AdminCapability'($t72) && (LenVec($t72->$expires_at->$vec) <= 1));

    // $t73 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    havoc $t73;

    // assume And(WellFormed($t73), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t73: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($Dereference($t73)) && (var $range_0 := $Dereference($t73); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // trace_local[aptos_capabilities]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume {:print "$info(): enter loop, variable(s) aptos_capabilities havocked and reassigned"} true;
    assume {:print "$track_local(3,18,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    assume !$abort_flag;

    // $t68 := copy($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:31+19
    $t68 := $t3;

    // $t69 := vector::length<0x42::access_control_comprehensive::AdminCapability>($t68) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:16+35
    call $t69 := $1_vector_length'$42_access_control_comprehensive_AdminCapability'($t68);
    if ($abort_flag) {
        assume {:print "$at(2,60206,60241)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // $t70 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:54+1
    $t70 := 0;
    assume $IsValid'u64'($t70);

    // $t71 := >($t69, $t70) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:16+39
    call $t71 := $Gt($t69, $t70);

    // if ($t71) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:9+127
    if ($t71) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1517:41+23
    assume {:print "$at(2,60290,60313)"} true;
L5:

    // $t73 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1517:41+23
    assume {:print "$at(2,60290,60313)"} true;
    $t73 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t72 := vector::pop_back<0x42::access_control_comprehensive::AdminCapability>($t73) on_abort goto L9 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1517:24+41
    call $t72,$t73 := $1_vector_pop_back'$42_access_control_comprehensive_AdminCapability'($t73);
    if ($abort_flag) {
        assume {:print "$at(2,60273,60314)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,18):", $t10} $t10 == $t10;
        goto L9;
    }

    // assert forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t73: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t73); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // write_back[LocalRoot($t3)@]($t73) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1517:24+41
    assume {:print "$at(2,60273,60314)"} true;
    $t3 := $Dereference($t73);

    // trace_local[aptos_capabilities]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1517:24+41
    assume {:print "$track_local(3,18,3):", $t3} $t3 == $t3;

    // drop($t72) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1517:24+41

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1516:9+127
    assume {:print "$at(2,60199,60326)"} true;
    goto L6;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152
    assume {:print "$at(2,60343,60495)"} true;
L4:

    // $t74 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152
    assume {:print "$at(2,60343,60495)"} true;
    $t74 := $t5;

    // ($t75, $t76, $t77, $t78) := unpack 0x42::access_control_comprehensive::ResourceOwnership($t74) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152
    $t75 := $t74->$resources;
    $t76 := $t74->$ownership_records;
    $t77 := $t74->$access_grants;
    $t78 := $t74->$transfer_log;

    // drop($t78) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152

    // drop($t77) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152

    // drop($t76) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152

    // drop($t75) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152

    // $t79 := move($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1527:10+7
    assume {:print "$at(2,60521,60528)"} true;
    $t79 := $t0;

    // $t80 := move($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1527:19+17
    $t80 := $t1;

    // trace_return[0]($t79) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1457:78+2715
    assume {:print "$at(2,57840,60555)"} true;
    assume {:print "$track_return(3,18,0):", $t79} $t79 == $t79;

    // trace_return[1]($t80) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1457:78+2715
    assume {:print "$track_return(3,18,1):", $t80} $t80 == $t80;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1457:78+2715
    goto L8;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152
    // Loop invariant checking block for the loop started with header: L2
    assume {:print "$at(2,60343,60495)"} true;
L6:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152
    assume {:print "$at(2,60343,60495)"} true;
    assume false;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152
    // Loop invariant checking block for the loop started with header: L3
L7:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1520:13+152
    assume {:print "$at(2,60343,60495)"} true;
    assume false;
    return;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1528:5+1
    assume {:print "$at(2,60554,60555)"} true;
L8:

    // return ($t79, $t80) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1528:5+1
    assume {:print "$at(2,60554,60555)"} true;
    $ret0 := $t79;
    $ret1 := $t80;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1528:5+1
L9:

    // abort($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1528:5+1
    assume {:print "$at(2,60554,60555)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_access_grant_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:5+382
procedure {:timeLimit 40} $42_access_control_comprehensive_find_access_grant_index$verify(_$t0: Vec ($42_access_control_comprehensive_AccessGrant), _$t1: int, _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: $42_access_control_comprehensive_AccessGrant;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $42_access_control_comprehensive_AccessGrant;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t0: Vec ($42_access_control_comprehensive_AccessGrant);
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_AccessGrant': $42_access_control_comprehensive_AccessGrant;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_AccessGrant'': Vec ($42_access_control_comprehensive_AccessGrant);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall $elem: 0x42::access_control_comprehensive::AccessGrant: $t0: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:5+1
    assume {:print "$at(2,66330,66331)"} true;
    assume ($IsValid'vec'$42_access_control_comprehensive_AccessGrant''($t0) && (var $range_0 := $t0; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:5+1
    assume $IsValid'address'($t2);

    // trace_local[grants]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:5+1
    assume {:print "$track_local(3,21,0):", $t0} $t0 == $t0;

    // trace_local[resource_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:5+1
    assume {:print "$track_local(3,21,1):", $t1} $t1 == $t1;

    // trace_local[grantee]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:5+1
    assume {:print "$track_local(3,21,2):", $t2} $t2 == $t2;

    // $t6 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1696:17+1
    assume {:print "$at(2,66448,66449)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_local[i]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1696:17+1
    assume {:print "$track_local(3,21,3):", $t6} $t6 == $t6;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume {:print "$at(2,66467,66468)"} true;
L6:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume {:print "$at(2,66467,66468)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'u64'($t3);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'bool'($t5);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t9;

    // assume And(WellFormed($t9), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($t9))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume ($IsValid'$42_access_control_comprehensive_AccessGrant'($t9) && (LenVec($t9->$expires_at->$vec) <= 1));

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'address'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t14;

    // assume WellFormed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'u64'($t14);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'u64'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume $IsValid'bool'($t16);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume {:print "$info(): enter loop, variable(s) i, $t5 havocked and reassigned"} true;
    assume {:print "$track_local(3,21,3):", $t3} $t3 == $t3;

    // trace_local[$t5]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume {:print "$track_local(3,21,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+1
    assume !$abort_flag;

    // $t7 := vector::length<0x42::access_control_comprehensive::AccessGrant>($t0) on_abort goto L10 with $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:20+22
    call $t7 := $1_vector_length'$42_access_control_comprehensive_AccessGrant'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,66471,66493)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(3,21):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t8 := <($t3, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:16+26
    call $t8 := $Lt($t3, $t7);

    // if ($t8) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:9+212
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1698:40+6
    assume {:print "$at(2,66537,66543)"} true;
L1:

    // $t9 := vector::borrow<0x42::access_control_comprehensive::AccessGrant>($t0, $t3) on_abort goto L10 with $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1698:25+25
    assume {:print "$at(2,66522,66547)"} true;
    call $t9 := $1_vector_borrow'$42_access_control_comprehensive_AccessGrant'($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,66522,66547)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(3,21):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[grant]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1698:25+25
    assume {:print "$track_local(3,21,4):", $t9} $t9 == $t9;

    // $t10 := get_field<0x42::access_control_comprehensive::AccessGrant>.resource_id($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+17
    assume {:print "$at(2,66566,66583)"} true;
    $t10 := $t9->$resource_id;

    // $t11 := ==($t10, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+32
    $t11 := $IsEqual'u64'($t10, $t1);

    // if ($t11) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+60
    if ($t11) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:53+13
L3:

    // $t12 := get_field<0x42::access_control_comprehensive::AccessGrant>.grantee($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:53+13
    assume {:print "$at(2,66602,66615)"} true;
    $t12 := $t9->$grantee;

    // $t13 := ==($t12, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:53+24
    $t13 := $IsEqual'address'($t12, $t2);

    // $t5 := $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:53+24
    $t5 := $t13;

    // trace_local[$t5]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:53+24
    assume {:print "$track_local(3,21,5):", $t13} $t13 == $t13;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:13+74
L7:

    // if ($t5) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:13+74
    assume {:print "$at(2,66562,66636)"} true;
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:79+8
L5:

    // trace_return[0]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:79+8
    assume {:print "$at(2,66628,66636)"} true;
    assume {:print "$track_return(3,21,0):", $t3} $t3 == $t3;

    // $t18 := move($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:79+8
    $t18 := $t3;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:79+8
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1700:17+1
    assume {:print "$at(2,66655,66656)"} true;
L4:

    // $t14 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1700:21+1
    assume {:print "$at(2,66659,66660)"} true;
    $t14 := 1;
    assume $IsValid'u64'($t14);

    // $t15 := +($t3, $t14) on_abort goto L10 with $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1700:17+5
    call $t15 := $AddU64($t3, $t14);
    if ($abort_flag) {
        assume {:print "$at(2,66655,66660)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(3,21):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[i]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1700:13+9
    assume {:print "$track_local(3,21,3):", $t15} $t15 == $t15;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1697:9+212
    assume {:print "$at(2,66460,66672)"} true;
    goto L8;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+60
    assume {:print "$at(2,66566,66626)"} true;
L2:

    // $t16 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+60
    assume {:print "$at(2,66566,66626)"} true;
    $t16 := false;
    assume $IsValid'bool'($t16);

    // $t5 := $t16 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+60
    $t5 := $t16;

    // trace_local[$t5]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+60
    assume {:print "$track_local(3,21,5):", $t16} $t16 == $t16;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1699:17+60
    goto L7;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1702:9+22
    assume {:print "$at(2,66683,66705)"} true;
L0:

    // $t19 := vector::length<0x42::access_control_comprehensive::AccessGrant>($t0) on_abort goto L10 with $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1702:9+22
    assume {:print "$at(2,66683,66705)"} true;
    call $t19 := $1_vector_length'$42_access_control_comprehensive_AccessGrant'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,66683,66705)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(3,21):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_return[0]($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:104+283
    assume {:print "$at(2,66429,66712)"} true;
    assume {:print "$track_return(3,21,0):", $t19} $t19 == $t19;

    // $t18 := move($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:104+283
    $t18 := $t19;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1695:104+283
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1702:9+22
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(2,66683,66705)"} true;
L8:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1702:9+22
    assume {:print "$at(2,66683,66705)"} true;
    assume false;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1703:5+1
    assume {:print "$at(2,66711,66712)"} true;
L9:

    // return $t18 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1703:5+1
    assume {:print "$at(2,66711,66712)"} true;
    $ret0 := $t18;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1703:5+1
L10:

    // abort($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1703:5+1
    assume {:print "$at(2,66711,66712)"} true;
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_pending_transaction_index [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+341
procedure {:inline 1} $42_access_control_comprehensive_find_pending_transaction_index(_$t0: Vec ($42_access_control_comprehensive_PendingTransaction), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $42_access_control_comprehensive_PendingTransaction;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t1: int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_PendingTransaction'': Vec ($42_access_control_comprehensive_PendingTransaction);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[transactions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+1
    assume {:print "$at(2,61619,61620)"} true;
    assume {:print "$track_local(3,22,0):", $t0} $t0 == $t0;

    // trace_local[id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+1
    assume {:print "$track_local(3,22,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1564:17+1
    assume {:print "$at(2,61730,61731)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1564:17+1
    assume {:print "$track_local(3,22,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume {:print "$at(2,61749,61750)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume {:print "$at(2,61749,61750)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'bool'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'$42_access_control_comprehensive_PendingTransaction'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t10);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,22,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume !$abort_flag;

    // $t4 := vector::length<0x42::access_control_comprehensive::PendingTransaction>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:20+28
    call $t4 := $1_vector_length'$42_access_control_comprehensive_PendingTransaction'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,61753,61781)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t5 := <($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+32
    call $t5 := $Lt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:9+172
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1566:37+12
    assume {:print "$at(2,61822,61834)"} true;
L1:

    // $t6 := vector::borrow<0x42::access_control_comprehensive::PendingTransaction>($t0, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1566:22+31
    assume {:print "$at(2,61807,61838)"} true;
    call $t6 := $1_vector_borrow'$42_access_control_comprehensive_PendingTransaction'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,61807,61838)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t7 := get_field<0x42::access_control_comprehensive::PendingTransaction>.id($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:17+5
    assume {:print "$at(2,61857,61862)"} true;
    $t7 := $t6->$id;

    // $t8 := ==($t7, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:17+11
    $t8 := $IsEqual'u64'($t7, $t1);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:13+25
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
    assume {:print "$at(2,61870,61878)"} true;
    assume {:print "$track_return(3,22,0):", $t2} $t2 == $t2;

    // $t12 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
    $t12 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:17+1
    assume {:print "$at(2,61897,61898)"} true;
L2:

    // $t9 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:21+1
    assume {:print "$at(2,61901,61902)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t2, $t9) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:17+5
    call $t10 := $AddU64($t2, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,61897,61902)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[i]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:13+9
    assume {:print "$track_local(3,22,2):", $t10} $t10 == $t10;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:9+172
    assume {:print "$at(2,61742,61914)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    assume {:print "$at(2,61925,61953)"} true;
L0:

    // $t13 := vector::length<0x42::access_control_comprehensive::PendingTransaction>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    assume {:print "$at(2,61925,61953)"} true;
    call $t13 := $1_vector_length'$42_access_control_comprehensive_PendingTransaction'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,61925,61953)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:97+249
    assume {:print "$at(2,61711,61960)"} true;
    assume {:print "$track_return(3,22,0):", $t13} $t13 == $t13;

    // $t12 := move($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:97+249
    $t12 := $t13;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:97+249
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,61925,61953)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    assume {:print "$at(2,61925,61953)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
    assume {:print "$at(2,61959,61960)"} true;
L6:

    // return $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
    assume {:print "$at(2,61959,61960)"} true;
    $ret0 := $t12;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
L7:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
    assume {:print "$at(2,61959,61960)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_pending_transaction_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+341
procedure {:timeLimit 40} $42_access_control_comprehensive_find_pending_transaction_index$verify(_$t0: Vec ($42_access_control_comprehensive_PendingTransaction), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $42_access_control_comprehensive_PendingTransaction;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_access_control_comprehensive_PendingTransaction);
    var $t1: int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_PendingTransaction'': Vec ($42_access_control_comprehensive_PendingTransaction);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+1
    assume {:print "$at(2,61619,61620)"} true;
    assume $IsValid'vec'$42_access_control_comprehensive_PendingTransaction''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+1
    assume $IsValid'u64'($t1);

    // trace_local[transactions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+1
    assume {:print "$track_local(3,22,0):", $t0} $t0 == $t0;

    // trace_local[id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:5+1
    assume {:print "$track_local(3,22,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1564:17+1
    assume {:print "$at(2,61730,61731)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1564:17+1
    assume {:print "$track_local(3,22,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume {:print "$at(2,61749,61750)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume {:print "$at(2,61749,61750)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'bool'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'$42_access_control_comprehensive_PendingTransaction'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume $IsValid'u64'($t10);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,22,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+1
    assume !$abort_flag;

    // $t4 := vector::length<0x42::access_control_comprehensive::PendingTransaction>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:20+28
    call $t4 := $1_vector_length'$42_access_control_comprehensive_PendingTransaction'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,61753,61781)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t5 := <($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:16+32
    call $t5 := $Lt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:9+172
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1566:37+12
    assume {:print "$at(2,61822,61834)"} true;
L1:

    // $t6 := vector::borrow<0x42::access_control_comprehensive::PendingTransaction>($t0, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1566:22+31
    assume {:print "$at(2,61807,61838)"} true;
    call $t6 := $1_vector_borrow'$42_access_control_comprehensive_PendingTransaction'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,61807,61838)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t7 := get_field<0x42::access_control_comprehensive::PendingTransaction>.id($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:17+5
    assume {:print "$at(2,61857,61862)"} true;
    $t7 := $t6->$id;

    // $t8 := ==($t7, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:17+11
    $t8 := $IsEqual'u64'($t7, $t1);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:13+25
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
    assume {:print "$at(2,61870,61878)"} true;
    assume {:print "$track_return(3,22,0):", $t2} $t2 == $t2;

    // $t12 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
    $t12 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1567:30+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:17+1
    assume {:print "$at(2,61897,61898)"} true;
L2:

    // $t9 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:21+1
    assume {:print "$at(2,61901,61902)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t2, $t9) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:17+5
    call $t10 := $AddU64($t2, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,61897,61902)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[i]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1568:13+9
    assume {:print "$track_local(3,22,2):", $t10} $t10 == $t10;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1565:9+172
    assume {:print "$at(2,61742,61914)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    assume {:print "$at(2,61925,61953)"} true;
L0:

    // $t13 := vector::length<0x42::access_control_comprehensive::PendingTransaction>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    assume {:print "$at(2,61925,61953)"} true;
    call $t13 := $1_vector_length'$42_access_control_comprehensive_PendingTransaction'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,61925,61953)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,22):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:97+249
    assume {:print "$at(2,61711,61960)"} true;
    assume {:print "$track_return(3,22,0):", $t13} $t13 == $t13;

    // $t12 := move($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:97+249
    $t12 := $t13;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1563:97+249
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,61925,61953)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1570:9+28
    assume {:print "$at(2,61925,61953)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
    assume {:print "$at(2,61959,61960)"} true;
L6:

    // return $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
    assume {:print "$at(2,61959,61960)"} true;
    $ret0 := $t12;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
L7:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1571:5+1
    assume {:print "$at(2,61959,61960)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_permission_id [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:5+433
procedure {:timeLimit 40} $42_access_control_comprehensive_find_permission_id$verify(_$t0: Vec ($42_access_control_comprehensive_Permission), _$t1: Vec (int), _$t2: Vec (int)) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: $42_access_control_comprehensive_Permission;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $42_access_control_comprehensive_Permission;
    var $t10: Vec (int);
    var $t11: bool;
    var $t12: Vec (int);
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t0: Vec ($42_access_control_comprehensive_Permission);
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'$42_access_control_comprehensive_Permission': $42_access_control_comprehensive_Permission;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_Permission'': Vec ($42_access_control_comprehensive_Permission);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:5+1
    assume {:print "$at(2,62801,62802)"} true;
    assume $IsValid'vec'$42_access_control_comprehensive_Permission''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:5+1
    assume $IsValid'vec'u8''($t2);

    // trace_local[permissions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:5+1
    assume {:print "$track_local(3,23,0):", $t0} $t0 == $t0;

    // trace_local[resource]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:5+1
    assume {:print "$track_local(3,23,1):", $t1} $t1 == $t1;

    // trace_local[action]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:5+1
    assume {:print "$track_local(3,23,2):", $t2} $t2 == $t2;

    // $t6 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1599:17+1
    assume {:print "$at(2,62926,62927)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_local[i]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1599:17+1
    assume {:print "$track_local(3,23,3):", $t6} $t6 == $t6;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume {:print "$at(2,62945,62946)"} true;
L6:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume {:print "$at(2,62945,62946)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'u64'($t3);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'bool'($t5);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'$42_access_control_comprehensive_Permission'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'vec'u8''($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'vec'u8''($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t14;

    // assume WellFormed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'u64'($t14);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'u64'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume $IsValid'bool'($t16);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume {:print "$info(): enter loop, variable(s) i, $t5 havocked and reassigned"} true;
    assume {:print "$track_local(3,23,3):", $t3} $t3 == $t3;

    // trace_local[$t5]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume {:print "$track_local(3,23,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+1
    assume !$abort_flag;

    // $t7 := vector::length<0x42::access_control_comprehensive::Permission>($t0) on_abort goto L10 with $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:20+27
    call $t7 := $1_vector_length'$42_access_control_comprehensive_Permission'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,62949,62976)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(3,23):", $t17} $t17 == $t17;
        goto L10;
    }

    // $t8 := <($t3, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:16+31
    call $t8 := $Lt($t3, $t7);

    // if ($t8) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:9+277
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1601:45+11
    assume {:print "$at(2,63025,63036)"} true;
L1:

    // $t9 := vector::borrow<0x42::access_control_comprehensive::Permission>($t0, $t3) on_abort goto L10 with $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1601:30+30
    assume {:print "$at(2,63010,63040)"} true;
    call $t9 := $1_vector_borrow'$42_access_control_comprehensive_Permission'($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,63010,63040)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(3,23):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[permission]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1601:30+30
    assume {:print "$track_local(3,23,4):", $t9} $t9 == $t9;

    // $t10 := get_field<0x42::access_control_comprehensive::Permission>.resource($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+19
    assume {:print "$at(2,63059,63078)"} true;
    $t10 := $t9->$resource;

    // $t11 := ==($t10, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+32
    $t11 := $IsEqual'vec'u8''($t10, $t1);

    // if ($t11) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+64
    if ($t11) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:53+17
L3:

    // $t12 := get_field<0x42::access_control_comprehensive::Permission>.action($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:53+17
    assume {:print "$at(2,63095,63112)"} true;
    $t12 := $t9->$action;

    // $t13 := ==($t12, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:53+28
    $t13 := $IsEqual'vec'u8''($t12, $t2);

    // $t5 := $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:53+28
    $t5 := $t13;

    // trace_local[$t5]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:53+28
    assume {:print "$track_local(3,23,5):", $t13} $t13 == $t13;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:13+124
L7:

    // if ($t5) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:13+124
    assume {:print "$at(2,63055,63179)"} true;
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1603:17+20
    assume {:print "$at(2,63144,63164)"} true;
L5:

    // $t18 := get_field<0x42::access_control_comprehensive::Permission>.id($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1603:24+13
    assume {:print "$at(2,63151,63164)"} true;
    $t18 := $t9->$id;

    // trace_return[0]($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1603:17+20
    assume {:print "$track_return(3,23,0):", $t18} $t18 == $t18;

    // $t19 := move($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1603:17+20
    $t19 := $t18;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1603:17+20
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:13+124
    assume {:print "$at(2,63055,63179)"} true;
L4:

    // $t14 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1605:21+1
    assume {:print "$at(2,63202,63203)"} true;
    $t14 := 1;
    assume $IsValid'u64'($t14);

    // $t15 := +($t3, $t14) on_abort goto L10 with $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1605:17+5
    call $t15 := $AddU64($t3, $t14);
    if ($abort_flag) {
        assume {:print "$at(2,63198,63203)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(3,23):", $t17} $t17 == $t17;
        goto L10;
    }

    // trace_local[i]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1605:13+9
    assume {:print "$track_local(3,23,3):", $t15} $t15 == $t15;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:9+277
    assume {:print "$at(2,62938,63215)"} true;
    goto L8;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+64
    assume {:print "$at(2,63059,63123)"} true;
L2:

    // $t16 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+64
    assume {:print "$at(2,63059,63123)"} true;
    $t16 := false;
    assume $IsValid'bool'($t16);

    // $t5 := $t16 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+64
    $t5 := $t16;

    // trace_local[$t5]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+64
    assume {:print "$track_local(3,23,5):", $t16} $t16 == $t16;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1602:17+64
    goto L7;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:9+277
    assume {:print "$at(2,62938,63215)"} true;
L0:

    // $t20 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1607:9+1
    assume {:print "$at(2,63226,63227)"} true;
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // trace_return[0]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:111+327
    assume {:print "$at(2,62907,63234)"} true;
    assume {:print "$track_return(3,23,0):", $t20} $t20 == $t20;

    // $t19 := move($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:111+327
    $t19 := $t20;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1598:111+327
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:9+277
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(2,62938,63215)"} true;
L8:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1600:9+277
    assume {:print "$at(2,62938,63215)"} true;
    assume false;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1608:5+1
    assume {:print "$at(2,63233,63234)"} true;
L9:

    // return $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1608:5+1
    assume {:print "$at(2,63233,63234)"} true;
    $ret0 := $t19;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1608:5+1
L10:

    // abort($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1608:5+1
    assume {:print "$at(2,63233,63234)"} true;
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_resource_index [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+338
procedure {:inline 1} $42_access_control_comprehensive_find_resource_index(_$t0: Vec ($42_access_control_comprehensive_Resource), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $42_access_control_comprehensive_Resource;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_access_control_comprehensive_Resource);
    var $t1: int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_Resource'': Vec ($42_access_control_comprehensive_Resource);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[resources]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+1
    assume {:print "$at(2,65984,65985)"} true;
    assume {:print "$track_local(3,24,0):", $t0} $t0 == $t0;

    // trace_local[resource_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+1
    assume {:print "$track_local(3,24,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1686:17+1
    assume {:print "$at(2,66080,66081)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1686:17+1
    assume {:print "$track_local(3,24,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume {:print "$at(2,66099,66100)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume {:print "$at(2,66099,66100)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'bool'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'$42_access_control_comprehensive_Resource'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t10);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,24,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume !$abort_flag;

    // $t4 := vector::length<0x42::access_control_comprehensive::Resource>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:20+25
    call $t4 := $1_vector_length'$42_access_control_comprehensive_Resource'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,66103,66128)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t5 := <($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+29
    call $t5 := $Lt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:9+187
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1688:43+9
    assume {:print "$at(2,66175,66184)"} true;
L1:

    // $t6 := vector::borrow<0x42::access_control_comprehensive::Resource>($t0, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1688:28+28
    assume {:print "$at(2,66160,66188)"} true;
    call $t6 := $1_vector_borrow'$42_access_control_comprehensive_Resource'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,66160,66188)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t7 := get_field<0x42::access_control_comprehensive::Resource>.id($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:17+11
    assume {:print "$at(2,66207,66218)"} true;
    $t7 := $t6->$id;

    // $t8 := ==($t7, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:17+26
    $t8 := $IsEqual'u64'($t7, $t1);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:13+40
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
    assume {:print "$at(2,66235,66243)"} true;
    assume {:print "$track_return(3,24,0):", $t2} $t2 == $t2;

    // $t12 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
    $t12 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:17+1
    assume {:print "$at(2,66262,66263)"} true;
L2:

    // $t9 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:21+1
    assume {:print "$at(2,66266,66267)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t2, $t9) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:17+5
    call $t10 := $AddU64($t2, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,66262,66267)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[i]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:13+9
    assume {:print "$track_local(3,24,2):", $t10} $t10 == $t10;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:9+187
    assume {:print "$at(2,66092,66279)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    assume {:print "$at(2,66290,66315)"} true;
L0:

    // $t13 := vector::length<0x42::access_control_comprehensive::Resource>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    assume {:print "$at(2,66290,66315)"} true;
    call $t13 := $1_vector_length'$42_access_control_comprehensive_Resource'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,66290,66315)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:82+261
    assume {:print "$at(2,66061,66322)"} true;
    assume {:print "$track_return(3,24,0):", $t13} $t13 == $t13;

    // $t12 := move($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:82+261
    $t12 := $t13;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:82+261
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,66290,66315)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    assume {:print "$at(2,66290,66315)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
    assume {:print "$at(2,66321,66322)"} true;
L6:

    // return $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
    assume {:print "$at(2,66321,66322)"} true;
    $ret0 := $t12;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
L7:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
    assume {:print "$at(2,66321,66322)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_resource_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+338
procedure {:timeLimit 40} $42_access_control_comprehensive_find_resource_index$verify(_$t0: Vec ($42_access_control_comprehensive_Resource), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $42_access_control_comprehensive_Resource;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_access_control_comprehensive_Resource);
    var $t1: int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_Resource'': Vec ($42_access_control_comprehensive_Resource);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+1
    assume {:print "$at(2,65984,65985)"} true;
    assume $IsValid'vec'$42_access_control_comprehensive_Resource''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+1
    assume $IsValid'u64'($t1);

    // trace_local[resources]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+1
    assume {:print "$track_local(3,24,0):", $t0} $t0 == $t0;

    // trace_local[resource_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:5+1
    assume {:print "$track_local(3,24,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1686:17+1
    assume {:print "$at(2,66080,66081)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1686:17+1
    assume {:print "$track_local(3,24,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume {:print "$at(2,66099,66100)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume {:print "$at(2,66099,66100)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'bool'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'$42_access_control_comprehensive_Resource'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume $IsValid'u64'($t10);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,24,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+1
    assume !$abort_flag;

    // $t4 := vector::length<0x42::access_control_comprehensive::Resource>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:20+25
    call $t4 := $1_vector_length'$42_access_control_comprehensive_Resource'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,66103,66128)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t5 := <($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:16+29
    call $t5 := $Lt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:9+187
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1688:43+9
    assume {:print "$at(2,66175,66184)"} true;
L1:

    // $t6 := vector::borrow<0x42::access_control_comprehensive::Resource>($t0, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1688:28+28
    assume {:print "$at(2,66160,66188)"} true;
    call $t6 := $1_vector_borrow'$42_access_control_comprehensive_Resource'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,66160,66188)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t7 := get_field<0x42::access_control_comprehensive::Resource>.id($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:17+11
    assume {:print "$at(2,66207,66218)"} true;
    $t7 := $t6->$id;

    // $t8 := ==($t7, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:17+26
    $t8 := $IsEqual'u64'($t7, $t1);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:13+40
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
    assume {:print "$at(2,66235,66243)"} true;
    assume {:print "$track_return(3,24,0):", $t2} $t2 == $t2;

    // $t12 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
    $t12 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1689:45+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:17+1
    assume {:print "$at(2,66262,66263)"} true;
L2:

    // $t9 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:21+1
    assume {:print "$at(2,66266,66267)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t2, $t9) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:17+5
    call $t10 := $AddU64($t2, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,66262,66267)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[i]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1690:13+9
    assume {:print "$track_local(3,24,2):", $t10} $t10 == $t10;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1687:9+187
    assume {:print "$at(2,66092,66279)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    assume {:print "$at(2,66290,66315)"} true;
L0:

    // $t13 := vector::length<0x42::access_control_comprehensive::Resource>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    assume {:print "$at(2,66290,66315)"} true;
    call $t13 := $1_vector_length'$42_access_control_comprehensive_Resource'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,66290,66315)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,24):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:82+261
    assume {:print "$at(2,66061,66322)"} true;
    assume {:print "$track_return(3,24,0):", $t13} $t13 == $t13;

    // $t12 := move($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:82+261
    $t12 := $t13;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1685:82+261
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,66290,66315)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1692:9+25
    assume {:print "$at(2,66290,66315)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
    assume {:print "$at(2,66321,66322)"} true;
L6:

    // return $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
    assume {:print "$at(2,66321,66322)"} true;
    $ret0 := $t12;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
L7:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1693:5+1
    assume {:print "$at(2,66321,66322)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_role_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:5+302
procedure {:timeLimit 40} $42_access_control_comprehensive_find_role_index$verify(_$t0: Vec ($42_access_control_comprehensive_UserRole), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $42_access_control_comprehensive_UserRole;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_access_control_comprehensive_UserRole);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_UserRole'': Vec ($42_access_control_comprehensive_UserRole);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:5+1
    assume {:print "$at(2,61309,61310)"} true;
    assume $IsValid'vec'$42_access_control_comprehensive_UserRole''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:5+1
    assume $IsValid'address'($t1);

    // trace_local[roles]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:5+1
    assume {:print "$track_local(3,25,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:5+1
    assume {:print "$track_local(3,25,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1554:17+1
    assume {:print "$at(2,61394,61395)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1554:17+1
    assume {:print "$track_local(3,25,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume {:print "$at(2,61413,61414)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume {:print "$at(2,61413,61414)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'bool'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'$42_access_control_comprehensive_UserRole'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'address'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume $IsValid'u64'($t10);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,25,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+1
    assume !$abort_flag;

    // $t4 := vector::length<0x42::access_control_comprehensive::UserRole>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:20+21
    call $t4 := $1_vector_length'$42_access_control_comprehensive_UserRole'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,61417,61438)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,25):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t5 := <($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:16+25
    call $t5 := $Lt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:9+166
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1556:39+5
    assume {:print "$at(2,61481,61486)"} true;
L1:

    // $t6 := vector::borrow<0x42::access_control_comprehensive::UserRole>($t0, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1556:24+24
    assume {:print "$at(2,61466,61490)"} true;
    call $t6 := $1_vector_borrow'$42_access_control_comprehensive_UserRole'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,61466,61490)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,25):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t7 := get_field<0x42::access_control_comprehensive::UserRole>.user($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1557:17+9
    assume {:print "$at(2,61509,61518)"} true;
    $t7 := $t6->$user;

    // $t8 := ==($t7, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1557:17+17
    $t8 := $IsEqual'address'($t7, $t1);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1557:13+31
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1557:36+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1557:36+8
    assume {:print "$at(2,61528,61536)"} true;
    assume {:print "$track_return(3,25,0):", $t2} $t2 == $t2;

    // $t12 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1557:36+8
    $t12 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1557:36+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1558:17+1
    assume {:print "$at(2,61555,61556)"} true;
L2:

    // $t9 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1558:21+1
    assume {:print "$at(2,61559,61560)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t2, $t9) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1558:17+5
    call $t10 := $AddU64($t2, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,61555,61560)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,25):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[i]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1558:13+9
    assume {:print "$track_local(3,25,2):", $t10} $t10 == $t10;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1555:9+166
    assume {:print "$at(2,61406,61572)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1560:9+21
    assume {:print "$at(2,61583,61604)"} true;
L0:

    // $t13 := vector::length<0x42::access_control_comprehensive::UserRole>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1560:9+21
    assume {:print "$at(2,61583,61604)"} true;
    call $t13 := $1_vector_length'$42_access_control_comprehensive_UserRole'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,61583,61604)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,25):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:71+236
    assume {:print "$at(2,61375,61611)"} true;
    assume {:print "$track_return(3,25,0):", $t13} $t13 == $t13;

    // $t12 := move($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:71+236
    $t12 := $t13;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1553:71+236
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1560:9+21
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,61583,61604)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1560:9+21
    assume {:print "$at(2,61583,61604)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1561:5+1
    assume {:print "$at(2,61610,61611)"} true;
L6:

    // return $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1561:5+1
    assume {:print "$at(2,61610,61611)"} true;
    $ret0 := $t12;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1561:5+1
L7:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1561:5+1
    assume {:print "$at(2,61610,61611)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_role_index_by_id [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+304
procedure {:inline 1} $42_access_control_comprehensive_find_role_index_by_id(_$t0: Vec ($42_access_control_comprehensive_Role), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $42_access_control_comprehensive_Role;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_access_control_comprehensive_Role);
    var $t1: int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_Role'': Vec ($42_access_control_comprehensive_Role);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[roles]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+1
    assume {:print "$at(2,65218,65219)"} true;
    assume {:print "$track_local(3,26,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+1
    assume {:print "$track_local(3,26,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1664:17+1
    assume {:print "$at(2,65304,65305)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1664:17+1
    assume {:print "$track_local(3,26,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume {:print "$at(2,65323,65324)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume {:print "$at(2,65323,65324)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'bool'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'$42_access_control_comprehensive_Role'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t10);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,26,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume !$abort_flag;

    // $t4 := vector::length<0x42::access_control_comprehensive::Role>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:20+21
    call $t4 := $1_vector_length'$42_access_control_comprehensive_Role'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,65327,65348)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t5 := <($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+25
    call $t5 := $Lt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:9+167
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1666:39+5
    assume {:print "$at(2,65391,65396)"} true;
L1:

    // $t6 := vector::borrow<0x42::access_control_comprehensive::Role>($t0, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1666:24+24
    assume {:print "$at(2,65376,65400)"} true;
    call $t6 := $1_vector_borrow'$42_access_control_comprehensive_Role'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,65376,65400)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t7 := get_field<0x42::access_control_comprehensive::Role>.id($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:17+7
    assume {:print "$at(2,65419,65426)"} true;
    $t7 := $t6->$id;

    // $t8 := ==($t7, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:17+18
    $t8 := $IsEqual'u64'($t7, $t1);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:13+32
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
    assume {:print "$at(2,65439,65447)"} true;
    assume {:print "$track_return(3,26,0):", $t2} $t2 == $t2;

    // $t12 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
    $t12 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:17+1
    assume {:print "$at(2,65466,65467)"} true;
L2:

    // $t9 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:21+1
    assume {:print "$at(2,65470,65471)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t2, $t9) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:17+5
    call $t10 := $AddU64($t2, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,65466,65471)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[i]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:13+9
    assume {:print "$track_local(3,26,2):", $t10} $t10 == $t10;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:9+167
    assume {:print "$at(2,65316,65483)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    assume {:print "$at(2,65494,65515)"} true;
L0:

    // $t13 := vector::length<0x42::access_control_comprehensive::Role>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    assume {:print "$at(2,65494,65515)"} true;
    call $t13 := $1_vector_length'$42_access_control_comprehensive_Role'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,65494,65515)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:72+237
    assume {:print "$at(2,65285,65522)"} true;
    assume {:print "$track_return(3,26,0):", $t13} $t13 == $t13;

    // $t12 := move($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:72+237
    $t12 := $t13;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:72+237
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,65494,65515)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    assume {:print "$at(2,65494,65515)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
    assume {:print "$at(2,65521,65522)"} true;
L6:

    // return $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
    assume {:print "$at(2,65521,65522)"} true;
    $ret0 := $t12;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
L7:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
    assume {:print "$at(2,65521,65522)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::find_role_index_by_id [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+304
procedure {:timeLimit 40} $42_access_control_comprehensive_find_role_index_by_id$verify(_$t0: Vec ($42_access_control_comprehensive_Role), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $42_access_control_comprehensive_Role;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_access_control_comprehensive_Role);
    var $t1: int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_access_control_comprehensive_Role'': Vec ($42_access_control_comprehensive_Role);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+1
    assume {:print "$at(2,65218,65219)"} true;
    assume $IsValid'vec'$42_access_control_comprehensive_Role''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+1
    assume $IsValid'u64'($t1);

    // trace_local[roles]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+1
    assume {:print "$track_local(3,26,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:5+1
    assume {:print "$track_local(3,26,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1664:17+1
    assume {:print "$at(2,65304,65305)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1664:17+1
    assume {:print "$track_local(3,26,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume {:print "$at(2,65323,65324)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume {:print "$at(2,65323,65324)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'bool'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'$42_access_control_comprehensive_Role'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'bool'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume $IsValid'u64'($t10);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,26,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+1
    assume !$abort_flag;

    // $t4 := vector::length<0x42::access_control_comprehensive::Role>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:20+21
    call $t4 := $1_vector_length'$42_access_control_comprehensive_Role'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,65327,65348)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t5 := <($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:16+25
    call $t5 := $Lt($t2, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:9+167
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1666:39+5
    assume {:print "$at(2,65391,65396)"} true;
L1:

    // $t6 := vector::borrow<0x42::access_control_comprehensive::Role>($t0, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1666:24+24
    assume {:print "$at(2,65376,65400)"} true;
    call $t6 := $1_vector_borrow'$42_access_control_comprehensive_Role'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,65376,65400)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t7 := get_field<0x42::access_control_comprehensive::Role>.id($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:17+7
    assume {:print "$at(2,65419,65426)"} true;
    $t7 := $t6->$id;

    // $t8 := ==($t7, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:17+18
    $t8 := $IsEqual'u64'($t7, $t1);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:13+32
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
    assume {:print "$at(2,65439,65447)"} true;
    assume {:print "$track_return(3,26,0):", $t2} $t2 == $t2;

    // $t12 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
    $t12 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1667:37+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:17+1
    assume {:print "$at(2,65466,65467)"} true;
L2:

    // $t9 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:21+1
    assume {:print "$at(2,65470,65471)"} true;
    $t9 := 1;
    assume $IsValid'u64'($t9);

    // $t10 := +($t2, $t9) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:17+5
    call $t10 := $AddU64($t2, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,65466,65471)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[i]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1668:13+9
    assume {:print "$track_local(3,26,2):", $t10} $t10 == $t10;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1665:9+167
    assume {:print "$at(2,65316,65483)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    assume {:print "$at(2,65494,65515)"} true;
L0:

    // $t13 := vector::length<0x42::access_control_comprehensive::Role>($t0) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    assume {:print "$at(2,65494,65515)"} true;
    call $t13 := $1_vector_length'$42_access_control_comprehensive_Role'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,65494,65515)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(3,26):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:72+237
    assume {:print "$at(2,65285,65522)"} true;
    assume {:print "$track_return(3,26,0):", $t13} $t13 == $t13;

    // $t12 := move($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:72+237
    $t12 := $t13;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1663:72+237
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,65494,65515)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1670:9+21
    assume {:print "$at(2,65494,65515)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
    assume {:print "$at(2,65521,65522)"} true;
L6:

    // return $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
    assume {:print "$at(2,65521,65522)"} true;
    $ret0 := $t12;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
L7:

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1671:5+1
    assume {:print "$at(2,65521,65522)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::get_active_user_roles [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+792
procedure {:inline 1} $42_access_control_comprehensive_get_active_user_roles(_$t0: $42_access_control_comprehensive_AccessControlSystem, _$t1: int, _$t2: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: $42_access_control_comprehensive_UserRoleAssignment;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var $t11: int;
    var $t12: bool;
    var $t13: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var $t14: $42_access_control_comprehensive_UserRoleAssignment;
    var $t15: int;
    var $t16: bool;
    var $t17: $1_option_Option'u64';
    var $t18: bool;
    var $t19: $1_option_Option'u64';
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $Mutation (Vec (int));
    var $t27: bool;
    var $t28: Vec (int);
    var $t0: $42_access_control_comprehensive_AccessControlSystem;
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_AccessControlSystem': $42_access_control_comprehensive_AccessControlSystem;
    var $temp_0'$42_access_control_comprehensive_UserRoleAssignment': $42_access_control_comprehensive_UserRoleAssignment;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume {:print "$at(2,63242,63243)"} true;
    assume {:print "$track_local(3,27,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume {:print "$track_local(3,27,1):", $t1} $t1 == $t1;

    // trace_local[current_time]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume {:print "$track_local(3,27,2):", $t2} $t2 == $t2;

    // $t3 := vector::empty<u64>() on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1611:21+20
    assume {:print "$at(2,63368,63388)"} true;
    call $t3 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(2,63368,63388)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // trace_local[roles]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1611:21+20
    assume {:print "$track_local(3,27,3):", $t3} $t3 == $t3;

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1612:17+1
    assume {:print "$at(2,63407,63408)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_local[i]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1612:17+1
    assume {:print "$track_local(3,27,4):", $t9} $t9 == $t9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$at(2,63426,63427)"} true;
L8:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$at(2,63426,63427)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'vec'u64''($t3);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t4);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t7);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t10;

    // assume And(WellFormed($t10), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: $t10: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''($t10) && (var $range_0 := $t10; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t13;

    // assume And(WellFormed($t13), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: $t13: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''($t13) && (var $range_0 := $t13; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t14;

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($t14))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'$42_access_control_comprehensive_UserRoleAssignment'($t14) && (LenVec($t14->$expires_at->$vec) <= 1));

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'address'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t17;

    // assume And(WellFormed($t17), Le(Len<u64>(select option::Option.vec($t17)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'$1_option_Option'u64''($t17) && (LenVec($t17->$vec) <= 1));

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t19;

    // assume And(WellFormed($t19), Le(Len<u64>(select option::Option.vec($t19)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'$1_option_Option'u64''($t19) && (LenVec($t19->$vec) <= 1));

    // $t20 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t21;

    // assume WellFormed($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t22;

    // assume WellFormed($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t23;

    // assume WellFormed($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t24;

    // assume WellFormed($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t25;

    // assume WellFormed($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t26;

    // assume WellFormed($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'vec'u64''($Dereference($t26));

    // trace_local[roles]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$info(): enter loop, variable(s) roles, i, $t6 havocked and reassigned"} true;
    assume {:print "$track_local(3,27,3):", $t3} $t3 == $t3;

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$track_local(3,27,4):", $t4} $t4 == $t4;

    // trace_local[$t6]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$track_local(3,27,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume !$abort_flag;

    // $t10 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.users($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:35+13
    $t10 := $t0->$users;

    // $t11 := vector::length<0x42::access_control_comprehensive::UserRoleAssignment>($t10) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:20+29
    call $t11 := $1_vector_length'$42_access_control_comprehensive_UserRoleAssignment'($t10);
    if ($abort_flag) {
        assume {:print "$at(2,63430,63459)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // $t12 := <($t4, $t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+33
    call $t12 := $Lt($t4, $t11);

    // if ($t12) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:45+13
    assume {:print "$at(2,63508,63521)"} true;
L1:

    // $t13 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.users($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:45+13
    assume {:print "$at(2,63508,63521)"} true;
    $t13 := $t0->$users;

    // $t14 := vector::borrow<0x42::access_control_comprehensive::UserRoleAssignment>($t13, $t4) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:30+32
    call $t14 := $1_vector_borrow'$42_access_control_comprehensive_UserRoleAssignment'($t13, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,63493,63525)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // trace_local[assignment]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:30+32
    assume {:print "$track_local(3,27,5):", $t14} $t14 == $t14;

    // $t15 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.user($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:17+15
    assume {:print "$at(2,63544,63559)"} true;
    $t15 := $t14->$user;

    // $t16 := ==($t15, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:17+23
    $t16 := $IsEqual'address'($t15, $t1);

    // if ($t16) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:13+435
    if ($t16) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:50+22
    assume {:print "$at(2,63621,63643)"} true;
L3:

    // $t17 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.expires_at($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:50+22
    assume {:print "$at(2,63621,63643)"} true;
    $t17 := $t14->$expires_at;

    // $t18 := opaque begin: option::is_some<u64>($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, option::spec_is_some<u64>($t17)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39
    assume $IsEqual'bool'($t18, $1_option_spec_is_some'u64'($t17));

    // $t18 := opaque end: option::is_some<u64>($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39

    // if ($t18) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:30+235
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:50+22
    assume {:print "$at(2,63698,63720)"} true;
L5:

    // $t19 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.expires_at($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:50+22
    assume {:print "$at(2,63698,63720)"} true;
    $t19 := $t14->$expires_at;

    // $t20 := opaque begin: option::borrow<u64>($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38

    // assume Identical($t27, option::spec_is_none<u64>($t19)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume ($t27 == $1_option_spec_is_none'u64'($t19));

    // if ($t27) goto L15 else goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    if ($t27) { goto L15; } else { goto L14; }

    // label L15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
L15:

    // assume And(option::spec_is_none<u64>($t19), Eq(262145, $t8)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume {:print "$at(2,63683,63721)"} true;
    assume ($1_option_spec_is_none'u64'($t19) && $IsEqual'num'(262145, $t8));

    // trace_abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume {:print "$at(2,63683,63721)"} true;
    assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    goto L13;

    // label L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
L14:

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume {:print "$at(2,63683,63721)"} true;
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, option::spec_borrow<u64>($t19)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume $IsEqual'u64'($t20, $1_option_spec_borrow'u64'($t19));

    // $t20 := opaque end: option::borrow<u64>($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38

    // trace_local[$t7]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:34+39
    assume {:print "$track_local(3,27,6):", $t20} $t20 == $t20;

    // $t21 := <($t2, $t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1618:21+21
    assume {:print "$at(2,63744,63765)"} true;
    call $t21 := $Lt($t2, $t20);

    // $t7 := $t21 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1618:21+21
    $t7 := $t21;

    // trace_local[$t6]($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1618:21+21
    assume {:print "$track_local(3,27,7):", $t21} $t21 == $t21;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
L10:

    // if ($t7) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:39+10
    assume {:print "$at(2,63908,63918)"} true;
L7:

    // $t26 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:39+10
    assume {:print "$at(2,63908,63918)"} true;
    $t26 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t22 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.role_id($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:51+18
    $t22 := $t14->$role_id;

    // vector::push_back<u64>($t26, $t22) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:21+49
    call $t26 := $1_vector_push_back'u64'($t26, $t22);
    if ($abort_flag) {
        assume {:print "$at(2,63890,63939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // write_back[LocalRoot($t3)@]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:21+49
    $t3 := $Dereference($t26);

    // trace_local[roles]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:21+49
    assume {:print "$track_local(3,27,3):", $t3} $t3 == $t3;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:17+1
    assume {:print "$at(2,63994,63995)"} true;
L9:

    // $t23 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:21+1
    assume {:print "$at(2,63998,63999)"} true;
    $t23 := 1;
    assume $IsValid'u64'($t23);

    // $t24 := +($t4, $t23) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:17+5
    call $t24 := $AddU64($t4, $t23);
    if ($abort_flag) {
        assume {:print "$at(2,63994,63999)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // trace_local[i]($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:13+9
    assume {:print "$track_local(3,27,4):", $t24} $t24 == $t24;

    // goto L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    assume {:print "$at(2,63419,64011)"} true;
    goto L11;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
L6:

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    assume {:print "$at(2,63813,63817)"} true;
L4:

    // $t25 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    assume {:print "$at(2,63813,63817)"} true;
    $t25 := true;
    assume $IsValid'bool'($t25);

    // $t7 := $t25 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    $t7 := $t25;

    // trace_local[$t6]($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    assume {:print "$track_local(3,27,7):", $t25} $t25 == $t25;

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    goto L10;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:13+435
    assume {:print "$at(2,63540,63975)"} true;
L2:

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:13+435
    assume {:print "$at(2,63540,63975)"} true;
    goto L9;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    assume {:print "$at(2,63419,64011)"} true;
L0:

    // $t28 := move($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1628:9+5
    assume {:print "$at(2,64022,64027)"} true;
    $t28 := $t3;

    // trace_return[0]($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:108+689
    assume {:print "$at(2,63345,64034)"} true;
    assume {:print "$track_return(3,27,0):", $t28} $t28 == $t28;

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:108+689
    goto L12;

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    // Loop invariant checking block for the loop started with header: L8
    assume {:print "$at(2,63419,64011)"} true;
L11:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    assume {:print "$at(2,63419,64011)"} true;
    assume false;
    return;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
    assume {:print "$at(2,64033,64034)"} true;
L12:

    // return $t28 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
    assume {:print "$at(2,64033,64034)"} true;
    $ret0 := $t28;
    return;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
L13:

    // abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
    assume {:print "$at(2,64033,64034)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::get_active_user_roles [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+792
procedure {:timeLimit 40} $42_access_control_comprehensive_get_active_user_roles$verify(_$t0: $42_access_control_comprehensive_AccessControlSystem, _$t1: int, _$t2: int) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t3: Vec (int);
    var $t4: int;
    var $t5: $42_access_control_comprehensive_UserRoleAssignment;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var $t11: int;
    var $t12: bool;
    var $t13: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var $t14: $42_access_control_comprehensive_UserRoleAssignment;
    var $t15: int;
    var $t16: bool;
    var $t17: $1_option_Option'u64';
    var $t18: bool;
    var $t19: $1_option_Option'u64';
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $Mutation (Vec (int));
    var $t27: bool;
    var $t28: Vec (int);
    var $t0: $42_access_control_comprehensive_AccessControlSystem;
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_AccessControlSystem': $42_access_control_comprehensive_AccessControlSystem;
    var $temp_0'$42_access_control_comprehensive_UserRoleAssignment': $42_access_control_comprehensive_UserRoleAssignment;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: select access_control_comprehensive::AccessControlSystem.users($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume {:print "$at(2,63242,63243)"} true;
    assume ($IsValid'$42_access_control_comprehensive_AccessControlSystem'($t0) && (var $range_0 := $t0->$users; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume $IsValid'u64'($t2);

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume {:print "$track_local(3,27,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume {:print "$track_local(3,27,1):", $t1} $t1 == $t1;

    // trace_local[current_time]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:5+1
    assume {:print "$track_local(3,27,2):", $t2} $t2 == $t2;

    // $t3 := vector::empty<u64>() on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1611:21+20
    assume {:print "$at(2,63368,63388)"} true;
    call $t3 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(2,63368,63388)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // trace_local[roles]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1611:21+20
    assume {:print "$track_local(3,27,3):", $t3} $t3 == $t3;

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1612:17+1
    assume {:print "$at(2,63407,63408)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_local[i]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1612:17+1
    assume {:print "$track_local(3,27,4):", $t9} $t9 == $t9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$at(2,63426,63427)"} true;
L8:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$at(2,63426,63427)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'vec'u64''($t3);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t4);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t7);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t10;

    // assume And(WellFormed($t10), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: $t10: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''($t10) && (var $range_0 := $t10; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t13;

    // assume And(WellFormed($t13), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: $t13: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''($t13) && (var $range_0 := $t13; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t14;

    // assume And(WellFormed($t14), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($t14))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'$42_access_control_comprehensive_UserRoleAssignment'($t14) && (LenVec($t14->$expires_at->$vec) <= 1));

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'address'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t17;

    // assume And(WellFormed($t17), Le(Len<u64>(select option::Option.vec($t17)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'$1_option_Option'u64''($t17) && (LenVec($t17->$vec) <= 1));

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t19;

    // assume And(WellFormed($t19), Le(Len<u64>(select option::Option.vec($t19)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume ($IsValid'$1_option_Option'u64''($t19) && (LenVec($t19->$vec) <= 1));

    // $t20 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t21;

    // assume WellFormed($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t21);

    // $t22 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t22;

    // assume WellFormed($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t23;

    // assume WellFormed($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t24;

    // assume WellFormed($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t25;

    // assume WellFormed($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'bool'($t25);

    // $t26 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    havoc $t26;

    // assume WellFormed($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume $IsValid'vec'u64''($Dereference($t26));

    // trace_local[roles]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$info(): enter loop, variable(s) roles, i, $t6 havocked and reassigned"} true;
    assume {:print "$track_local(3,27,3):", $t3} $t3 == $t3;

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$track_local(3,27,4):", $t4} $t4 == $t4;

    // trace_local[$t6]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume {:print "$track_local(3,27,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+1
    assume !$abort_flag;

    // $t10 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.users($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:35+13
    $t10 := $t0->$users;

    // $t11 := vector::length<0x42::access_control_comprehensive::UserRoleAssignment>($t10) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:20+29
    call $t11 := $1_vector_length'$42_access_control_comprehensive_UserRoleAssignment'($t10);
    if ($abort_flag) {
        assume {:print "$at(2,63430,63459)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // $t12 := <($t4, $t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:16+33
    call $t12 := $Lt($t4, $t11);

    // if ($t12) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:45+13
    assume {:print "$at(2,63508,63521)"} true;
L1:

    // $t13 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.users($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:45+13
    assume {:print "$at(2,63508,63521)"} true;
    $t13 := $t0->$users;

    // $t14 := vector::borrow<0x42::access_control_comprehensive::UserRoleAssignment>($t13, $t4) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:30+32
    call $t14 := $1_vector_borrow'$42_access_control_comprehensive_UserRoleAssignment'($t13, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,63493,63525)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // trace_local[assignment]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1614:30+32
    assume {:print "$track_local(3,27,5):", $t14} $t14 == $t14;

    // $t15 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.user($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:17+15
    assume {:print "$at(2,63544,63559)"} true;
    $t15 := $t14->$user;

    // $t16 := ==($t15, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:17+23
    $t16 := $IsEqual'address'($t15, $t1);

    // if ($t16) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:13+435
    if ($t16) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:50+22
    assume {:print "$at(2,63621,63643)"} true;
L3:

    // $t17 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.expires_at($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:50+22
    assume {:print "$at(2,63621,63643)"} true;
    $t17 := $t14->$expires_at;

    // $t18 := opaque begin: option::is_some<u64>($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39
    assume $IsValid'bool'($t18);

    // assume Eq<bool>($t18, option::spec_is_some<u64>($t17)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39
    assume $IsEqual'bool'($t18, $1_option_spec_is_some'u64'($t17));

    // $t18 := opaque end: option::is_some<u64>($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:34+39

    // if ($t18) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1616:30+235
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:50+22
    assume {:print "$at(2,63698,63720)"} true;
L5:

    // $t19 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.expires_at($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:50+22
    assume {:print "$at(2,63698,63720)"} true;
    $t19 := $t14->$expires_at;

    // $t20 := opaque begin: option::borrow<u64>($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38

    // assume Identical($t27, option::spec_is_none<u64>($t19)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume ($t27 == $1_option_spec_is_none'u64'($t19));

    // if ($t27) goto L15 else goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    if ($t27) { goto L15; } else { goto L14; }

    // label L15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
L15:

    // assume And(option::spec_is_none<u64>($t19), Eq(262145, $t8)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume {:print "$at(2,63683,63721)"} true;
    assume ($1_option_spec_is_none'u64'($t19) && $IsEqual'num'(262145, $t8));

    // trace_abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume {:print "$at(2,63683,63721)"} true;
    assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    goto L13;

    // label L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
L14:

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume {:print "$at(2,63683,63721)"} true;
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, option::spec_borrow<u64>($t19)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38
    assume $IsEqual'u64'($t20, $1_option_spec_borrow'u64'($t19));

    // $t20 := opaque end: option::borrow<u64>($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:35+38

    // trace_local[$t7]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1617:34+39
    assume {:print "$track_local(3,27,6):", $t20} $t20 == $t20;

    // $t21 := <($t2, $t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1618:21+21
    assume {:print "$at(2,63744,63765)"} true;
    call $t21 := $Lt($t2, $t20);

    // $t7 := $t21 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1618:21+21
    $t7 := $t21;

    // trace_local[$t6]($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1618:21+21
    assume {:print "$track_local(3,27,7):", $t21} $t21 == $t21;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
L10:

    // if ($t7) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
    if ($t7) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:39+10
    assume {:print "$at(2,63908,63918)"} true;
L7:

    // $t26 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:39+10
    assume {:print "$at(2,63908,63918)"} true;
    $t26 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t22 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.role_id($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:51+18
    $t22 := $t14->$role_id;

    // vector::push_back<u64>($t26, $t22) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:21+49
    call $t26 := $1_vector_push_back'u64'($t26, $t22);
    if ($abort_flag) {
        assume {:print "$at(2,63890,63939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // write_back[LocalRoot($t3)@]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:21+49
    $t3 := $Dereference($t26);

    // trace_local[roles]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1623:21+49
    assume {:print "$track_local(3,27,3):", $t3} $t3 == $t3;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:17+1
    assume {:print "$at(2,63994,63995)"} true;
L9:

    // $t23 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:21+1
    assume {:print "$at(2,63998,63999)"} true;
    $t23 := 1;
    assume $IsValid'u64'($t23);

    // $t24 := +($t4, $t23) on_abort goto L13 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:17+5
    call $t24 := $AddU64($t4, $t23);
    if ($abort_flag) {
        assume {:print "$at(2,63994,63999)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(3,27):", $t8} $t8 == $t8;
        goto L13;
    }

    // trace_local[i]($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1626:13+9
    assume {:print "$track_local(3,27,4):", $t24} $t24 == $t24;

    // goto L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    assume {:print "$at(2,63419,64011)"} true;
    goto L11;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
L6:

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1622:17+104
    assume {:print "$at(2,63855,63959)"} true;
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    assume {:print "$at(2,63813,63817)"} true;
L4:

    // $t25 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    assume {:print "$at(2,63813,63817)"} true;
    $t25 := true;
    assume $IsValid'bool'($t25);

    // $t7 := $t25 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    $t7 := $t25;

    // trace_local[$t6]($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    assume {:print "$track_local(3,27,7):", $t25} $t25 == $t25;

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1620:21+4
    goto L10;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:13+435
    assume {:print "$at(2,63540,63975)"} true;
L2:

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1615:13+435
    assume {:print "$at(2,63540,63975)"} true;
    goto L9;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    assume {:print "$at(2,63419,64011)"} true;
L0:

    // $t28 := move($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1628:9+5
    assume {:print "$at(2,64022,64027)"} true;
    $t28 := $t3;

    // trace_return[0]($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:108+689
    assume {:print "$at(2,63345,64034)"} true;
    assume {:print "$track_return(3,27,0):", $t28} $t28 == $t28;

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1610:108+689
    goto L12;

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    // Loop invariant checking block for the loop started with header: L8
    assume {:print "$at(2,63419,64011)"} true;
L11:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1613:9+592
    assume {:print "$at(2,63419,64011)"} true;
    assume false;
    return;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
    assume {:print "$at(2,64033,64034)"} true;
L12:

    // return $t28 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
    assume {:print "$at(2,64033,64034)"} true;
    $ret0 := $t28;
    return;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
L13:

    // abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1629:5+1
    assume {:print "$at(2,64033,64034)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::get_user_max_role_level [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:5+732
procedure {:timeLimit 40} $42_access_control_comprehensive_get_user_max_role_level$verify(_$t0: $42_access_control_comprehensive_AccessControlSystem, _$t1: int, _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: Vec (int);
    var $t5: int;
    var $t6: $42_access_control_comprehensive_Role;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: Vec ($42_access_control_comprehensive_Role);
    var $t15: int;
    var $t16: Vec ($42_access_control_comprehensive_Role);
    var $t17: int;
    var $t18: bool;
    var $t19: Vec ($42_access_control_comprehensive_Role);
    var $t20: $42_access_control_comprehensive_Role;
    var $t21: int;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t0: $42_access_control_comprehensive_AccessControlSystem;
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_AccessControlSystem': $42_access_control_comprehensive_AccessControlSystem;
    var $temp_0'$42_access_control_comprehensive_Role': $42_access_control_comprehensive_Role;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: select access_control_comprehensive::AccessControlSystem.users($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:5+1
    assume {:print "$at(2,64478,64479)"} true;
    assume ($IsValid'$42_access_control_comprehensive_AccessControlSystem'($t0) && (var $range_0 := $t0->$users; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:5+1
    assume $IsValid'u64'($t2);

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:5+1
    assume {:print "$track_local(3,28,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:5+1
    assume {:print "$track_local(3,28,1):", $t1} $t1 == $t1;

    // trace_local[current_time]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:5+1
    assume {:print "$track_local(3,28,2):", $t2} $t2 == $t2;

    // $t7 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1644:25+1
    assume {:print "$at(2,64601,64602)"} true;
    $t7 := 0;
    assume $IsValid'u8'($t7);

    // trace_local[max_level]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1644:25+1
    assume {:print "$track_local(3,28,3):", $t7} $t7 == $t7;

    // $t8 := access_control_comprehensive::get_active_user_roles($t0, $t1, $t2) on_abort goto L10 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1645:26+49
    assume {:print "$at(2,64630,64679)"} true;
    call $t8 := $42_access_control_comprehensive_get_active_user_roles($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,64630,64679)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(3,28):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[user_roles]($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1645:26+49
    assume {:print "$track_local(3,28,4):", $t8} $t8 == $t8;

    // $t10 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1647:17+1
    assume {:print "$at(2,64700,64701)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_local[current_time]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1647:17+1
    assume {:print "$track_local(3,28,2):", $t10} $t10 == $t10;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume {:print "$at(2,64719,64720)"} true;
L7:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume {:print "$at(2,64719,64720)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u64'($t2);

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u8'($t3);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'bool'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u64'($t13);

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t14;

    // assume WellFormed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'vec'$42_access_control_comprehensive_Role''($t14);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u64'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'vec'$42_access_control_comprehensive_Role''($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t19;

    // assume WellFormed($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'vec'$42_access_control_comprehensive_Role''($t19);

    // $t20 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'$42_access_control_comprehensive_Role'($t20);

    // $t21 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t21;

    // assume WellFormed($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u8'($t21);

    // $t22 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t22;

    // assume WellFormed($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'bool'($t22);

    // $t23 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t23;

    // assume WellFormed($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u8'($t23);

    // $t24 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t24;

    // assume WellFormed($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u64'($t24);

    // $t25 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    havoc $t25;

    // assume WellFormed($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume $IsValid'u64'($t25);

    // trace_local[current_time]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume {:print "$info(): enter loop, variable(s) current_time, max_level havocked and reassigned"} true;
    assume {:print "$track_local(3,28,2):", $t2} $t2 == $t2;

    // trace_local[max_level]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume {:print "$track_local(3,28,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+1
    assume !$abort_flag;

    // $t11 := vector::length<u64>($t8) on_abort goto L10 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:20+27
    call $t11 := $1_vector_length'u64'($t8);
    if ($abort_flag) {
        assume {:print "$at(2,64723,64750)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(3,28):", $t9} $t9 == $t9;
        goto L10;
    }

    // $t12 := <($t2, $t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:16+31
    call $t12 := $Lt($t2, $t11);

    // if ($t12) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:9+469
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1649:43+11
    assume {:print "$at(2,64797,64808)"} true;
L1:

    // $t13 := vector::borrow<u64>($t8, $t2) on_abort goto L10 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1649:28+30
    assume {:print "$at(2,64782,64812)"} true;
    call $t13 := $1_vector_borrow'u64'($t8, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,64782,64812)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(3,28):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[$t10]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1649:27+31
    assume {:print "$track_local(3,28,5):", $t13} $t13 == $t13;

    // $t14 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.roles($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1650:50+13
    assume {:print "$at(2,64864,64877)"} true;
    $t14 := $t0->$roles;

    // $t15 := access_control_comprehensive::find_role_index_by_id($t14, $t13) on_abort goto L10 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1650:28+45
    call $t15 := $42_access_control_comprehensive_find_role_index_by_id($t14, $t13);
    if ($abort_flag) {
        assume {:print "$at(2,64842,64887)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(3,28):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[$t10]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1650:28+45
    assume {:print "$track_local(3,28,5):", $t15} $t15 == $t15;

    // $t16 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.roles($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1651:43+13
    assume {:print "$at(2,64932,64945)"} true;
    $t16 := $t0->$roles;

    // $t17 := vector::length<0x42::access_control_comprehensive::Role>($t16) on_abort goto L10 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1651:28+29
    call $t17 := $1_vector_length'$42_access_control_comprehensive_Role'($t16);
    if ($abort_flag) {
        assume {:print "$at(2,64917,64946)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(3,28):", $t9} $t9 == $t9;
        goto L10;
    }

    // $t18 := <($t15, $t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1651:17+40
    call $t18 := $Lt($t15, $t17);

    // if ($t18) goto L2 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1651:13+243
    if ($t18) { goto L2; } else { goto L4; }

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1652:43+13
    assume {:print "$at(2,64993,65006)"} true;
L2:

    // $t19 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.roles($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1652:43+13
    assume {:print "$at(2,64993,65006)"} true;
    $t19 := $t0->$roles;

    // $t20 := vector::borrow<0x42::access_control_comprehensive::Role>($t19, $t15) on_abort goto L10 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1652:28+39
    call $t20 := $1_vector_borrow'$42_access_control_comprehensive_Role'($t19, $t15);
    if ($abort_flag) {
        assume {:print "$at(2,64978,65017)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(3,28):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[role]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1652:28+39
    assume {:print "$track_local(3,28,6):", $t20} $t20 == $t20;

    // $t21 := get_field<0x42::access_control_comprehensive::Role>.level($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1653:21+10
    assume {:print "$at(2,65040,65050)"} true;
    $t21 := $t20->$level;

    // $t22 := >($t21, $t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1653:21+22
    call $t22 := $Gt($t21, $t3);

    // if ($t22) goto L6 else goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1653:17+93
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1654:33+10
    assume {:print "$at(2,65099,65109)"} true;
L6:

    // $t23 := get_field<0x42::access_control_comprehensive::Role>.level($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1654:33+10
    assume {:print "$at(2,65099,65109)"} true;
    $t23 := $t20->$level;

    // trace_local[max_level]($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1654:21+22
    assume {:print "$track_local(3,28,3):", $t23} $t23 == $t23;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1657:17+1
    assume {:print "$at(2,65164,65165)"} true;
L4:

    // $t24 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1657:21+1
    assume {:print "$at(2,65168,65169)"} true;
    $t24 := 1;
    assume $IsValid'u64'($t24);

    // $t25 := +($t2, $t24) on_abort goto L10 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1657:17+5
    call $t25 := $AddU64($t2, $t24);
    if ($abort_flag) {
        assume {:print "$at(2,65164,65169)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(3,28):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[current_time]($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1657:13+9
    assume {:print "$track_local(3,28,2):", $t25} $t25 == $t25;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:9+469
    assume {:print "$at(2,64712,65181)"} true;
    goto L8;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1653:17+93
    assume {:print "$at(2,65036,65129)"} true;
L5:

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1653:17+93
    assume {:print "$at(2,65036,65129)"} true;
    goto L4;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:9+469
    assume {:print "$at(2,64712,65181)"} true;
L0:

    // trace_return[0]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:101+636
    assume {:print "$at(2,64574,65210)"} true;
    assume {:print "$track_return(3,28,0):", $t3} $t3 == $t3;

    // $t26 := move($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:101+636
    $t26 := $t3;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1643:101+636
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:9+469
    // Loop invariant checking block for the loop started with header: L7
    assume {:print "$at(2,64712,65181)"} true;
L8:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1648:9+469
    assume {:print "$at(2,64712,65181)"} true;
    assume false;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1661:5+1
    assume {:print "$at(2,65209,65210)"} true;
L9:

    // return $t26 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1661:5+1
    assume {:print "$at(2,65209,65210)"} true;
    $ret0 := $t26;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1661:5+1
L10:

    // abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1661:5+1
    assume {:print "$at(2,65209,65210)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::has_approved [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+127
procedure {:inline 1} $42_access_control_comprehensive_has_approved(_$t0: Vec (int), _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: Vec (int);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[approvals]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+1
    assume {:print "$at(2,62091,62092)"} true;
    assume {:print "$track_local(3,30,0):", $t0} $t0 == $t0;

    // trace_local[approver]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+1
    assume {:print "$track_local(3,30,1):", $t1} $t1 == $t1;

    // $t2 := vector::contains<address>($t0, $t1) on_abort goto L2 with $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1578:9+38
    assume {:print "$at(2,62173,62211)"} true;
    call $t2 := $1_vector_contains'address'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,62173,62211)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,30):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1578:9+38
    assume {:print "$track_return(3,30,0):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
    assume {:print "$at(2,62217,62218)"} true;
L1:

    // return $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
    assume {:print "$at(2,62217,62218)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
L2:

    // abort($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
    assume {:print "$at(2,62217,62218)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::has_approved [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+127
procedure {:timeLimit 40} $42_access_control_comprehensive_has_approved$verify(_$t0: Vec (int), _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: Vec (int);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+1
    assume {:print "$at(2,62091,62092)"} true;
    assume $IsValid'vec'address''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+1
    assume $IsValid'address'($t1);

    // trace_local[approvals]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+1
    assume {:print "$track_local(3,30,0):", $t0} $t0 == $t0;

    // trace_local[approver]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1577:5+1
    assume {:print "$track_local(3,30,1):", $t1} $t1 == $t1;

    // $t2 := vector::contains<address>($t0, $t1) on_abort goto L2 with $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1578:9+38
    assume {:print "$at(2,62173,62211)"} true;
    call $t2 := $1_vector_contains'address'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,62173,62211)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,30):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1578:9+38
    assume {:print "$track_return(3,30,0):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
    assume {:print "$at(2,62217,62218)"} true;
L1:

    // return $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
    assume {:print "$at(2,62217,62218)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
L2:

    // abort($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1579:5+1
    assume {:print "$at(2,62217,62218)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::initialize_protocol_secure [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:379:5+507
procedure {:timeLimit 40} $42_access_control_comprehensive_initialize_protocol_secure$verify(_$t0: $42_access_control_comprehensive_ProtocolWitness, _$t1: int) returns ($ret0: $42_access_control_comprehensive_ProtocolState)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $42_access_control_comprehensive_ProtocolState;
    var $t9: int;
    var $t0: $42_access_control_comprehensive_ProtocolWitness;
    var $t1: int;
    var $temp_0'$42_access_control_comprehensive_ProtocolState': $42_access_control_comprehensive_ProtocolState;
    var $temp_0'$42_access_control_comprehensive_ProtocolWitness': $42_access_control_comprehensive_ProtocolWitness;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:379:5+1
    assume {:print "$at(2,15780,15781)"} true;
    assume $IsValid'$42_access_control_comprehensive_ProtocolWitness'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:379:5+1
    assume $IsValid'address'($t1);

    // assume Neq<address>($t1, 0x0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:398:9+23
    assume {:print "$at(2,16338,16361)"} true;
    assume !$IsEqual'address'($t1, 0);

    // trace_local[witness]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:379:5+1
    assume {:print "$at(2,15780,15781)"} true;
    assume {:print "$track_local(3,31,0):", $t0} $t0 == $t0;

    // trace_local[admin]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:379:5+1
    assume {:print "$track_local(3,31,1):", $t1} $t1 == $t1;

    // $t2 := unpack 0x42::access_control_comprehensive::ProtocolWitness($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:384:13+18
    assume {:print "$at(2,15964,15982)"} true;
    $t2 := $t0->$dummy_field;

    // drop($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:384:13+18

    // $t3 := 0x0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:387:26+4
    assume {:print "$at(2,16095,16099)"} true;
    $t3 := 0;
    assume $IsValid'address'($t3);

    // $t4 := !=($t1, $t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:387:17+13
    $t4 := !$IsEqual'address'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:387:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:390:26+4
    assume {:print "$at(2,16171,16175)"} true;
L1:

    // $t5 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:390:26+4
    assume {:print "$at(2,16171,16175)"} true;
    $t5 := true;
    assume $IsValid'bool'($t5);

    // $t6 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:392:27+7
    assume {:print "$at(2,16224,16231)"} true;
    $t6 := 1000000;
    assume $IsValid'u64'($t6);

    // $t7 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:393:34+1
    assume {:print "$at(2,16267,16268)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := pack 0x42::access_control_comprehensive::ProtocolState($t5, $t1, $t6, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:389:9+151
    assume {:print "$at(2,16129,16280)"} true;
    $t8 := $42_access_control_comprehensive_ProtocolState($t5, $t1, $t6, $t7);

    // trace_return[0]($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:382:22+387
    assume {:print "$at(2,15900,16287)"} true;
    assume {:print "$track_return(3,31,0):", $t8} $t8 == $t8;

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:382:22+387
    goto L2;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:387:32+14
    assume {:print "$at(2,16101,16115)"} true;
L0:

    // $t9 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:387:32+14
    assume {:print "$at(2,16101,16115)"} true;
    $t9 := 3001;
    assume $IsValid'u64'($t9);

    // trace_abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:387:9+6
    assume {:print "$at(2,16078,16084)"} true;
    assume {:print "$track_abort(3,31):", $t9} $t9 == $t9;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:387:9+6
    goto L3;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:395:5+1
    assume {:print "$at(2,16286,16287)"} true;
L2:

    // assert Not(Eq<address>($t1, 0x0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:405:9+44
    assume {:print "$at(2,16559,16603)"} true;
    assert {:msg "assert_failed(2,16559,16603): function does not abort under this condition"}
      !$IsEqual'address'($t1, 0);

    // assert Eq<bool>(select access_control_comprehensive::ProtocolState.initialized<0x42::access_control_comprehensive::ProtocolState>($t8), true) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:400:9+35
    assume {:print "$at(2,16373,16408)"} true;
    assert {:msg "assert_failed(2,16373,16408): post-condition does not hold"}
      $IsEqual'bool'($t8->$initialized, true);

    // assert Eq<address>(select access_control_comprehensive::ProtocolState.admin<0x42::access_control_comprehensive::ProtocolState>($t8), $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:401:9+30
    assume {:print "$at(2,16418,16448)"} true;
    assert {:msg "assert_failed(2,16418,16448): post-condition does not hold"}
      $IsEqual'address'($t8->$admin, $t1);

    // assert Eq<u64>(select access_control_comprehensive::ProtocolState.total_supply<0x42::access_control_comprehensive::ProtocolState>($t8), 1000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:402:9+39
    assume {:print "$at(2,16458,16497)"} true;
    assert {:msg "assert_failed(2,16458,16497): post-condition does not hold"}
      $IsEqual'u64'($t8->$total_supply, 1000000);

    // assert Eq<u64>(select access_control_comprehensive::ProtocolState.capabilities_issued<0x42::access_control_comprehensive::ProtocolState>($t8), 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:403:9+40
    assume {:print "$at(2,16507,16547)"} true;
    assert {:msg "assert_failed(2,16507,16547): post-condition does not hold"}
      $IsEqual'u64'($t8->$capabilities_issued, 0);

    // return $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:403:9+40
    $ret0 := $t8;
    return;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:395:5+1
    assume {:print "$at(2,16286,16287)"} true;
L3:

    // assert Eq<address>($t1, 0x0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:397:5+315
    assume {:print "$at(2,16295,16610)"} true;
    assert {:msg "assert_failed(2,16295,16610): abort not covered by any of the `aborts_if` clauses"}
      $IsEqual'address'($t1, 0);

    // assert And(Eq<address>($t1, 0x0), Eq(3001, $t9)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:397:5+315
    assert {:msg "assert_failed(2,16295,16610): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($IsEqual'address'($t1, 0) && $IsEqual'num'(3001, $t9));

    // abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:397:5+315
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::initialize_protocol_vulnerable [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:318:5+850
procedure {:inline 1} $42_access_control_comprehensive_initialize_protocol_vulnerable(_$t0: $42_access_control_comprehensive_ProtocolWitness, _$t1: int) returns ($ret0: $42_access_control_comprehensive_ProtocolState)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $42_access_control_comprehensive_ProtocolState;
    var $t0: $42_access_control_comprehensive_ProtocolWitness;
    var $t1: int;
    var $temp_0'$42_access_control_comprehensive_ProtocolState': $42_access_control_comprehensive_ProtocolState;
    var $temp_0'$42_access_control_comprehensive_ProtocolWitness': $42_access_control_comprehensive_ProtocolWitness;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[_witness]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:318:5+1
    assume {:print "$at(2,13207,13208)"} true;
    assume {:print "$track_local(3,32,0):", $t0} $t0 == $t0;

    // trace_local[admin]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:318:5+1
    assume {:print "$track_local(3,32,1):", $t1} $t1 == $t1;

    // $t2 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:333:26+4
    assume {:print "$at(2,13941,13945)"} true;
    $t2 := true;
    assume $IsValid'bool'($t2);

    // $t3 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:335:27+7
    assume {:print "$at(2,13994,14001)"} true;
    $t3 := 1000000;
    assume $IsValid'u64'($t3);

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:336:34+1
    assume {:print "$at(2,14037,14038)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := pack 0x42::access_control_comprehensive::ProtocolState($t2, $t1, $t3, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:332:9+151
    assume {:print "$at(2,13899,14050)"} true;
    $t5 := $42_access_control_comprehensive_ProtocolState($t2, $t1, $t3, $t4);

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:332:9+151
    assume {:print "$track_return(3,32,0):", $t5} $t5 == $t5;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:338:5+1
    assume {:print "$at(2,14056,14057)"} true;
L1:

    // return $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:338:5+1
    assume {:print "$at(2,14056,14057)"} true;
    $ret0 := $t5;
    return;

}

// fun access_control_comprehensive::is_capability_expired [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+296
procedure {:inline 1} $42_access_control_comprehensive_is_capability_expired(_$t0: $42_access_control_comprehensive_AdminCapability, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: $1_option_Option'u64';
    var $t5: bool;
    var $t6: $1_option_Option'u64';
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t0: $42_access_control_comprehensive_AdminCapability;
    var $t1: int;
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[capability]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+1
    assume {:print "$at(2,61005,61006)"} true;
    assume {:print "$track_local(3,33,0):", $t0} $t0 == $t0;

    // trace_local[current_time]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+1
    assume {:print "$track_local(3,33,1):", $t1} $t1 == $t1;

    // $t4 := get_field<0x42::access_control_comprehensive::AdminCapability>.expires_at($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:29+22
    assume {:print "$at(2,61117,61139)"} true;
    $t4 := $t0->$expires_at;

    // $t5 := opaque begin: option::is_some<u64>($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::spec_is_some<u64>($t4)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39
    assume $IsEqual'bool'($t5, $1_option_spec_is_some'u64'($t4));

    // $t5 := opaque end: option::is_some<u64>($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:42+22
    assume {:print "$at(2,61186,61208)"} true;
L1:

    // $t6 := get_field<0x42::access_control_comprehensive::AdminCapability>.expires_at($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:42+22
    assume {:print "$at(2,61186,61208)"} true;
    $t6 := $t0->$expires_at;

    // $t7 := opaque begin: option::borrow<u64>($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38

    // assume Identical($t8, option::spec_is_none<u64>($t6)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume ($t8 == $1_option_spec_is_none'u64'($t6));

    // if ($t8) goto L6 else goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
L6:

    // assume And(option::spec_is_none<u64>($t6), Eq(262145, $t9)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume {:print "$at(2,61171,61209)"} true;
    assume ($1_option_spec_is_none'u64'($t6) && $IsEqual'num'(262145, $t9));

    // trace_abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume {:print "$at(2,61171,61209)"} true;
    assume {:print "$track_abort(3,33):", $t9} $t9 == $t9;

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    goto L4;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
L5:

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume {:print "$at(2,61171,61209)"} true;
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::spec_borrow<u64>($t6)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume $IsEqual'u64'($t7, $1_option_spec_borrow'u64'($t6));

    // $t7 := opaque end: option::borrow<u64>($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38

    // trace_local[expiry]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:26+39
    assume {:print "$track_local(3,33,2):", $t7} $t7 == $t7;

    // $t10 := >=($t1, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1547:13+22
    assume {:print "$at(2,61224,61246)"} true;
    call $t10 := $Ge($t1, $t7);

    // $t3 := $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1547:13+22
    $t3 := $t10;

    // trace_local[$t3]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1547:13+22
    assume {:print "$track_local(3,33,3):", $t10} $t10 == $t10;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    assume {:print "$at(2,61097,61294)"} true;
L2:

    // trace_return[0]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    assume {:print "$at(2,61097,61294)"} true;
    assume {:print "$track_return(3,33,0):", $t3} $t3 == $t3;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    assume {:print "$at(2,61278,61283)"} true;
L0:

    // $t11 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    assume {:print "$at(2,61278,61283)"} true;
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t3 := $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    $t3 := $t11;

    // trace_local[$t3]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    assume {:print "$track_local(3,33,3):", $t11} $t11 == $t11;

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    goto L2;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
    assume {:print "$at(2,61300,61301)"} true;
L3:

    // return $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
    assume {:print "$at(2,61300,61301)"} true;
    $ret0 := $t3;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
L4:

    // abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
    assume {:print "$at(2,61300,61301)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::is_capability_expired [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+296
procedure {:timeLimit 40} $42_access_control_comprehensive_is_capability_expired$verify(_$t0: $42_access_control_comprehensive_AdminCapability, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: $1_option_Option'u64';
    var $t5: bool;
    var $t6: $1_option_Option'u64';
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t0: $42_access_control_comprehensive_AdminCapability;
    var $t1: int;
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($t0))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+1
    assume {:print "$at(2,61005,61006)"} true;
    assume ($IsValid'$42_access_control_comprehensive_AdminCapability'($t0) && (LenVec($t0->$expires_at->$vec) <= 1));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+1
    assume $IsValid'u64'($t1);

    // trace_local[capability]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+1
    assume {:print "$track_local(3,33,0):", $t0} $t0 == $t0;

    // trace_local[current_time]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1544:5+1
    assume {:print "$track_local(3,33,1):", $t1} $t1 == $t1;

    // $t4 := get_field<0x42::access_control_comprehensive::AdminCapability>.expires_at($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:29+22
    assume {:print "$at(2,61117,61139)"} true;
    $t4 := $t0->$expires_at;

    // $t5 := opaque begin: option::is_some<u64>($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, option::spec_is_some<u64>($t4)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39
    assume $IsEqual'bool'($t5, $1_option_spec_is_some'u64'($t4));

    // $t5 := opaque end: option::is_some<u64>($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:13+39

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:42+22
    assume {:print "$at(2,61186,61208)"} true;
L1:

    // $t6 := get_field<0x42::access_control_comprehensive::AdminCapability>.expires_at($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:42+22
    assume {:print "$at(2,61186,61208)"} true;
    $t6 := $t0->$expires_at;

    // $t7 := opaque begin: option::borrow<u64>($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38

    // assume Identical($t8, option::spec_is_none<u64>($t6)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume ($t8 == $1_option_spec_is_none'u64'($t6));

    // if ($t8) goto L6 else goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    if ($t8) { goto L6; } else { goto L5; }

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
L6:

    // assume And(option::spec_is_none<u64>($t6), Eq(262145, $t9)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume {:print "$at(2,61171,61209)"} true;
    assume ($1_option_spec_is_none'u64'($t6) && $IsEqual'num'(262145, $t9));

    // trace_abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume {:print "$at(2,61171,61209)"} true;
    assume {:print "$track_abort(3,33):", $t9} $t9 == $t9;

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    goto L4;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
L5:

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume {:print "$at(2,61171,61209)"} true;
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, option::spec_borrow<u64>($t6)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38
    assume $IsEqual'u64'($t7, $1_option_spec_borrow'u64'($t6));

    // $t7 := opaque end: option::borrow<u64>($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:27+38

    // trace_local[expiry]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1546:26+39
    assume {:print "$track_local(3,33,2):", $t7} $t7 == $t7;

    // $t10 := >=($t1, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1547:13+22
    assume {:print "$at(2,61224,61246)"} true;
    call $t10 := $Ge($t1, $t7);

    // $t3 := $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1547:13+22
    $t3 := $t10;

    // trace_local[$t3]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1547:13+22
    assume {:print "$track_local(3,33,3):", $t10} $t10 == $t10;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    assume {:print "$at(2,61097,61294)"} true;
L2:

    // trace_return[0]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    assume {:print "$at(2,61097,61294)"} true;
    assume {:print "$track_return(3,33,0):", $t3} $t3 == $t3;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1545:9+197
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    assume {:print "$at(2,61278,61283)"} true;
L0:

    // $t11 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    assume {:print "$at(2,61278,61283)"} true;
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t3 := $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    $t3 := $t11;

    // trace_local[$t3]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    assume {:print "$track_local(3,33,3):", $t11} $t11 == $t11;

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1549:13+5
    goto L2;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
    assume {:print "$at(2,61300,61301)"} true;
L3:

    // return $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
    assume {:print "$at(2,61300,61301)"} true;
    $ret0 := $t3;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
L4:

    // abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1551:5+1
    assume {:print "$at(2,61300,61301)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::is_capability_registered [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+325
procedure {:inline 1} $42_access_control_comprehensive_is_capability_registered(_$t0: $42_access_control_comprehensive_SystemState, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t5: int;
    var $t6: bool;
    var $t7: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t8: $42_access_control_comprehensive_AdminCapability;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: bool;
    var $t0: $42_access_control_comprehensive_SystemState;
    var $t1: int;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+1
    assume {:print "$at(2,60672,60673)"} true;
    assume {:print "$track_local(3,34,0):", $t0} $t0 == $t0;

    // trace_local[id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+1
    assume {:print "$track_local(3,34,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1535:17+1
    assume {:print "$at(2,60757,60758)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1535:17+1
    assume {:print "$track_local(3,34,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume {:print "$at(2,60776,60777)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume {:print "$at(2,60776,60777)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t4;

    // assume And(WellFormed($t4), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t4: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t4) && (var $range_0 := $t4; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'bool'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t7;

    // assume And(WellFormed($t7), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t7: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t7) && (var $range_0 := $t7; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t8;

    // assume And(WellFormed($t8), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($t8))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume ($IsValid'$42_access_control_comprehensive_AdminCapability'($t8) && (LenVec($t8->$expires_at->$vec) <= 1));

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,34,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume !$abort_flag;

    // $t4 := get_field<0x42::access_control_comprehensive::SystemState>.admin_capabilities($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:35+26
    $t4 := $t0->$admin_capabilities;

    // $t5 := vector::length<0x42::access_control_comprehensive::AdminCapability>($t4) on_abort goto L7 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:20+42
    call $t5 := $1_vector_length'$42_access_control_comprehensive_AdminCapability'($t4);
    if ($abort_flag) {
        assume {:print "$at(2,60780,60822)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,34):", $t13} $t13 == $t13;
        goto L7;
    }

    // $t6 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+46
    call $t6 := $Lt($t2, $t5);

    // if ($t6) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1537:38+26
    assume {:print "$at(2,60864,60890)"} true;
L1:

    // $t7 := get_field<0x42::access_control_comprehensive::SystemState>.admin_capabilities($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1537:38+26
    assume {:print "$at(2,60864,60890)"} true;
    $t7 := $t0->$admin_capabilities;

    // $t8 := vector::borrow<0x42::access_control_comprehensive::AdminCapability>($t7, $t2) on_abort goto L7 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1537:23+45
    call $t8 := $1_vector_borrow'$42_access_control_comprehensive_AdminCapability'($t7, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,60849,60894)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,34):", $t13} $t13 == $t13;
        goto L7;
    }

    // $t9 := get_field<0x42::access_control_comprehensive::AdminCapability>.id($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:17+6
    assume {:print "$at(2,60913,60919)"} true;
    $t9 := $t8->$id;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:17+12
    $t10 := $IsEqual'u64'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:13+29
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
L3:

    // $t14 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:38+4
    assume {:print "$at(2,60934,60938)"} true;
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
    assume {:print "$track_return(3,34,0):", $t14} $t14 == $t14;

    // $t15 := move($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
    $t15 := $t14;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:17+1
    assume {:print "$at(2,60957,60958)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:21+1
    assume {:print "$at(2,60961,60962)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,60957,60962)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,34):", $t13} $t13 == $t13;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:13+9
    assume {:print "$track_local(3,34,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    assume {:print "$at(2,60769,60974)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
L0:

    // $t16 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1541:9+5
    assume {:print "$at(2,60985,60990)"} true;
    $t16 := false;
    assume $IsValid'bool'($t16);

    // trace_return[0]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:71+259
    assume {:print "$at(2,60738,60997)"} true;
    assume {:print "$track_return(3,34,0):", $t16} $t16 == $t16;

    // $t15 := move($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:71+259
    $t15 := $t16;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:71+259
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,60769,60974)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    assume {:print "$at(2,60769,60974)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
    assume {:print "$at(2,60996,60997)"} true;
L6:

    // return $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
    assume {:print "$at(2,60996,60997)"} true;
    $ret0 := $t15;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
L7:

    // abort($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
    assume {:print "$at(2,60996,60997)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::is_capability_registered [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+325
procedure {:timeLimit 40} $42_access_control_comprehensive_is_capability_registered$verify(_$t0: $42_access_control_comprehensive_SystemState, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t5: int;
    var $t6: bool;
    var $t7: Vec ($42_access_control_comprehensive_AdminCapability);
    var $t8: $42_access_control_comprehensive_AdminCapability;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: bool;
    var $t16: bool;
    var $t0: $42_access_control_comprehensive_SystemState;
    var $t1: int;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall $elem: 0x42::access_control_comprehensive::AdminCapability: select access_control_comprehensive::SystemState.admin_capabilities($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+1
    assume {:print "$at(2,60672,60673)"} true;
    assume ($IsValid'$42_access_control_comprehensive_SystemState'($t0) && (var $range_0 := $t0->$admin_capabilities; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+1
    assume $IsValid'u64'($t1);

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+1
    assume {:print "$track_local(3,34,0):", $t0} $t0 == $t0;

    // trace_local[id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:5+1
    assume {:print "$track_local(3,34,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1535:17+1
    assume {:print "$at(2,60757,60758)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1535:17+1
    assume {:print "$track_local(3,34,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume {:print "$at(2,60776,60777)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume {:print "$at(2,60776,60777)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t4;

    // assume And(WellFormed($t4), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t4: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t4) && (var $range_0 := $t4; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'bool'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t7;

    // assume And(WellFormed($t7), forall $elem: 0x42::access_control_comprehensive::AdminCapability: $t7: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_AdminCapability''($t7) && (var $range_0 := $t7; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t8;

    // assume And(WellFormed($t8), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AdminCapability.expires_at($t8))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume ($IsValid'$42_access_control_comprehensive_AdminCapability'($t8) && (LenVec($t8->$expires_at->$vec) <= 1));

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(3,34,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+1
    assume !$abort_flag;

    // $t4 := get_field<0x42::access_control_comprehensive::SystemState>.admin_capabilities($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:35+26
    $t4 := $t0->$admin_capabilities;

    // $t5 := vector::length<0x42::access_control_comprehensive::AdminCapability>($t4) on_abort goto L7 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:20+42
    call $t5 := $1_vector_length'$42_access_control_comprehensive_AdminCapability'($t4);
    if ($abort_flag) {
        assume {:print "$at(2,60780,60822)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,34):", $t13} $t13 == $t13;
        goto L7;
    }

    // $t6 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:16+46
    call $t6 := $Lt($t2, $t5);

    // if ($t6) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1537:38+26
    assume {:print "$at(2,60864,60890)"} true;
L1:

    // $t7 := get_field<0x42::access_control_comprehensive::SystemState>.admin_capabilities($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1537:38+26
    assume {:print "$at(2,60864,60890)"} true;
    $t7 := $t0->$admin_capabilities;

    // $t8 := vector::borrow<0x42::access_control_comprehensive::AdminCapability>($t7, $t2) on_abort goto L7 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1537:23+45
    call $t8 := $1_vector_borrow'$42_access_control_comprehensive_AdminCapability'($t7, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,60849,60894)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,34):", $t13} $t13 == $t13;
        goto L7;
    }

    // $t9 := get_field<0x42::access_control_comprehensive::AdminCapability>.id($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:17+6
    assume {:print "$at(2,60913,60919)"} true;
    $t9 := $t8->$id;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:17+12
    $t10 := $IsEqual'u64'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:13+29
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
L3:

    // $t14 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:38+4
    assume {:print "$at(2,60934,60938)"} true;
    $t14 := true;
    assume $IsValid'bool'($t14);

    // trace_return[0]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
    assume {:print "$track_return(3,34,0):", $t14} $t14 == $t14;

    // $t15 := move($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
    $t15 := $t14;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1538:31+11
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:17+1
    assume {:print "$at(2,60957,60958)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:21+1
    assume {:print "$at(2,60961,60962)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,60957,60962)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,34):", $t13} $t13 == $t13;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1539:13+9
    assume {:print "$track_local(3,34,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    assume {:print "$at(2,60769,60974)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
L0:

    // $t16 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1541:9+5
    assume {:print "$at(2,60985,60990)"} true;
    $t16 := false;
    assume $IsValid'bool'($t16);

    // trace_return[0]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:71+259
    assume {:print "$at(2,60738,60997)"} true;
    assume {:print "$track_return(3,34,0):", $t16} $t16 == $t16;

    // $t15 := move($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:71+259
    $t15 := $t16;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1534:71+259
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,60769,60974)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1536:9+205
    assume {:print "$at(2,60769,60974)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
    assume {:print "$at(2,60996,60997)"} true;
L6:

    // return $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
    assume {:print "$at(2,60996,60997)"} true;
    $ret0 := $t15;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
L7:

    // abort($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1542:5+1
    assume {:print "$at(2,60996,60997)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::is_owner [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+115
procedure {:inline 1} $42_access_control_comprehensive_is_owner(_$t0: Vec (int), _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: Vec (int);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owners]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+1
    assume {:print "$at(2,61968,61969)"} true;
    assume {:print "$track_local(3,35,0):", $t0} $t0 == $t0;

    // trace_local[address]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+1
    assume {:print "$track_local(3,35,1):", $t1} $t1 == $t1;

    // $t2 := vector::contains<address>($t0, $t1) on_abort goto L2 with $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1574:9+34
    assume {:print "$at(2,62042,62076)"} true;
    call $t2 := $1_vector_contains'address'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,62042,62076)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,35):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1574:9+34
    assume {:print "$track_return(3,35,0):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
    assume {:print "$at(2,62082,62083)"} true;
L1:

    // return $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
    assume {:print "$at(2,62082,62083)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
L2:

    // abort($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
    assume {:print "$at(2,62082,62083)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::is_owner [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+115
procedure {:timeLimit 40} $42_access_control_comprehensive_is_owner$verify(_$t0: Vec (int), _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t0: Vec (int);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'vec'address'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+1
    assume {:print "$at(2,61968,61969)"} true;
    assume $IsValid'vec'address''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+1
    assume $IsValid'address'($t1);

    // trace_local[owners]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+1
    assume {:print "$track_local(3,35,0):", $t0} $t0 == $t0;

    // trace_local[address]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1573:5+1
    assume {:print "$track_local(3,35,1):", $t1} $t1 == $t1;

    // $t2 := vector::contains<address>($t0, $t1) on_abort goto L2 with $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1574:9+34
    assume {:print "$at(2,62042,62076)"} true;
    call $t2 := $1_vector_contains'address'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,62042,62076)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(3,35):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1574:9+34
    assume {:print "$track_return(3,35,0):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
    assume {:print "$at(2,62082,62083)"} true;
L1:

    // return $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
    assume {:print "$at(2,62082,62083)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
L2:

    // abort($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1575:5+1
    assume {:print "$at(2,62082,62083)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::remove_existing_user_role [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:5+446
procedure {:timeLimit 40} $42_access_control_comprehensive_remove_existing_user_role$verify(_$t0: $Mutation ($42_access_control_comprehensive_AccessControlSystem), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_AccessControlSystem))
{
    // declare local variables
    var $t3: int;
    var $t4: $42_access_control_comprehensive_UserRoleAssignment;
    var $t5: bool;
    var $t6: int;
    var $t7: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var $t8: int;
    var $t9: bool;
    var $t10: Vec ($42_access_control_comprehensive_UserRoleAssignment);
    var $t11: $42_access_control_comprehensive_UserRoleAssignment;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: $Mutation (Vec ($42_access_control_comprehensive_UserRoleAssignment));
    var $t21: $42_access_control_comprehensive_UserRoleAssignment;
    var $t0: $Mutation ($42_access_control_comprehensive_AccessControlSystem);
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_AccessControlSystem': $42_access_control_comprehensive_AccessControlSystem;
    var $temp_0'$42_access_control_comprehensive_UserRoleAssignment': $42_access_control_comprehensive_UserRoleAssignment;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: select access_control_comprehensive::AccessControlSystem.users($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:5+1
    assume {:print "$at(2,65530,65531)"} true;
    assume ($IsValid'$42_access_control_comprehensive_AccessControlSystem'($Dereference($t0)) && (var $range_0 := $Dereference($t0)->$users; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:5+1
    assume $IsValid'u64'($t2);

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:5+1
    $temp_0'$42_access_control_comprehensive_AccessControlSystem' := $Dereference($t0);
    assume {:print "$track_local(3,36,0):", $temp_0'$42_access_control_comprehensive_AccessControlSystem'} $temp_0'$42_access_control_comprehensive_AccessControlSystem' == $temp_0'$42_access_control_comprehensive_AccessControlSystem';

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:5+1
    assume {:print "$track_local(3,36,1):", $t1} $t1 == $t1;

    // trace_local[role_id]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:5+1
    assume {:print "$track_local(3,36,2):", $t2} $t2 == $t2;

    // $t6 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1674:17+1
    assume {:print "$at(2,65642,65643)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_local[i]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1674:17+1
    assume {:print "$track_local(3,36,3):", $t6} $t6 == $t6;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume {:print "$at(2,65661,65662)"} true;
L6:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume {:print "$at(2,65661,65662)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'u64'($t3);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'bool'($t5);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t7;

    // assume And(WellFormed($t7), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: $t7: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''($t7) && (var $range_0 := $t7; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'u64'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'bool'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t10;

    // assume And(WellFormed($t10), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: $t10: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_UserRoleAssignment''($t10) && (var $range_0 := $t10; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t11;

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($t11))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume ($IsValid'$42_access_control_comprehensive_UserRoleAssignment'($t11) && (LenVec($t11->$expires_at->$vec) <= 1));

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'address'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t14;

    // assume WellFormed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'u64'($t14);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'bool'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume $IsValid'bool'($t18);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume {:print "$info(): enter loop, variable(s) i, $t4 havocked and reassigned"} true;
    assume {:print "$track_local(3,36,3):", $t3} $t3 == $t3;

    // trace_local[$t4]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume {:print "$track_local(3,36,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+1
    assume !$abort_flag;

    // $t7 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.users($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:35+13
    $t7 := $Dereference($t0)->$users;

    // $t8 := vector::length<0x42::access_control_comprehensive::UserRoleAssignment>($t7) on_abort goto L10 with $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:20+29
    call $t8 := $1_vector_length'$42_access_control_comprehensive_UserRoleAssignment'($t7);
    if ($abort_flag) {
        assume {:print "$at(2,65665,65694)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(3,36):", $t19} $t19 == $t19;
        goto L10;
    }

    // $t9 := <($t3, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:16+33
    call $t9 := $Lt($t3, $t8);

    // if ($t9) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:9+314
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1676:45+13
    assume {:print "$at(2,65743,65756)"} true;
L1:

    // $t10 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.users($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1676:45+13
    assume {:print "$at(2,65743,65756)"} true;
    $t10 := $Dereference($t0)->$users;

    // $t11 := vector::borrow<0x42::access_control_comprehensive::UserRoleAssignment>($t10, $t3) on_abort goto L10 with $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1676:30+32
    call $t11 := $1_vector_borrow'$42_access_control_comprehensive_UserRoleAssignment'($t10, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,65728,65760)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(3,36):", $t19} $t19 == $t19;
        goto L10;
    }

    // trace_local[assignment]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1676:30+32
    assume {:print "$track_local(3,36,4):", $t11} $t11 == $t11;

    // $t12 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.user($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+15
    assume {:print "$at(2,65779,65794)"} true;
    $t12 := $t11->$user;

    // $t13 := ==($t12, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+23
    $t13 := $IsEqual'address'($t12, $t1);

    // if ($t13) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+56
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:44+18
L3:

    // $t14 := get_field<0x42::access_control_comprehensive::UserRoleAssignment>.role_id($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:44+18
    assume {:print "$at(2,65806,65824)"} true;
    $t14 := $t11->$role_id;

    // $t15 := ==($t14, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:44+29
    $t15 := $IsEqual'u64'($t14, $t2);

    // $t5 := $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:44+29
    $t5 := $t15;

    // trace_local[$t4]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:44+29
    assume {:print "$track_local(3,36,5):", $t15} $t15 == $t15;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:13+157
L7:

    // if ($t5) goto L5 else goto L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:13+157
    assume {:print "$at(2,65775,65932)"} true;
    if ($t5) { goto L5; } else { goto L11; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1678:32+17
    assume {:print "$at(2,65871,65888)"} true;
L5:

    // $t20 := borrow_field<0x42::access_control_comprehensive::AccessControlSystem>.users($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1678:32+17
    assume {:print "$at(2,65871,65888)"} true;
    $t20 := $ChildMutation($t0, 3, $Dereference($t0)->$users);

    // $t21 := vector::remove<0x42::access_control_comprehensive::UserRoleAssignment>($t20, $t3) on_abort goto L10 with $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1678:17+36
    call $t21,$t20 := $1_vector_remove'$42_access_control_comprehensive_UserRoleAssignment'($t20, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,65856,65892)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(3,36):", $t19} $t19 == $t19;
        goto L10;
    }

    // write_back[Reference($t0).users (vector<0x42::access_control_comprehensive::UserRoleAssignment>)]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1678:17+36
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_AccessControlSystem'_users($Dereference($t0), $Dereference($t20)));

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1678:17+36
    $temp_0'$42_access_control_comprehensive_AccessControlSystem' := $Dereference($t0);
    assume {:print "$track_local(3,36,0):", $temp_0'$42_access_control_comprehensive_AccessControlSystem'} $temp_0'$42_access_control_comprehensive_AccessControlSystem' == $temp_0'$42_access_control_comprehensive_AccessControlSystem';

    // drop($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1678:17+36

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1679:17+6
    assume {:print "$at(2,65911,65917)"} true;
    $temp_0'$42_access_control_comprehensive_AccessControlSystem' := $Dereference($t0);
    assume {:print "$track_local(3,36,0):", $temp_0'$42_access_control_comprehensive_AccessControlSystem'} $temp_0'$42_access_control_comprehensive_AccessControlSystem' == $temp_0'$42_access_control_comprehensive_AccessControlSystem';

    // assert forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: select access_control_comprehensive::AccessControlSystem.users($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$users; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1679:17+6
    assume {:print "$at(2,65911,65917)"} true;
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1681:17+1
    assume {:print "$at(2,65951,65952)"} true;
L4:

    // $t16 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1681:21+1
    assume {:print "$at(2,65955,65956)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // $t17 := +($t3, $t16) on_abort goto L10 with $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1681:17+5
    call $t17 := $AddU64($t3, $t16);
    if ($abort_flag) {
        assume {:print "$at(2,65951,65956)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(3,36):", $t19} $t19 == $t19;
        goto L10;
    }

    // trace_local[i]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1681:13+9
    assume {:print "$track_local(3,36,3):", $t17} $t17 == $t17;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:9+314
    assume {:print "$at(2,65654,65968)"} true;
    goto L8;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+56
    assume {:print "$at(2,65779,65835)"} true;
L2:

    // $t18 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+56
    assume {:print "$at(2,65779,65835)"} true;
    $t18 := false;
    assume $IsValid'bool'($t18);

    // $t5 := $t18 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+56
    $t5 := $t18;

    // trace_local[$t4]($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+56
    assume {:print "$track_local(3,36,5):", $t18} $t18 == $t18;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1677:17+56
    goto L7;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:9+314
    assume {:print "$at(2,65654,65968)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:9+314
    assume {:print "$at(2,65654,65968)"} true;

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:98+353
    assume {:print "$at(2,65623,65976)"} true;
    $temp_0'$42_access_control_comprehensive_AccessControlSystem' := $Dereference($t0);
    assume {:print "$track_local(3,36,0):", $temp_0'$42_access_control_comprehensive_AccessControlSystem'} $temp_0'$42_access_control_comprehensive_AccessControlSystem' == $temp_0'$42_access_control_comprehensive_AccessControlSystem';

    // assert forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: select access_control_comprehensive::AccessControlSystem.users($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$users; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1673:98+353
    assume {:print "$at(2,65623,65976)"} true;
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:9+314
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(2,65654,65968)"} true;
L8:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1675:9+314
    assume {:print "$at(2,65654,65968)"} true;
    assume false;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1683:5+1
    assume {:print "$at(2,65975,65976)"} true;
L9:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1683:5+1
    assume {:print "$at(2,65975,65976)"} true;
    $ret0 := $t0;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1683:5+1
L10:

    // abort($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1683:5+1
    assume {:print "$at(2,65975,65976)"} true;
    $abort_code := $t19;
    $abort_flag := true;
    return;

    // label L11 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L11:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

}

// fun access_control_comprehensive::revoke_all_access_grants [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1705:5+441
procedure {:timeLimit 40} $42_access_control_comprehensive_revoke_all_access_grants$verify(_$t0: $Mutation ($42_access_control_comprehensive_ResourceOwnership), _$t1: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_ResourceOwnership))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: Vec ($42_access_control_comprehensive_AccessGrant);
    var $t5: int;
    var $t6: bool;
    var $t7: Vec ($42_access_control_comprehensive_AccessGrant);
    var $t8: $42_access_control_comprehensive_AccessGrant;
    var $t9: int;
    var $t10: bool;
    var $t11: $42_access_control_comprehensive_AccessGrant;
    var $t12: int;
    var $t13: int;
    var $t14: $Mutation (Vec ($42_access_control_comprehensive_AccessGrant));
    var $t15: int;
    var $t0: $Mutation ($42_access_control_comprehensive_ResourceOwnership);
    var $t1: int;
    var $temp_0'$42_access_control_comprehensive_ResourceOwnership': $42_access_control_comprehensive_ResourceOwnership;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(forall $elem: 0x42::access_control_comprehensive::OwnershipRecord: select access_control_comprehensive::ResourceOwnership.ownership_records($t0): Le(Len<address>(select option::Option.vec(select access_control_comprehensive::OwnershipRecord.previous_owner($elem))), 1), forall $elem: 0x42::access_control_comprehensive::AccessGrant: select access_control_comprehensive::ResourceOwnership.access_grants($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1705:5+1
    assume {:print "$at(2,66720,66721)"} true;
    assume ($IsValid'$42_access_control_comprehensive_ResourceOwnership'($Dereference($t0)) && ((var $range_0 := $Dereference($t0)->$ownership_records; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$previous_owner->$vec) <= 1))))) && (var $range_2 := $Dereference($t0)->$access_grants; (forall $i_3: int :: InRangeVec($range_2, $i_3) ==> (var $elem := ReadVec($range_2, $i_3);
    ((LenVec($elem->$expires_at->$vec) <= 1)))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1705:5+1
    assume $IsValid'u64'($t1);

    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1705:5+1
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,37,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // trace_local[resource_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1705:5+1
    assume {:print "$track_local(3,37,1):", $t1} $t1 == $t1;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1706:17+1
    assume {:print "$at(2,66821,66822)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1706:17+1
    assume {:print "$track_local(3,37,2):", $t3} $t3 == $t3;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume {:print "$at(2,66840,66841)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume {:print "$at(2,66840,66841)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume $IsValid'u64'($t2);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t4;

    // assume And(WellFormed($t4), forall $elem: 0x42::access_control_comprehensive::AccessGrant: $t4: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_AccessGrant''($t4) && (var $range_0 := $t4; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume $IsValid'u64'($t5);

    // $t6 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume $IsValid'bool'($t6);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t7;

    // assume And(WellFormed($t7), forall $elem: 0x42::access_control_comprehensive::AccessGrant: $t7: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_AccessGrant''($t7) && (var $range_0 := $t7; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t8;

    // assume And(WellFormed($t8), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($t8))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume ($IsValid'$42_access_control_comprehensive_AccessGrant'($t8) && (LenVec($t8->$expires_at->$vec) <= 1));

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t11;

    // assume And(WellFormed($t11), Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($t11))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume ($IsValid'$42_access_control_comprehensive_AccessGrant'($t11) && (LenVec($t11->$expires_at->$vec) <= 1));

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume $IsValid'u64'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume $IsValid'u64'($t13);

    // $t0 := havoc[mut]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $temp_0'$42_access_control_comprehensive_ResourceOwnership';
    $t0 := $UpdateMutation($t0, $temp_0'$42_access_control_comprehensive_ResourceOwnership');

    // assume And(WellFormed($t0), And(forall $elem: 0x42::access_control_comprehensive::OwnershipRecord: select access_control_comprehensive::ResourceOwnership.ownership_records($t0): Le(Len<address>(select option::Option.vec(select access_control_comprehensive::OwnershipRecord.previous_owner($elem))), 1), forall $elem: 0x42::access_control_comprehensive::AccessGrant: select access_control_comprehensive::ResourceOwnership.access_grants($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume ($IsValid'$42_access_control_comprehensive_ResourceOwnership'($Dereference($t0)) && ((var $range_0 := $Dereference($t0)->$ownership_records; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$previous_owner->$vec) <= 1))))) && (var $range_2 := $Dereference($t0)->$access_grants; (forall $i_3: int :: InRangeVec($range_2, $i_3) ==> (var $elem := ReadVec($range_2, $i_3);
    ((LenVec($elem->$expires_at->$vec) <= 1)))))));

    // $t14 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    havoc $t14;

    // assume And(WellFormed($t14), forall $elem: 0x42::access_control_comprehensive::AccessGrant: $t14: Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume ($IsValid'vec'$42_access_control_comprehensive_AccessGrant''($Dereference($t14)) && (var $range_0 := $Dereference($t14); (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume {:print "$info(): enter loop, variable(s) ownership, i havocked and reassigned"} true;
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,37,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume {:print "$track_local(3,37,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+1
    assume !$abort_flag;

    // $t4 := get_field<0x42::access_control_comprehensive::ResourceOwnership>.access_grants($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:35+24
    $t4 := $Dereference($t0)->$access_grants;

    // $t5 := vector::length<0x42::access_control_comprehensive::AccessGrant>($t4) on_abort goto L7 with $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:20+40
    call $t5 := $1_vector_length'$42_access_control_comprehensive_AccessGrant'($t4);
    if ($abort_flag) {
        assume {:print "$at(2,66844,66884)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(3,37):", $t15} $t15 == $t15;
        goto L7;
    }

    // $t6 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:16+44
    call $t6 := $Lt($t2, $t5);

    // if ($t6) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:9+320
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1708:40+24
    assume {:print "$at(2,66928,66952)"} true;
L1:

    // $t7 := get_field<0x42::access_control_comprehensive::ResourceOwnership>.access_grants($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1708:40+24
    assume {:print "$at(2,66928,66952)"} true;
    $t7 := $Dereference($t0)->$access_grants;

    // $t8 := vector::borrow<0x42::access_control_comprehensive::AccessGrant>($t7, $t2) on_abort goto L7 with $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1708:25+43
    call $t8 := $1_vector_borrow'$42_access_control_comprehensive_AccessGrant'($t7, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,66913,66956)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(3,37):", $t15} $t15 == $t15;
        goto L7;
    }

    // $t9 := get_field<0x42::access_control_comprehensive::AccessGrant>.resource_id($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1709:17+17
    assume {:print "$at(2,66975,66992)"} true;
    $t9 := $t8->$resource_id;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1709:17+32
    $t10 := $IsEqual'u64'($t9, $t1);

    // if ($t10) goto L3 else goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1709:13+170
    if ($t10) { goto L3; } else { goto L8; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1710:32+28
    assume {:print "$at(2,67043,67071)"} true;
L3:

    // $t14 := borrow_field<0x42::access_control_comprehensive::ResourceOwnership>.access_grants($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1710:32+28
    assume {:print "$at(2,67043,67071)"} true;
    $t14 := $ChildMutation($t0, 2, $Dereference($t0)->$access_grants);

    // $t11 := vector::remove<0x42::access_control_comprehensive::AccessGrant>($t14, $t2) on_abort goto L7 with $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1710:17+47
    call $t11,$t14 := $1_vector_remove'$42_access_control_comprehensive_AccessGrant'($t14, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,67028,67075)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(3,37):", $t15} $t15 == $t15;
        goto L7;
    }

    // write_back[Reference($t0).access_grants (vector<0x42::access_control_comprehensive::AccessGrant>)]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1710:17+47
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_ResourceOwnership'_access_grants($Dereference($t0), $Dereference($t14)));

    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1710:17+47
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,37,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // drop($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1710:17+47

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1709:51+82
    assume {:print "$at(2,67009,67091)"} true;
    goto L5;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1712:21+1
    assume {:print "$at(2,67120,67121)"} true;
L2:

    // $t12 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1712:25+1
    assume {:print "$at(2,67124,67125)"} true;
    $t12 := 1;
    assume $IsValid'u64'($t12);

    // $t13 := +($t2, $t12) on_abort goto L7 with $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1712:21+5
    call $t13 := $AddU64($t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,67120,67125)"} true;
        $t15 := $abort_code;
        assume {:print "$track_abort(3,37):", $t15} $t15 == $t15;
        goto L7;
    }

    // trace_local[i]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1712:17+9
    assume {:print "$track_local(3,37,2):", $t13} $t13 == $t13;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1712:17+9
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:9+320
    assume {:print "$at(2,66833,67153)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:9+320
    assume {:print "$at(2,66833,67153)"} true;

    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1705:87+359
    assume {:print "$at(2,66802,67161)"} true;
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,37,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // assert forall $elem: 0x42::access_control_comprehensive::OwnershipRecord: select access_control_comprehensive::ResourceOwnership.ownership_records($t0): Le(Len<address>(select option::Option.vec(select access_control_comprehensive::OwnershipRecord.previous_owner($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assume {:print "$at(16,530,554)"} true;
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$ownership_records; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$previous_owner->$vec) <= 1)))));

    // assert forall $elem: 0x42::access_control_comprehensive::AccessGrant: select access_control_comprehensive::ResourceOwnership.access_grants($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::AccessGrant.expires_at($elem))), 1) at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    // data invariant at /home/arusinov/.move/https___github_com_aptos-labs_aptos-core_git_4ace64edcc41878fe348c07238cfe497a5cb6714/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:13:9+24
    assert {:msg "assert_failed(16,530,554): data invariant does not hold"}
      (var $range_0 := $Dereference($t0)->$access_grants; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1)))));

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1705:87+359
    assume {:print "$at(2,66802,67161)"} true;
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:9+320
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(2,66833,67153)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1707:9+320
    assume {:print "$at(2,66833,67153)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1715:5+1
    assume {:print "$at(2,67160,67161)"} true;
L6:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1715:5+1
    assume {:print "$at(2,67160,67161)"} true;
    $ret0 := $t0;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1715:5+1
L7:

    // abort($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1715:5+1
    assume {:print "$at(2,67160,67161)"} true;
    $abort_code := $t15;
    $abort_flag := true;
    return;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L2 at <internal>:1:1+10
    goto L2;

}

// fun access_control_comprehensive::role_has_permission [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:5+428
procedure {:timeLimit 40} $42_access_control_comprehensive_role_has_permission$verify(_$t0: $42_access_control_comprehensive_AccessControlSystem, _$t1: int, _$t2: int) returns ($ret0: bool)
{
    // declare local variables
    var $t3: int;
    var $t4: $42_access_control_comprehensive_RolePermission;
    var $t5: bool;
    var $t6: int;
    var $t7: Vec ($42_access_control_comprehensive_RolePermission);
    var $t8: int;
    var $t9: bool;
    var $t10: Vec ($42_access_control_comprehensive_RolePermission);
    var $t11: $42_access_control_comprehensive_RolePermission;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: bool;
    var $t22: bool;
    var $t0: $42_access_control_comprehensive_AccessControlSystem;
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_AccessControlSystem': $42_access_control_comprehensive_AccessControlSystem;
    var $temp_0'$42_access_control_comprehensive_RolePermission': $42_access_control_comprehensive_RolePermission;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), forall $elem: 0x42::access_control_comprehensive::UserRoleAssignment: select access_control_comprehensive::AccessControlSystem.users($t0): Le(Len<u64>(select option::Option.vec(select access_control_comprehensive::UserRoleAssignment.expires_at($elem))), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:5+1
    assume {:print "$at(2,64042,64043)"} true;
    assume ($IsValid'$42_access_control_comprehensive_AccessControlSystem'($t0) && (var $range_0 := $t0->$users; (forall $i_1: int :: InRangeVec($range_0, $i_1) ==> (var $elem := ReadVec($range_0, $i_1);
    ((LenVec($elem->$expires_at->$vec) <= 1))))));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:5+1
    assume $IsValid'u64'($t2);

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:5+1
    assume {:print "$track_local(3,38,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:5+1
    assume {:print "$track_local(3,38,1):", $t1} $t1 == $t1;

    // trace_local[permission_id]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:5+1
    assume {:print "$track_local(3,38,2):", $t2} $t2 == $t2;

    // $t6 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1632:17+1
    assume {:print "$at(2,64155,64156)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_local[i]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1632:17+1
    assume {:print "$track_local(3,38,3):", $t6} $t6 == $t6;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume {:print "$at(2,64174,64175)"} true;
L6:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume {:print "$at(2,64174,64175)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'u64'($t3);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'bool'($t5);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'vec'$42_access_control_comprehensive_RolePermission''($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'u64'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'bool'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'vec'$42_access_control_comprehensive_RolePermission''($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'$42_access_control_comprehensive_RolePermission'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'u64'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t14;

    // assume WellFormed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'u64'($t14);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'bool'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume $IsValid'bool'($t18);

    // trace_local[i]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume {:print "$info(): enter loop, variable(s) i, $t5 havocked and reassigned"} true;
    assume {:print "$track_local(3,38,3):", $t3} $t3 == $t3;

    // trace_local[$t5]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume {:print "$track_local(3,38,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+1
    assume !$abort_flag;

    // $t7 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.role_permissions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:35+24
    $t7 := $t0->$role_permissions;

    // $t8 := vector::length<0x42::access_control_comprehensive::RolePermission>($t7) on_abort goto L10 with $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:20+40
    call $t8 := $1_vector_length'$42_access_control_comprehensive_RolePermission'($t7);
    if ($abort_flag) {
        assume {:print "$at(2,64178,64218)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(3,38):", $t19} $t19 == $t19;
        goto L10;
    }

    // $t9 := <($t3, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:16+44
    call $t9 := $Lt($t3, $t8);

    // if ($t9) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:9+280
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1634:37+24
    assume {:print "$at(2,64259,64283)"} true;
L1:

    // $t10 := get_field<0x42::access_control_comprehensive::AccessControlSystem>.role_permissions($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1634:37+24
    assume {:print "$at(2,64259,64283)"} true;
    $t10 := $t0->$role_permissions;

    // $t11 := vector::borrow<0x42::access_control_comprehensive::RolePermission>($t10, $t3) on_abort goto L10 with $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1634:22+43
    call $t11 := $1_vector_borrow'$42_access_control_comprehensive_RolePermission'($t10, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,64244,64287)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(3,38):", $t19} $t19 == $t19;
        goto L10;
    }

    // trace_local[rp]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1634:22+43
    assume {:print "$track_local(3,38,4):", $t11} $t11 == $t11;

    // $t12 := get_field<0x42::access_control_comprehensive::RolePermission>.role_id($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+10
    assume {:print "$at(2,64306,64316)"} true;
    $t12 := $t11->$role_id;

    // $t13 := ==($t12, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+21
    $t13 := $IsEqual'u64'($t12, $t1);

    // if ($t13) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+58
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:42+16
L3:

    // $t14 := get_field<0x42::access_control_comprehensive::RolePermission>.permission_id($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:42+16
    assume {:print "$at(2,64331,64347)"} true;
    $t14 := $t11->$permission_id;

    // $t15 := ==($t14, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:42+33
    $t15 := $IsEqual'u64'($t14, $t2);

    // $t5 := $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:42+33
    $t5 := $t15;

    // trace_local[$t5]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:42+33
    assume {:print "$track_local(3,38,5):", $t15} $t15 == $t15;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:13+109
L7:

    // if ($t5) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:13+109
    assume {:print "$at(2,64302,64411)"} true;
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1636:17+11
    assume {:print "$at(2,64385,64396)"} true;
L5:

    // $t20 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1636:24+4
    assume {:print "$at(2,64392,64396)"} true;
    $t20 := true;
    assume $IsValid'bool'($t20);

    // trace_return[0]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1636:17+11
    assume {:print "$track_return(3,38,0):", $t20} $t20 == $t20;

    // $t21 := move($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1636:17+11
    $t21 := $t20;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1636:17+11
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1638:17+1
    assume {:print "$at(2,64430,64431)"} true;
L4:

    // $t16 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1638:21+1
    assume {:print "$at(2,64434,64435)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // $t17 := +($t3, $t16) on_abort goto L10 with $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1638:17+5
    call $t17 := $AddU64($t3, $t16);
    if ($abort_flag) {
        assume {:print "$at(2,64430,64435)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(3,38):", $t19} $t19 == $t19;
        goto L10;
    }

    // trace_local[i]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1638:13+9
    assume {:print "$track_local(3,38,3):", $t17} $t17 == $t17;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:9+280
    assume {:print "$at(2,64167,64447)"} true;
    goto L8;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+58
    assume {:print "$at(2,64306,64364)"} true;
L2:

    // $t18 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+58
    assume {:print "$at(2,64306,64364)"} true;
    $t18 := false;
    assume $IsValid'bool'($t18);

    // $t5 := $t18 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+58
    $t5 := $t18;

    // trace_local[$t5]($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+58
    assume {:print "$track_local(3,38,5):", $t18} $t18 == $t18;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1635:17+58
    goto L7;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:9+280
    assume {:print "$at(2,64167,64447)"} true;
L0:

    // $t22 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1640:9+5
    assume {:print "$at(2,64458,64463)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // trace_return[0]($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:99+334
    assume {:print "$at(2,64136,64470)"} true;
    assume {:print "$track_return(3,38,0):", $t22} $t22 == $t22;

    // $t21 := move($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:99+334
    $t21 := $t22;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1631:99+334
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:9+280
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(2,64167,64447)"} true;
L8:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1633:9+280
    assume {:print "$at(2,64167,64447)"} true;
    assume false;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1641:5+1
    assume {:print "$at(2,64469,64470)"} true;
L9:

    // return $t21 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1641:5+1
    assume {:print "$at(2,64469,64470)"} true;
    $ret0 := $t21;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1641:5+1
L10:

    // abort($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1641:5+1
    assume {:print "$at(2,64469,64470)"} true;
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::simple_admin_check_verified [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:47:5+111
procedure {:timeLimit 40} $42_access_control_comprehensive_simple_admin_check_verified$verify(_$t0: int, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:47:5+1
    assume {:print "$at(2,2251,2252)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:47:5+1
    assume $IsValid'address'($t1);

    // trace_local[admin]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:47:5+1
    assume {:print "$track_local(3,39,0):", $t0} $t0 == $t0;

    // trace_local[caller]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:47:5+1
    assume {:print "$track_local(3,39,1):", $t1} $t1 == $t1;

    // $t2 := ==($t0, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:48:9+15
    assume {:print "$at(2,2340,2355)"} true;
    $t2 := $IsEqual'address'($t0, $t1);

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:48:9+15
    assume {:print "$track_return(3,39,0):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:49:5+1
    assume {:print "$at(2,2361,2362)"} true;
L1:

    // assert Not(false) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:55:9+16
    assume {:print "$at(2,2567,2583)"} true;
    assert {:msg "assert_failed(2,2567,2583): function does not abort under this condition"}
      !false;

    // assert Eq<bool>($t2, Eq<address>($t0, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:52:9+36
    assume {:print "$at(2,2414,2450)"} true;
    assert {:msg "assert_failed(2,2414,2450): post-condition does not hold"}
      $IsEqual'bool'($t2, $IsEqual'address'($t0, $t1));

    // assert Implies(Eq<address>($t0, $t1), Eq<bool>($t2, true)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:53:9+43
    assume {:print "$at(2,2460,2503)"} true;
    assert {:msg "assert_failed(2,2460,2503): post-condition does not hold"}
      ($IsEqual'address'($t0, $t1) ==> $IsEqual'bool'($t2, true));

    // assert Implies(Neq<address>($t0, $t1), Eq<bool>($t2, false)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:54:9+44
    assume {:print "$at(2,2513,2557)"} true;
    assert {:msg "assert_failed(2,2513,2557): post-condition does not hold"}
      (!$IsEqual'address'($t0, $t1) ==> $IsEqual'bool'($t2, false));

    // return $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:54:9+44
    $ret0 := $t2;
    return;

}

// fun access_control_comprehensive::transfer_resource_vulnerable [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1075:5+1396
procedure {:inline 1} $42_access_control_comprehensive_transfer_resource_vulnerable(_$t0: $Mutation ($42_access_control_comprehensive_ResourceOwnership), _$t1: int, _$t2: int, _$t3: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_ResourceOwnership))
{
    // declare local variables
    var $t4: int;
    var $t5: $Mutation ($42_access_control_comprehensive_Resource);
    var $t6: $Mutation (int);
    var $t7: $42_access_control_comprehensive_OwnershipRecord;
    var $t8: Vec ($42_access_control_comprehensive_Resource);
    var $t9: int;
    var $t10: int;
    var $t11: Vec ($42_access_control_comprehensive_Resource);
    var $t12: int;
    var $t13: bool;
    var $t14: $Mutation (Vec ($42_access_control_comprehensive_Resource));
    var $t15: $Mutation ($42_access_control_comprehensive_Resource);
    var $t16: int;
    var $t17: $Mutation (int);
    var $t18: $1_option_Option'address';
    var $t19: int;
    var $t20: int;
    var $t21: $42_access_control_comprehensive_OwnershipRecord;
    var $t22: $Mutation (Vec ($42_access_control_comprehensive_OwnershipRecord));
    var $t23: int;
    var $t0: $Mutation ($42_access_control_comprehensive_ResourceOwnership);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$42_access_control_comprehensive_OwnershipRecord': $42_access_control_comprehensive_OwnershipRecord;
    var $temp_0'$42_access_control_comprehensive_Resource': $42_access_control_comprehensive_Resource;
    var $temp_0'$42_access_control_comprehensive_ResourceOwnership': $42_access_control_comprehensive_ResourceOwnership;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1075:5+1
    assume {:print "$at(2,42843,42844)"} true;
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,41,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // trace_local[resource_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1075:5+1
    assume {:print "$track_local(3,41,1):", $t1} $t1 == $t1;

    // trace_local[new_owner]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1075:5+1
    assume {:print "$track_local(3,41,2):", $t2} $t2 == $t2;

    // trace_local[_transferrer]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1075:5+1
    assume {:print "$track_local(3,41,3):", $t3} $t3 == $t3;

    // $t8 := get_field<0x42::access_control_comprehensive::ResourceOwnership>.resources($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1081:48+20
    assume {:print "$at(2,43072,43092)"} true;
    $t8 := $Dereference($t0)->$resources;

    // $t9 := access_control_comprehensive::find_resource_index($t8, $t1) on_abort goto L3 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1081:28+54
    call $t9 := $42_access_control_comprehensive_find_resource_index($t8, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,43052,43106)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,41):", $t10} $t10 == $t10;
        goto L3;
    }

    // trace_local[resource_idx]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1081:28+54
    assume {:print "$track_local(3,41,4):", $t9} $t9 == $t9;

    // $t11 := get_field<0x42::access_control_comprehensive::ResourceOwnership>.resources($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:47+20
    assume {:print "$at(2,43155,43175)"} true;
    $t11 := $Dereference($t0)->$resources;

    // $t12 := vector::length<0x42::access_control_comprehensive::Resource>($t11) on_abort goto L3 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:32+36
    call $t12 := $1_vector_length'$42_access_control_comprehensive_Resource'($t11);
    if ($abort_flag) {
        assume {:print "$at(2,43140,43176)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,41):", $t10} $t10 == $t10;
        goto L3;
    }

    // $t13 := <($t9, $t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:17+51
    call $t13 := $Lt($t9, $t12);

    // if ($t13) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:9+6
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1084:43+24
    assume {:print "$at(2,43240,43264)"} true;
L1:

    // $t14 := borrow_field<0x42::access_control_comprehensive::ResourceOwnership>.resources($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1084:43+24
    assume {:print "$at(2,43240,43264)"} true;
    $t14 := $ChildMutation($t0, 0, $Dereference($t0)->$resources);

    // $t15 := vector::borrow_mut<0x42::access_control_comprehensive::Resource>($t14, $t9) on_abort goto L3 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1084:24+58
    call $t15,$t14 := $1_vector_borrow_mut'$42_access_control_comprehensive_Resource'($t14, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,43221,43279)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,41):", $t10} $t10 == $t10;
        goto L3;
    }

    // trace_local[resource]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1084:24+58
    $temp_0'$42_access_control_comprehensive_Resource' := $Dereference($t15);
    assume {:print "$track_local(3,41,5):", $temp_0'$42_access_control_comprehensive_Resource'} $temp_0'$42_access_control_comprehensive_Resource' == $temp_0'$42_access_control_comprehensive_Resource';

    // $t16 := get_field<0x42::access_control_comprehensive::Resource>.owner($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1096:25+14
    assume {:print "$at(2,43781,43795)"} true;
    $t16 := $Dereference($t15)->$owner;

    // trace_local[_transferrer]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1096:25+14
    assume {:print "$track_local(3,41,3):", $t16} $t16 == $t16;

    // $t17 := borrow_field<0x42::access_control_comprehensive::Resource>.owner($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1097:9+14
    assume {:print "$at(2,43806,43820)"} true;
    $t17 := $ChildMutation($t15, 1, $Dereference($t15)->$owner);

    // trace_local[$t15]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1097:9+26
    $temp_0'address' := $Dereference($t17);
    assume {:print "$track_local(3,41,6):", $temp_0'address'} $temp_0'address' == $temp_0'address';

    // write_ref($t17, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1097:9+26
    $t17 := $UpdateMutation($t17, $t2);

    // write_back[Reference($t15).owner (address)]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1097:9+26
    $t15 := $UpdateMutation($t15, $Update'$42_access_control_comprehensive_Resource'_owner($Dereference($t15), $Dereference($t17)));

    // write_back[Reference($t14)[]]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1097:9+26
    $t14 := $UpdateMutation($t14, UpdateVec($Dereference($t14), ReadVec($t15->p, LenVec($t14->p)), $Dereference($t15)));

    // write_back[Reference($t0).resources (vector<0x42::access_control_comprehensive::Resource>)]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1097:9+26
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_ResourceOwnership'_resources($Dereference($t0), $Dereference($t14)));

    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1097:9+26
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,41,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // $t18 := opaque begin: option::some<address>($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1103:29+23
    assume {:print "$at(2,44028,44051)"} true;

    // assume And(WellFormed($t18), Le(Len<address>(select option::Option.vec($t18)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1103:29+23
    assume ($IsValid'$1_option_Option'address''($t18) && (LenVec($t18->$vec) <= 1));

    // assume Eq<0x1::option::Option<address>>($t18, option::spec_some<address>($t16)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1103:29+23
    assume $IsEqual'$1_option_Option'address''($t18, $1_option_spec_some'address'($t16));

    // $t18 := opaque end: option::some<address>($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1103:29+23

    // $t19 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1104:29+7
    assume {:print "$at(2,44082,44089)"} true;
    $t19 := 1000000;
    assume $IsValid'u64'($t19);

    // $t20 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1105:28+1
    assume {:print "$at(2,44119,44120)"} true;
    $t20 := 1;
    assume $IsValid'u8'($t20);

    // $t21 := pack 0x42::access_control_comprehensive::OwnershipRecord($t1, $t2, $t18, $t19, $t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1100:32+225
    assume {:print "$at(2,43924,44149)"} true;
    $t21 := $42_access_control_comprehensive_OwnershipRecord($t1, $t2, $t18, $t19, $t20);

    // trace_local[ownership_record]($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1100:32+225
    assume {:print "$track_local(3,41,7):", $t21} $t21 == $t21;

    // $t22 := borrow_field<0x42::access_control_comprehensive::ResourceOwnership>.ownership_records($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1108:27+32
    assume {:print "$at(2,44180,44212)"} true;
    $t22 := $ChildMutation($t0, 1, $Dereference($t0)->$ownership_records);

    // vector::push_back<0x42::access_control_comprehensive::OwnershipRecord>($t22, $t21) on_abort goto L3 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1108:9+69
    call $t22 := $1_vector_push_back'$42_access_control_comprehensive_OwnershipRecord'($t22, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,44162,44231)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(3,41):", $t10} $t10 == $t10;
        goto L3;
    }

    // write_back[Reference($t0).ownership_records (vector<0x42::access_control_comprehensive::OwnershipRecord>)]($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1108:9+69
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_ResourceOwnership'_ownership_records($Dereference($t0), $Dereference($t22)));

    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1108:9+69
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,41,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // trace_local[ownership]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1080:7+1217
    assume {:print "$at(2,43022,44239)"} true;
    $temp_0'$42_access_control_comprehensive_ResourceOwnership' := $Dereference($t0);
    assume {:print "$track_local(3,41,0):", $temp_0'$42_access_control_comprehensive_ResourceOwnership'} $temp_0'$42_access_control_comprehensive_ResourceOwnership' == $temp_0'$42_access_control_comprehensive_ResourceOwnership';

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1080:7+1217

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1080:7+1217
    goto L2;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:9+6
    assume {:print "$at(2,43117,43123)"} true;
L0:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:9+6
    assume {:print "$at(2,43117,43123)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:9+6

    // $t23 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:70+14
    $t23 := 3001;
    assume $IsValid'u64'($t23);

    // trace_abort($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:9+6
    assume {:print "$at(2,43117,43123)"} true;
    assume {:print "$track_abort(3,41):", $t23} $t23 == $t23;

    // $t10 := move($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:9+6
    $t10 := $t23;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1082:9+6
    goto L3;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1109:5+1
    assume {:print "$at(2,44238,44239)"} true;
L2:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1109:5+1
    assume {:print "$at(2,44238,44239)"} true;
    $ret0 := $t0;
    return;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1109:5+1
L3:

    // abort($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:1109:5+1
    assume {:print "$at(2,44238,44239)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::validate_capability_id_verified [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:60:5+133
procedure {:timeLimit 40} $42_access_control_comprehensive_validate_capability_id_verified$verify(_$t0: int, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t0: int;
    var $t1: int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:60:5+1
    assume {:print "$at(2,2732,2733)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:60:5+1
    assume $IsValid'u64'($t1);

    // trace_local[capability_id]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:60:5+1
    assume {:print "$track_local(3,42,0):", $t0} $t0 == $t0;

    // trace_local[expected_id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:60:5+1
    assume {:print "$track_local(3,42,1):", $t1} $t1 == $t1;

    // $t2 := ==($t0, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:61:9+28
    assume {:print "$at(2,2830,2858)"} true;
    $t2 := $IsEqual'u64'($t0, $t1);

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:61:9+28
    assume {:print "$track_return(3,42,0):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:62:5+1
    assume {:print "$at(2,2864,2865)"} true;
L1:

    // assert Not(false) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:68:9+16
    assume {:print "$at(2,3113,3129)"} true;
    assert {:msg "assert_failed(2,3113,3129): function does not abort under this condition"}
      !false;

    // assert Eq<bool>($t2, Eq<u64>($t0, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:65:9+49
    assume {:print "$at(2,2921,2970)"} true;
    assert {:msg "assert_failed(2,2921,2970): post-condition does not hold"}
      $IsEqual'bool'($t2, $IsEqual'u64'($t0, $t1));

    // assert Implies(Eq<u64>($t0, $t1), Eq<bool>($t2, true)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:66:9+56
    assume {:print "$at(2,2980,3036)"} true;
    assert {:msg "assert_failed(2,2980,3036): post-condition does not hold"}
      ($IsEqual'u64'($t0, $t1) ==> $IsEqual'bool'($t2, true));

    // assert Implies(Neq<u64>($t0, $t1), Eq<bool>($t2, false)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:67:9+57
    assume {:print "$at(2,3046,3103)"} true;
    assert {:msg "assert_failed(2,3046,3103): post-condition does not hold"}
      (!$IsEqual'u64'($t0, $t1) ==> $IsEqual'bool'($t2, false));

    // return $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:67:9+57
    $ret0 := $t2;
    return;

}

// fun access_control_comprehensive::withdraw_with_capability_secure [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:192:5+1300
procedure {:inline 1} $42_access_control_comprehensive_withdraw_with_capability_secure(_$t0: $Mutation ($42_access_control_comprehensive_SystemState), _$t1: $42_access_control_comprehensive_AdminCapability, _$t2: int, _$t3: int, _$t4: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_SystemState))
{
    // declare local variables
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: $42_access_control_comprehensive_SystemState;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bv64;
    var $t19: bv64;
    var $t20: bool;
    var $t21: bool;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: $Mutation (int);
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t0: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t1: $42_access_control_comprehensive_AdminCapability;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:192:5+1
    assume {:print "$at(2,8094,8095)"} true;
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,43,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // trace_local[capability]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:192:5+1
    assume {:print "$track_local(3,43,1):", $t1} $t1 == $t1;

    // trace_local[expected_holder]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:192:5+1
    assume {:print "$track_local(3,43,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:192:5+1
    assume {:print "$track_local(3,43,3):", $t3} $t3 == $t3;

    // trace_local[current_time]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:192:5+1
    assume {:print "$track_local(3,43,4):", $t4} $t4 == $t4;

    // $t5 := get_field<0x42::access_control_comprehensive::SystemState>.emergency_locked($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:18+23
    assume {:print "$at(2,8377,8400)"} true;
    $t5 := $Dereference($t0)->$emergency_locked;

    // if ($t5) goto L0 else goto L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:17+24
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:17+6
    assume {:print "$at(2,8445,8451)"} true;
L1:

    // $t6 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:26+1
    assume {:print "$at(2,8454,8455)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := >($t3, $t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:17+10
    call $t7 := $Gt($t3, $t6);

    // if ($t7) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:9+6
    if ($t7) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:17+6
    assume {:print "$at(2,8491,8497)"} true;
L3:

    // $t8 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:27+18
    assume {:print "$at(2,8501,8519)"} true;
    $t8 := $Dereference($t0)->$total_funds;

    // $t9 := <=($t3, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:17+28
    call $t9 := $Le($t3, $t8);

    // if ($t9) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:9+6
    if ($t9) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:42+6
    assume {:print "$at(2,8649,8655)"} true;
L5:

    // $t10 := read_ref($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:42+6
    assume {:print "$at(2,8649,8655)"} true;
    $t10 := $Dereference($t0);

    // $t11 := get_field<0x42::access_control_comprehensive::AdminCapability>.id($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:50+13
    $t11 := $t1->$id;

    // $t12 := access_control_comprehensive::is_capability_registered($t10, $t11) on_abort goto L17 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:17+47
    call $t12 := $42_access_control_comprehensive_is_capability_registered($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,8624,8671)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,43):", $t13} $t13 == $t13;
        goto L17;
    }

    // if ($t12) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:9+6
    if ($t12) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:17+17
    assume {:print "$at(2,8765,8782)"} true;
L7:

    // $t14 := get_field<0x42::access_control_comprehensive::AdminCapability>.holder($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:17+17
    assume {:print "$at(2,8765,8782)"} true;
    $t14 := $t1->$holder;

    // $t15 := ==($t14, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:17+36
    $t15 := $IsEqual'address'($t14, $t2);

    // if ($t15) goto L9 else goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:9+6
    if ($t15) { goto L9; } else { goto L8; }

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:18+22
    assume {:print "$at(2,8894,8916)"} true;
L9:

    // $t16 := get_field<0x42::access_control_comprehensive::AdminCapability>.permissions($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:18+22
    assume {:print "$at(2,8894,8916)"} true;
    $t16 := $t1->$permissions;

    // $t17 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:43+1
    $t17 := 1;
    assume $IsValid'u64'($t17);

    // $t18 := &($t16, $t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:17+28
    call $t18 := $AndBv64($int2bv.64($t16), $int2bv.64($t17));

    // $t19 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:48+1
    $t19 := 0bv64;
    assume $IsValid'bv64'($t19);

    // $t20 := >($t18, $t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:17+32
    call $t20 := $GtBv64($t18, $t19);

    // if ($t20) goto L11 else goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:9+6
    if ($t20) { goto L11; } else { goto L10; }

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:40+10
    assume {:print "$at(2,9073,9083)"} true;
L11:

    // $t21 := access_control_comprehensive::is_capability_expired($t1, $t4) on_abort goto L17 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:18+47
    assume {:print "$at(2,9051,9098)"} true;
    call $t21 := $42_access_control_comprehensive_is_capability_expired($t1, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,9051,9098)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,43):", $t13} $t13 == $t13;
        goto L17;
    }

    // if ($t21) goto L12 else goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:17+48
    if ($t21) { goto L12; } else { goto L13; }

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:17+6
    assume {:print "$at(2,9201,9207)"} true;
L13:

    // $t22 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:27+10
    assume {:print "$at(2,9211,9221)"} true;
    $t22 := 1000000;
    assume $IsValid'u64'($t22);

    // $t23 := <=($t3, $t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:17+20
    call $t23 := $Le($t3, $t22);

    // if ($t23) goto L15 else goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:9+6
    if ($t23) { goto L15; } else { goto L14; }

    // label L15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:220:30+18
    assume {:print "$at(2,9359,9377)"} true;
L15:

    // $t24 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:220:30+18
    assume {:print "$at(2,9359,9377)"} true;
    $t24 := $Dereference($t0)->$total_funds;

    // $t25 := -($t24, $t3) on_abort goto L17 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:220:30+27
    call $t25 := $Sub($t24, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,9359,9386)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(3,43):", $t13} $t13 == $t13;
        goto L17;
    }

    // $t26 := borrow_field<0x42::access_control_comprehensive::SystemState>.total_funds($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:220:9+18
    $t26 := $ChildMutation($t0, 2, $Dereference($t0)->$total_funds);

    // write_ref($t26, $t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:220:9+48
    $t26 := $UpdateMutation($t26, $t25);

    // write_back[Reference($t0).total_funds (u64)]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:220:9+48
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_SystemState'_total_funds($Dereference($t0), $Dereference($t26)));

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:220:9+48
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,43,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:198:7+1091
    assume {:print "$at(2,8303,9394)"} true;
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,43,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:198:7+1091

    // goto L16 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:198:7+1091
    goto L16;

    // label L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:9+6
    assume {:print "$at(2,9193,9199)"} true;
L14:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:9+6
    assume {:print "$at(2,9193,9199)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:9+6

    // $t27 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:39+14
    $t27 := 3001;
    assume $IsValid'u64'($t27);

    // trace_abort($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:9+6
    assume {:print "$at(2,9193,9199)"} true;
    assume {:print "$track_abort(3,43):", $t27} $t27 == $t27;

    // $t13 := move($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:9+6
    $t13 := $t27;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:217:9+6
    goto L17;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:9+6
    assume {:print "$at(2,9042,9048)"} true;
L12:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:9+6
    assume {:print "$at(2,9042,9048)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:9+6

    // $t28 := 3008 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:67+20
    $t28 := 3008;
    assume $IsValid'u64'($t28);

    // trace_abort($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:9+6
    assume {:print "$at(2,9042,9048)"} true;
    assume {:print "$track_abort(3,43):", $t28} $t28 == $t28;

    // $t13 := move($t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:9+6
    $t13 := $t28;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:214:9+6
    goto L17;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:9+6
    assume {:print "$at(2,8885,8891)"} true;
L10:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:9+6
    assume {:print "$at(2,8885,8891)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:9+6

    // $t29 := 3003 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:51+26
    $t29 := 3003;
    assume $IsValid'u64'($t29);

    // trace_abort($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:9+6
    assume {:print "$at(2,8885,8891)"} true;
    assume {:print "$track_abort(3,43):", $t29} $t29 == $t29;

    // $t13 := move($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:9+6
    $t13 := $t29;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:211:9+6
    goto L17;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:9+6
    assume {:print "$at(2,8757,8763)"} true;
L8:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:9+6
    assume {:print "$at(2,8757,8763)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:9+6

    // $t30 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:55+14
    $t30 := 3001;
    assume $IsValid'u64'($t30);

    // trace_abort($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:9+6
    assume {:print "$at(2,8757,8763)"} true;
    assume {:print "$track_abort(3,43):", $t30} $t30 == $t30;

    // $t13 := move($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:9+6
    $t13 := $t30;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:208:9+6
    goto L17;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:9+6
    assume {:print "$at(2,8616,8622)"} true;
L6:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:9+6
    assume {:print "$at(2,8616,8622)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:9+6

    // $t31 := 3002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:66+20
    $t31 := 3002;
    assume $IsValid'u64'($t31);

    // trace_abort($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:9+6
    assume {:print "$at(2,8616,8622)"} true;
    assume {:print "$track_abort(3,43):", $t31} $t31 == $t31;

    // $t13 := move($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:9+6
    $t13 := $t31;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:205:9+6
    goto L17;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:9+6
    assume {:print "$at(2,8483,8489)"} true;
L4:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:9+6
    assume {:print "$at(2,8483,8489)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:9+6

    // $t32 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:47+14
    $t32 := 3001;
    assume $IsValid'u64'($t32);

    // trace_abort($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:9+6
    assume {:print "$at(2,8483,8489)"} true;
    assume {:print "$track_abort(3,43):", $t32} $t32 == $t32;

    // $t13 := move($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:9+6
    $t13 := $t32;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:202:9+6
    goto L17;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:9+6
    assume {:print "$at(2,8437,8443)"} true;
L2:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:9+6
    assume {:print "$at(2,8437,8443)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:9+6

    // $t33 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:29+14
    $t33 := 3001;
    assume $IsValid'u64'($t33);

    // trace_abort($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:9+6
    assume {:print "$at(2,8437,8443)"} true;
    assume {:print "$track_abort(3,43):", $t33} $t33 == $t33;

    // $t13 := move($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:9+6
    $t13 := $t33;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:201:9+6
    goto L17;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:9+6
    assume {:print "$at(2,8368,8374)"} true;
L0:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:9+6
    assume {:print "$at(2,8368,8374)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:9+6

    // $t34 := 3012 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:43+23
    $t34 := 3012;
    assume $IsValid'u64'($t34);

    // trace_abort($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:9+6
    assume {:print "$at(2,8368,8374)"} true;
    assume {:print "$track_abort(3,43):", $t34} $t34 == $t34;

    // $t13 := move($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:9+6
    $t13 := $t34;

    // goto L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:200:9+6
    goto L17;

    // label L16 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:221:5+1
    assume {:print "$at(2,9393,9394)"} true;
L16:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:221:5+1
    assume {:print "$at(2,9393,9394)"} true;
    $ret0 := $t0;
    return;

    // label L17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:221:5+1
L17:

    // abort($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:221:5+1
    assume {:print "$at(2,9393,9394)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun access_control_comprehensive::withdraw_with_capability_vulnerable [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:116:5+1160
procedure {:inline 1} $42_access_control_comprehensive_withdraw_with_capability_vulnerable(_$t0: $Mutation ($42_access_control_comprehensive_SystemState), _$t1: $42_access_control_comprehensive_AdminCapability, _$t2: int) returns ($ret0: $Mutation ($42_access_control_comprehensive_SystemState))
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: bv64;
    var $t6: bv64;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation (int);
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_option_Option'u64';
    var $t19: int;
    var $t20: int;
    var $t0: $Mutation ($42_access_control_comprehensive_SystemState);
    var $t1: $42_access_control_comprehensive_AdminCapability;
    var $t2: int;
    var $temp_0'$42_access_control_comprehensive_AdminCapability': $42_access_control_comprehensive_AdminCapability;
    var $temp_0'$42_access_control_comprehensive_SystemState': $42_access_control_comprehensive_SystemState;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:116:5+1
    assume {:print "$at(2,4757,4758)"} true;
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,44,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // trace_local[capability]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:116:5+1
    assume {:print "$track_local(3,44,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:116:5+1
    assume {:print "$track_local(3,44,2):", $t2} $t2 == $t2;

    // $t3 := get_field<0x42::access_control_comprehensive::AdminCapability>.permissions($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:18+22
    assume {:print "$at(2,4999,5021)"} true;
    $t3 := $t1->$permissions;

    // $t4 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:43+1
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // $t5 := &($t3, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:17+28
    call $t5 := $AndBv64($int2bv.64($t3), $int2bv.64($t4));

    // $t6 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:48+1
    $t6 := 0bv64;
    assume $IsValid'bv64'($t6);

    // $t7 := >($t5, $t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:17+32
    call $t7 := $GtBv64($t5, $t6);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:9+6
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:17+6
    assume {:print "$at(2,5180,5186)"} true;
L1:

    // $t8 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:27+18
    assume {:print "$at(2,5190,5208)"} true;
    $t8 := $Dereference($t0)->$total_funds;

    // $t9 := <=($t2, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:17+28
    call $t9 := $Le($t2, $t8);

    // if ($t9) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:9+6
    if ($t9) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:134:30+18
    assume {:print "$at(2,5619,5637)"} true;
L3:

    // $t10 := get_field<0x42::access_control_comprehensive::SystemState>.total_funds($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:134:30+18
    assume {:print "$at(2,5619,5637)"} true;
    $t10 := $Dereference($t0)->$total_funds;

    // $t11 := -($t10, $t2) on_abort goto L5 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:134:30+27
    call $t11 := $Sub($t10, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,5619,5646)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(3,44):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t13 := borrow_field<0x42::access_control_comprehensive::SystemState>.total_funds($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:134:9+18
    $t13 := $ChildMutation($t0, 2, $Dereference($t0)->$total_funds);

    // write_ref($t13, $t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:134:9+48
    $t13 := $UpdateMutation($t13, $t11);

    // write_back[Reference($t0).total_funds (u64)]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:134:9+48
    $t0 := $UpdateMutation($t0, $Update'$42_access_control_comprehensive_SystemState'_total_funds($Dereference($t0), $Dereference($t13)));

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:134:9+48
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,44,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // ($t14, $t15, $t16, $t17, $t18) := unpack 0x42::access_control_comprehensive::AdminCapability($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:138:13+82
    assume {:print "$at(2,5814,5896)"} true;
    $t14 := $t1->$id;
    $t15 := $t1->$holder;
    $t16 := $t1->$permissions;
    $t17 := $t1->$created_at;
    $t18 := $t1->$expires_at;

    // drop($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:138:13+82

    // drop($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:138:13+82

    // drop($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:138:13+82

    // drop($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:138:13+82

    // drop($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:138:13+82

    // trace_local[system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:120:7+1011
    assume {:print "$at(2,4906,5917)"} true;
    $temp_0'$42_access_control_comprehensive_SystemState' := $Dereference($t0);
    assume {:print "$track_local(3,44,0):", $temp_0'$42_access_control_comprehensive_SystemState'} $temp_0'$42_access_control_comprehensive_SystemState' == $temp_0'$42_access_control_comprehensive_SystemState';

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:120:7+1011

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:120:7+1011
    goto L4;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:9+6
    assume {:print "$at(2,5172,5178)"} true;
L2:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:9+6
    assume {:print "$at(2,5172,5178)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:9+6

    // $t19 := 3001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:47+14
    $t19 := 3001;
    assume $IsValid'u64'($t19);

    // trace_abort($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:9+6
    assume {:print "$at(2,5172,5178)"} true;
    assume {:print "$track_abort(3,44):", $t19} $t19 == $t19;

    // $t12 := move($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:9+6
    $t12 := $t19;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:125:9+6
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:9+6
    assume {:print "$at(2,4990,4996)"} true;
L0:

    // pack_ref_deep($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:9+6
    assume {:print "$at(2,4990,4996)"} true;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:9+6

    // $t20 := 3003 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:51+26
    $t20 := 3003;
    assume $IsValid'u64'($t20);

    // trace_abort($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:9+6
    assume {:print "$at(2,4990,4996)"} true;
    assume {:print "$track_abort(3,44):", $t20} $t20 == $t20;

    // $t12 := move($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:9+6
    $t12 := $t20;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:122:9+6
    goto L5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:139:5+1
    assume {:print "$at(2,5916,5917)"} true;
L4:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:139:5+1
    assume {:print "$at(2,5916,5917)"} true;
    $ret0 := $t0;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:139:5+1
L5:

    // abort($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/access_control_vulnerabilities.move:139:5+1
    assume {:print "$at(2,5916,5917)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// struct integer_vulnerabilities::TimeLock at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:181:5+89
datatype $42_integer_vulnerabilities_TimeLock {
    $42_integer_vulnerabilities_TimeLock($unlock_time: int, $locked_amount: int)
}
function {:inline} $Update'$42_integer_vulnerabilities_TimeLock'_unlock_time(s: $42_integer_vulnerabilities_TimeLock, x: int): $42_integer_vulnerabilities_TimeLock {
    $42_integer_vulnerabilities_TimeLock(x, s->$locked_amount)
}
function {:inline} $Update'$42_integer_vulnerabilities_TimeLock'_locked_amount(s: $42_integer_vulnerabilities_TimeLock, x: int): $42_integer_vulnerabilities_TimeLock {
    $42_integer_vulnerabilities_TimeLock(s->$unlock_time, x)
}
function $IsValid'$42_integer_vulnerabilities_TimeLock'(s: $42_integer_vulnerabilities_TimeLock): bool {
    $IsValid'u64'(s->$unlock_time)
      && $IsValid'u64'(s->$locked_amount)
}
function {:inline} $IsEqual'$42_integer_vulnerabilities_TimeLock'(s1: $42_integer_vulnerabilities_TimeLock, s2: $42_integer_vulnerabilities_TimeLock): bool {
    s1 == s2
}

// struct integer_vulnerabilities::TokenSupply at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:292:5+92
datatype $42_integer_vulnerabilities_TokenSupply {
    $42_integer_vulnerabilities_TokenSupply($current_supply: int, $max_supply: int)
}
function {:inline} $Update'$42_integer_vulnerabilities_TokenSupply'_current_supply(s: $42_integer_vulnerabilities_TokenSupply, x: int): $42_integer_vulnerabilities_TokenSupply {
    $42_integer_vulnerabilities_TokenSupply(x, s->$max_supply)
}
function {:inline} $Update'$42_integer_vulnerabilities_TokenSupply'_max_supply(s: $42_integer_vulnerabilities_TokenSupply, x: int): $42_integer_vulnerabilities_TokenSupply {
    $42_integer_vulnerabilities_TokenSupply(s->$current_supply, x)
}
function $IsValid'$42_integer_vulnerabilities_TokenSupply'(s: $42_integer_vulnerabilities_TokenSupply): bool {
    $IsValid'u64'(s->$current_supply)
      && $IsValid'u64'(s->$max_supply)
}
function {:inline} $IsEqual'$42_integer_vulnerabilities_TokenSupply'(s1: $42_integer_vulnerabilities_TokenSupply, s2: $42_integer_vulnerabilities_TokenSupply): bool {
    s1 == s2
}

// fun integer_vulnerabilities::calculate_fee_secure [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:5+568
procedure {:timeLimit 40} $42_integer_vulnerabilities_calculate_fee_secure$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: int;
    var $t24: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:5+1
    assume {:print "$at(3,10239,10240)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:5+1
    assume $IsValid'u64'($t1);

    // assume Le($t1, 10000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:276:9+31
    assume {:print "$at(3,10852,10883)"} true;
    assume ($t1 <= 10000);

    // assume Le($t0, 1000000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:277:9+33
    assume {:print "$at(3,10893,10926)"} true;
    assume ($t0 <= 1000000000);

    // trace_local[amount]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:5+1
    assume {:print "$at(3,10239,10240)"} true;
    assume {:print "$track_local(4,1,0):", $t0} $t0 == $t0;

    // trace_local[fee_rate_bps]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:5+1
    assume {:print "$track_local(4,1,1):", $t1} $t1 == $t1;

    // $t6 := 10000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:33+5
    assume {:print "$at(3,10343,10348)"} true;
    $t6 := 10000;
    assume $IsValid'u64'($t6);

    // $t7 := <=($t1, $t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:17+21
    call $t7 := $Le($t1, $t6);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:9+6
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:17+6
    assume {:print "$at(3,10403,10409)"} true;
L1:

    // $t8 := 1000000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:27+13
    assume {:print "$at(3,10413,10426)"} true;
    $t8 := 1000000000;
    assume $IsValid'u64'($t8);

    // $t9 := <=($t0, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:17+23
    call $t9 := $Le($t0, $t8);

    // if ($t9) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:9+6
    if ($t9) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:265:31+6
    assume {:print "$at(3,10501,10507)"} true;
L3:

    // $t10 := *($t0, $t1) on_abort goto L14 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:265:30+23
    assume {:print "$at(3,10500,10523)"} true;
    call $t10 := $MulU64($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,10500,10523)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(4,1):", $t11} $t11 == $t11;
        goto L14;
    }

    // $t12 := 10000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:265:56+5
    $t12 := 10000;
    assume $IsValid'u64'($t12);

    // $t13 := /($t10, $t12) on_abort goto L14 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:265:30+31
    call $t13 := $Div($t10, $t12);
    if ($abort_flag) {
        assume {:print "$at(3,10500,10531)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(4,1):", $t11} $t11 == $t11;
        goto L14;
    }

    // trace_local[$t4]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:265:30+31
    assume {:print "$track_local(4,1,2):", $t13} $t13 == $t13;

    // $t14 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:22+1
    assume {:print "$at(3,10632,10633)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := >($t0, $t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+10
    call $t15 := $Gt($t0, $t14);

    // if ($t15) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+30
    if ($t15) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:27+12
L5:

    // $t16 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:42+1
    assume {:print "$at(3,10652,10653)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t1, $t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:27+16
    call $t17 := $Gt($t1, $t16);

    // $t3 := $t17 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:27+16
    $t3 := $t17;

    // trace_local[$t3]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:27+16
    assume {:print "$track_local(4,1,3):", $t17} $t17 == $t17;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+53
L12:

    // if ($t3) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+53
    assume {:print "$at(3,10623,10676)"} true;
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:47+14
L7:

    // $t18 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:65+1
    assume {:print "$at(3,10675,10676)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := ==($t13, $t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:47+19
    $t19 := $IsEqual'u64'($t13, $t18);

    // $t4 := $t19 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:47+19
    $t4 := $t19;

    // trace_local[$t15]($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:47+19
    assume {:print "$track_local(4,1,4):", $t19} $t19 == $t19;

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:9+181
L11:

    // if ($t4) goto L9 else goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:9+181
    assume {:print "$at(3,10619,10800)"} true;
    if ($t4) { goto L9; } else { goto L8; }

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:269:13+1
    assume {:print "$at(3,10693,10694)"} true;
L9:

    // $t20 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:269:13+1
    assume {:print "$at(3,10693,10694)"} true;
    $t20 := 1;
    assume $IsValid'u64'($t20);

    // $t5 := $t20 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:269:13+1
    $t5 := $t20;

    // trace_local[$t5]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:269:13+1
    assume {:print "$track_local(4,1,5):", $t20} $t20 == $t20;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:74+499
    assume {:print "$at(3,10308,10807)"} true;
L10:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:74+499
    assume {:print "$at(3,10308,10807)"} true;
    assume {:print "$track_return(4,1,0):", $t5} $t5 == $t5;

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:261:74+499
    goto L13;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:271:13+14
    assume {:print "$at(3,10775,10789)"} true;
L8:

    // $t5 := $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:271:13+14
    assume {:print "$at(3,10775,10789)"} true;
    $t5 := $t13;

    // trace_local[$t5]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:271:13+14
    assume {:print "$track_local(4,1,5):", $t13} $t13 == $t13;

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:271:13+14
    goto L10;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+53
    assume {:print "$at(3,10623,10676)"} true;
L6:

    // $t21 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+53
    assume {:print "$at(3,10623,10676)"} true;
    $t21 := false;
    assume $IsValid'bool'($t21);

    // $t4 := $t21 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+53
    $t4 := $t21;

    // trace_local[$t15]($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+53
    assume {:print "$track_local(4,1,4):", $t21} $t21 == $t21;

    // goto L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+53
    goto L11;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+30
L4:

    // $t22 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+30
    assume {:print "$at(3,10623,10653)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // $t3 := $t22 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+30
    $t3 := $t22;

    // trace_local[$t3]($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+30
    assume {:print "$track_local(4,1,3):", $t22} $t22 == $t22;

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:268:13+30
    goto L12;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:42+10
    assume {:print "$at(3,10428,10438)"} true;
L2:

    // $t23 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:42+10
    assume {:print "$at(3,10428,10438)"} true;
    $t23 := 1001;
    assume $IsValid'u64'($t23);

    // trace_abort($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:9+6
    assume {:print "$at(3,10395,10401)"} true;
    assume {:print "$track_abort(4,1):", $t23} $t23 == $t23;

    // $t11 := move($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:9+6
    $t11 := $t23;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:263:9+6
    goto L14;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:40+20
    assume {:print "$at(3,10350,10370)"} true;
L0:

    // $t24 := 1005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:40+20
    assume {:print "$at(3,10350,10370)"} true;
    $t24 := 1005;
    assume $IsValid'u64'($t24);

    // trace_abort($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:9+6
    assume {:print "$at(3,10319,10325)"} true;
    assume {:print "$track_abort(4,1):", $t24} $t24 == $t24;

    // $t11 := move($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:9+6
    $t11 := $t24;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:262:9+6
    goto L14;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:273:5+1
    assume {:print "$at(3,10806,10807)"} true;
L13:

    // assert Not(Gt($t1, 10000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:284:9+57
    assume {:print "$at(3,11154,11211)"} true;
    assert {:msg "assert_failed(3,11154,11211): function does not abort under this condition"}
      !($t1 > 10000);

    // assert Not(Gt($t0, 1000000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:285:9+49
    assume {:print "$at(3,11221,11270)"} true;
    assert {:msg "assert_failed(3,11221,11270): function does not abort under this condition"}
      !($t0 > 1000000000);

    // assert Implies(Eq<u64>($t1, 0), Eq<u64>($t5, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:279:9+42
    assume {:print "$at(3,10938,10980)"} true;
    assert {:msg "assert_failed(3,10938,10980): post-condition does not hold"}
      ($IsEqual'u64'($t1, 0) ==> $IsEqual'u64'($t5, 0));

    // assert Implies(Eq<u64>($t0, 0), Eq<u64>($t5, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:280:9+36
    assume {:print "$at(3,10990,11026)"} true;
    assert {:msg "assert_failed(3,10990,11026): post-condition does not hold"}
      ($IsEqual'u64'($t0, 0) ==> $IsEqual'u64'($t5, 0));

    // assert Implies(And(Gt($t0, 0), Gt($t1, 0)), Gt($t5, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:281:9+54
    assume {:print "$at(3,11036,11090)"} true;
    assert {:msg "assert_failed(3,11036,11090): post-condition does not hold"}
      ((($t0 > 0) && ($t1 > 0)) ==> ($t5 > 0));

    // assert Le($t5, $t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:282:9+25
    assume {:print "$at(3,11117,11142)"} true;
    assert {:msg "assert_failed(3,11117,11142): post-condition does not hold"}
      ($t5 <= $t0);

    // return $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:282:9+25
    $ret0 := $t5;
    return;

    // label L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:273:5+1
    assume {:print "$at(3,10806,10807)"} true;
L14:

    // assert Or(Gt($t1, 10000), Gt($t0, 1000000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:275:5+462
    assume {:print "$at(3,10815,11277)"} true;
    assert {:msg "assert_failed(3,10815,11277): abort not covered by any of the `aborts_if` clauses"}
      (($t1 > 10000) || ($t0 > 1000000000));

    // assert Or(And(Gt($t1, 10000), Eq(1005, $t11)), And(Gt($t0, 1000000000), Eq(1001, $t11))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:275:5+462
    assert {:msg "assert_failed(3,10815,11277): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((($t1 > 10000) && $IsEqual'num'(1005, $t11)) || (($t0 > 1000000000) && $IsEqual'num'(1001, $t11)));

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:275:5+462
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::calculate_reward_secure [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:116:5+576
procedure {:timeLimit 40} $42_integer_vulnerabilities_calculate_reward_secure$verify(_$t0: int, _$t1: int, _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:116:5+1
    assume {:print "$at(3,4573,4574)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:116:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:116:5+1
    assume $IsValid'u64'($t2);

    // assume Gt($t2, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:131:9+26
    assume {:print "$at(3,5197,5223)"} true;
    assume ($t2 > 0);

    // assume Gt($t1, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:132:9+27
    assume {:print "$at(3,5233,5260)"} true;
    assume ($t1 > 0);

    // assume Le($t0, 1000000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:133:9+39
    assume {:print "$at(3,5270,5309)"} true;
    assume ($t0 <= 1000000000);

    // assume Le($t1, 1000000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:134:9+40
    assume {:print "$at(3,5319,5359)"} true;
    assume ($t1 <= 1000000000);

    // trace_local[user_balance]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:116:5+1
    assume {:print "$at(3,4573,4574)"} true;
    assume {:print "$track_local(4,2,0):", $t0} $t0 == $t0;

    // trace_local[total_rewards]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:116:5+1
    assume {:print "$track_local(4,2,1):", $t1} $t1 == $t1;

    // trace_local[total_supply]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:116:5+1
    assume {:print "$track_local(4,2,2):", $t2} $t2 == $t2;

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:32+1
    assume {:print "$at(3,4739,4740)"} true;
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := >($t2, $t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:17+16
    call $t4 := $Gt($t2, $t3);

    // if ($t4) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:9+6
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:17+13
    assume {:print "$at(3,4780,4793)"} true;
L1:

    // $t5 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:33+1
    assume {:print "$at(3,4796,4797)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := >($t1, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:17+17
    call $t6 := $Gt($t1, $t5);

    // if ($t6) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:9+6
    if ($t6) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:17+12
    assume {:print "$at(3,4839,4851)"} true;
L3:

    // $t7 := 1000000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:33+13
    assume {:print "$at(3,4855,4868)"} true;
    $t7 := 1000000000;
    assume $IsValid'u64'($t7);

    // $t8 := <=($t0, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:17+29
    call $t8 := $Le($t0, $t7);

    // if ($t8) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:9+6
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:17+13
    assume {:print "$at(3,4933,4946)"} true;
L5:

    // $t9 := 1000000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:34+13
    assume {:print "$at(3,4950,4963)"} true;
    $t9 := 1000000000;
    assume $IsValid'u64'($t9);

    // $t10 := <=($t1, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:17+30
    call $t10 := $Le($t1, $t9);

    // if ($t10) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:9+6
    if ($t10) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:127:10+12
    assume {:print "$at(3,5098,5110)"} true;
L7:

    // $t11 := *($t0, $t1) on_abort goto L9 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:127:9+30
    assume {:print "$at(3,5097,5127)"} true;
    call $t11 := $MulU64($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,5097,5127)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(4,2):", $t12} $t12 == $t12;
        goto L9;
    }

    // $t13 := /($t11, $t2) on_abort goto L9 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:127:9+45
    call $t13 := $Div($t11, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,5097,5142)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(4,2):", $t12} $t12 == $t12;
        goto L9;
    }

    // trace_return[0]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:120:12+444
    assume {:print "$at(3,4705,5149)"} true;
    assume {:print "$track_return(4,2,0):", $t13} $t13 == $t13;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:120:12+444
    goto L8;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:49+10
    assume {:print "$at(3,4965,4975)"} true;
L6:

    // $t14 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:49+10
    assume {:print "$at(3,4965,4975)"} true;
    $t14 := 1001;
    assume $IsValid'u64'($t14);

    // trace_abort($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:9+6
    assume {:print "$at(3,4925,4931)"} true;
    assume {:print "$track_abort(4,2):", $t14} $t14 == $t14;

    // $t12 := move($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:9+6
    $t12 := $t14;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:124:9+6
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:48+10
    assume {:print "$at(3,4870,4880)"} true;
L4:

    // $t15 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:48+10
    assume {:print "$at(3,4870,4880)"} true;
    $t15 := 1001;
    assume $IsValid'u64'($t15);

    // trace_abort($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:9+6
    assume {:print "$at(3,4831,4837)"} true;
    assume {:print "$track_abort(4,2):", $t15} $t15 == $t15;

    // $t12 := move($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:9+6
    $t12 := $t15;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:123:9+6
    goto L9;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:36+20
    assume {:print "$at(3,4799,4819)"} true;
L2:

    // $t16 := 1005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:36+20
    assume {:print "$at(3,4799,4819)"} true;
    $t16 := 1005;
    assume $IsValid'u64'($t16);

    // trace_abort($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:9+6
    assume {:print "$at(3,4772,4778)"} true;
    assume {:print "$track_abort(4,2):", $t16} $t16 == $t16;

    // $t12 := move($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:9+6
    $t12 := $t16;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:122:9+6
    goto L9;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:35+18
    assume {:print "$at(3,4742,4760)"} true;
L0:

    // $t17 := 1003 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:35+18
    assume {:print "$at(3,4742,4760)"} true;
    $t17 := 1003;
    assume $IsValid'u64'($t17);

    // trace_abort($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:9+6
    assume {:print "$at(3,4716,4722)"} true;
    assume {:print "$track_abort(4,2):", $t17} $t17 == $t17;

    // $t12 := move($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:9+6
    $t12 := $t17;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:121:9+6
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:128:5+1
    assume {:print "$at(3,5148,5149)"} true;
L8:

    // assert Not(Eq<u64>($t2, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:139:9+52
    assume {:print "$at(3,5504,5556)"} true;
    assert {:msg "assert_failed(3,5504,5556): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(Eq<u64>($t1, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:140:9+55
    assume {:print "$at(3,5566,5621)"} true;
    assert {:msg "assert_failed(3,5566,5621): function does not abort under this condition"}
      !$IsEqual'u64'($t1, 0);

    // assert Not(Gt($t0, 1000000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:141:9+55
    assume {:print "$at(3,5631,5686)"} true;
    assert {:msg "assert_failed(3,5631,5686): function does not abort under this condition"}
      !($t0 > 1000000000);

    // assert Not(Gt($t1, 1000000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:142:9+56
    assume {:print "$at(3,5696,5752)"} true;
    assert {:msg "assert_failed(3,5696,5752): function does not abort under this condition"}
      !($t1 > 1000000000);

    // assert Eq<u64>($t13, Div(Mul($t0, $t1), $t2)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:136:9+64
    assume {:print "$at(3,5371,5435)"} true;
    assert {:msg "assert_failed(3,5371,5435): post-condition does not hold"}
      $IsEqual'u64'($t13, (($t0 * $t1) div $t2));

    // assert Le($t13, Mul($t0, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:137:9+47
    assume {:print "$at(3,5445,5492)"} true;
    assert {:msg "assert_failed(3,5445,5492): post-condition does not hold"}
      ($t13 <= ($t0 * $t1));

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:137:9+47
    $ret0 := $t13;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:128:5+1
    assume {:print "$at(3,5148,5149)"} true;
L9:

    // assert Or(Or(Or(Eq<u64>($t2, 0), Eq<u64>($t1, 0)), Gt($t0, 1000000000)), Gt($t1, 1000000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:130:5+602
    assume {:print "$at(3,5157,5759)"} true;
    assert {:msg "assert_failed(3,5157,5759): abort not covered by any of the `aborts_if` clauses"}
      ((($IsEqual'u64'($t2, 0) || $IsEqual'u64'($t1, 0)) || ($t0 > 1000000000)) || ($t1 > 1000000000));

    // assert Or(Or(Or(And(Eq<u64>($t2, 0), Eq(1003, $t12)), And(Eq<u64>($t1, 0), Eq(1005, $t12))), And(Gt($t0, 1000000000), Eq(1001, $t12))), And(Gt($t1, 1000000000), Eq(1001, $t12))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:130:5+602
    assert {:msg "assert_failed(3,5157,5759): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($IsEqual'u64'($t2, 0) && $IsEqual'num'(1003, $t12)) || ($IsEqual'u64'($t1, 0) && $IsEqual'num'(1005, $t12))) || (($t0 > 1000000000) && $IsEqual'num'(1001, $t12))) || (($t1 > 1000000000) && $IsEqual'num'(1001, $t12)));

    // abort($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:130:5+602
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::create_timelock_secure [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:212:5+456
procedure {:timeLimit 40} $42_integer_vulnerabilities_create_timelock_secure$verify(_$t0: int, _$t1: int, _$t2: int) returns ($ret0: $42_integer_vulnerabilities_TimeLock)
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $42_integer_vulnerabilities_TimeLock;
    var $t11: int;
    var $t12: int;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_integer_vulnerabilities_TimeLock': $42_integer_vulnerabilities_TimeLock;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:212:5+1
    assume {:print "$at(3,8316,8317)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:212:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:212:5+1
    assume $IsValid'u64'($t2);

    // assume Le($t2, Sub(18446744073709551615, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:232:9+49
    assume {:print "$at(3,8939,8988)"} true;
    assume ($t2 <= (18446744073709551615 - $t1));

    // assume Le($t1, 31536000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:233:9+41
    assume {:print "$at(3,8998,9039)"} true;
    assume ($t1 <= 31536000000);

    // trace_local[amount]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:212:5+1
    assume {:print "$at(3,8316,8317)"} true;
    assume {:print "$track_local(4,6,0):", $t0} $t0 == $t0;

    // trace_local[lock_duration]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:212:5+1
    assume {:print "$track_local(4,6,1):", $t1} $t1 == $t1;

    // trace_local[current_time]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:212:5+1
    assume {:print "$track_local(4,6,2):", $t2} $t2 == $t2;

    // $t3 := 18446744073709551615 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:33+7
    assume {:print "$at(3,8481,8488)"} true;
    $t3 := 18446744073709551615;
    assume $IsValid'u64'($t3);

    // $t4 := -($t3, $t1) on_abort goto L5 with $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:33+23
    call $t4 := $Sub($t3, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,8481,8504)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(4,6):", $t5} $t5 == $t5;
        goto L5;
    }

    // $t6 := <=($t2, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:17+39
    call $t6 := $Le($t2, $t4);

    // if ($t6) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:9+6
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:17+13
    assume {:print "$at(3,8536,8549)"} true;
L1:

    // $t7 := 31536000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:34+14
    assume {:print "$at(3,8553,8567)"} true;
    $t7 := 31536000000;
    assume $IsValid'u64'($t7);

    // $t8 := <=($t1, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:17+31
    call $t8 := $Le($t1, $t7);

    // if ($t8) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:9+6
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:220:27+12
    assume {:print "$at(3,8641,8653)"} true;
L3:

    // $t9 := +($t2, $t1) on_abort goto L5 with $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:220:27+28
    assume {:print "$at(3,8641,8669)"} true;
    call $t9 := $AddU64($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,8641,8669)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(4,6):", $t5} $t5 == $t5;
        goto L5;
    }

    // $t10 := pack 0x42::integer_vulnerabilities::TimeLock($t9, $t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:222:9+83
    assume {:print "$at(3,8682,8765)"} true;
    $t10 := $42_integer_vulnerabilities_TimeLock($t9, $t0);

    // trace_return[0]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:216:17+326
    assume {:print "$at(3,8446,8772)"} true;
    assume {:print "$track_return(4,6,0):", $t10} $t10 == $t10;

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:216:17+326
    goto L4;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:50+10
    assume {:print "$at(3,8569,8579)"} true;
L2:

    // $t11 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:50+10
    assume {:print "$at(3,8569,8579)"} true;
    $t11 := 1001;
    assume $IsValid'u64'($t11);

    // trace_abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:9+6
    assume {:print "$at(3,8528,8534)"} true;
    assume {:print "$track_abort(4,6):", $t11} $t11 == $t11;

    // $t5 := move($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:9+6
    $t5 := $t11;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:218:9+6
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:58+10
    assume {:print "$at(3,8506,8516)"} true;
L0:

    // $t12 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:58+10
    assume {:print "$at(3,8506,8516)"} true;
    $t12 := 1001;
    assume $IsValid'u64'($t12);

    // trace_abort($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:9+6
    assume {:print "$at(3,8457,8463)"} true;
    assume {:print "$track_abort(4,6):", $t12} $t12 == $t12;

    // $t5 := move($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:9+6
    $t5 := $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:217:9+6
    goto L5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:226:5+1
    assume {:print "$at(3,8771,8772)"} true;
L4:

    // assert Not(Gt($t2, Sub(18446744073709551615, $t1))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:235:9+65
    assume {:print "$at(3,9051,9116)"} true;
    assert {:msg "assert_failed(3,9051,9116): function does not abort under this condition"}
      !($t2 > (18446744073709551615 - $t1));

    // assert Not(Gt($t1, 31536000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:236:9+57
    assume {:print "$at(3,9126,9183)"} true;
    assert {:msg "assert_failed(3,9126,9183): function does not abort under this condition"}
      !($t1 > 31536000000);

    // assert Eq<u64>(select integer_vulnerabilities::TimeLock.unlock_time<0x42::integer_vulnerabilities::TimeLock>($t10), Add($t2, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:229:9+59
    assume {:print "$at(3,8819,8878)"} true;
    assert {:msg "assert_failed(3,8819,8878): post-condition does not hold"}
      $IsEqual'u64'($t10->$unlock_time, ($t2 + $t1));

    // assert Eq<u64>(select integer_vulnerabilities::TimeLock.locked_amount<0x42::integer_vulnerabilities::TimeLock>($t10), $t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:230:9+39
    assume {:print "$at(3,8888,8927)"} true;
    assert {:msg "assert_failed(3,8888,8927): post-condition does not hold"}
      $IsEqual'u64'($t10->$locked_amount, $t0);

    // return $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:230:9+39
    $ret0 := $t10;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:226:5+1
    assume {:print "$at(3,8771,8772)"} true;
L5:

    // assert Or(Gt($t2, Sub(18446744073709551615, $t1)), Gt($t1, 31536000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:228:5+410
    assume {:print "$at(3,8780,9190)"} true;
    assert {:msg "assert_failed(3,8780,9190): abort not covered by any of the `aborts_if` clauses"}
      (($t2 > (18446744073709551615 - $t1)) || ($t1 > 31536000000));

    // assert Or(And(Gt($t2, Sub(18446744073709551615, $t1)), Eq(1001, $t5)), And(Gt($t1, 31536000000), Eq(1001, $t5))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:228:5+410
    assert {:msg "assert_failed(3,8780,9190): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((($t2 > (18446744073709551615 - $t1)) && $IsEqual'num'(1001, $t5)) || (($t1 > 31536000000) && $IsEqual'num'(1001, $t5)));

    // abort($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:228:5+410
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::mint_tokens_secure [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:318:5+591
procedure {:timeLimit 40} $42_integer_vulnerabilities_mint_tokens_secure$verify(_$t0: $Mutation ($42_integer_vulnerabilities_TokenSupply), _$t1: int) returns ($ret0: $Mutation ($42_integer_vulnerabilities_TokenSupply))
{
    // declare local variables
    var $t2: $42_integer_vulnerabilities_TokenSupply;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t0: $Mutation ($42_integer_vulnerabilities_TokenSupply);
    var $t1: int;
    var $temp_0'$42_integer_vulnerabilities_TokenSupply': $42_integer_vulnerabilities_TokenSupply;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:318:5+1
    assume {:print "$at(3,12493,12494)"} true;
    assume $IsValid'$42_integer_vulnerabilities_TokenSupply'($Dereference($t0));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:318:5+1
    assume $IsValid'u64'($t1);

    // assume Le(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t0), select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:332:9+52
    assume {:print "$at(3,13127,13179)"} true;
    assume ($Dereference($t0)->$current_supply <= $Dereference($t0)->$max_supply);

    // assume Le($t1, Sub(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t0), select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t0))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:333:9+66
    assume {:print "$at(3,13189,13255)"} true;
    assume ($t1 <= ($Dereference($t0)->$max_supply - $Dereference($t0)->$current_supply));

    // assume Le(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t0), Sub(18446744073709551615, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:334:9+56
    assume {:print "$at(3,13265,13321)"} true;
    assume ($Dereference($t0)->$current_supply <= (18446744073709551615 - $t1));

    // assume Le(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t0), 1000000000000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:335:9+47
    assume {:print "$at(3,13331,13378)"} true;
    assume ($Dereference($t0)->$max_supply <= 1000000000000);

    // $t2 := read_ref($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:335:9+47
    $t2 := $Dereference($t0);

    // trace_local[supply]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:318:5+1
    assume {:print "$at(3,12493,12494)"} true;
    $temp_0'$42_integer_vulnerabilities_TokenSupply' := $Dereference($t0);
    assume {:print "$track_local(4,8,0):", $temp_0'$42_integer_vulnerabilities_TokenSupply'} $temp_0'$42_integer_vulnerabilities_TokenSupply' == $temp_0'$42_integer_vulnerabilities_TokenSupply';

    // trace_local[mint_amount]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:318:5+1
    assume {:print "$track_local(4,8,1):", $t1} $t1 == $t1;

    // $t3 := get_field<0x42::integer_vulnerabilities::TokenSupply>.current_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:17+21
    assume {:print "$at(3,12689,12710)"} true;
    $t3 := $Dereference($t0)->$current_supply;

    // $t4 := get_field<0x42::integer_vulnerabilities::TokenSupply>.max_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:42+17
    $t4 := $Dereference($t0)->$max_supply;

    // $t5 := <=($t3, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:17+42
    call $t5 := $Le($t3, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:9+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:17+11
    assume {:print "$at(3,12763,12774)"} true;
L1:

    // $t6 := get_field<0x42::integer_vulnerabilities::TokenSupply>.max_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:32+17
    assume {:print "$at(3,12778,12795)"} true;
    $t6 := $Dereference($t0)->$max_supply;

    // $t7 := get_field<0x42::integer_vulnerabilities::TokenSupply>.current_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:52+21
    $t7 := $Dereference($t0)->$current_supply;

    // $t8 := -($t6, $t7) on_abort goto L9 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:32+41
    call $t8 := $Sub($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(3,12778,12819)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(4,8):", $t9} $t9 == $t9;
        goto L9;
    }

    // $t10 := <=($t1, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:17+56
    call $t10 := $Le($t1, $t8);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:9+6
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:17+21
    assume {:print "$at(3,12851,12872)"} true;
L3:

    // $t11 := get_field<0x42::integer_vulnerabilities::TokenSupply>.current_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:17+21
    assume {:print "$at(3,12851,12872)"} true;
    $t11 := $Dereference($t0)->$current_supply;

    // $t12 := 18446744073709551615 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:42+7
    $t12 := 18446744073709551615;
    assume $IsValid'u64'($t12);

    // $t13 := -($t12, $t1) on_abort goto L9 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:42+21
    call $t13 := $Sub($t12, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,12876,12897)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(4,8):", $t9} $t9 == $t9;
        goto L9;
    }

    // $t14 := <=($t11, $t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:17+46
    call $t14 := $Le($t11, $t13);

    // if ($t14) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:9+6
    if ($t14) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:17+17
    assume {:print "$at(3,12929,12946)"} true;
L5:

    // $t15 := get_field<0x42::integer_vulnerabilities::TokenSupply>.max_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:17+17
    assume {:print "$at(3,12929,12946)"} true;
    $t15 := $Dereference($t0)->$max_supply;

    // $t16 := 1000000000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:38+16
    $t16 := 1000000000000;
    assume $IsValid'u64'($t16);

    // $t17 := <=($t15, $t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:17+37
    call $t17 := $Le($t15, $t16);

    // if ($t17) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:9+6
    if ($t17) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:328:33+21
    assume {:print "$at(3,13041,13062)"} true;
L7:

    // $t18 := get_field<0x42::integer_vulnerabilities::TokenSupply>.current_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:328:33+21
    assume {:print "$at(3,13041,13062)"} true;
    $t18 := $Dereference($t0)->$current_supply;

    // $t19 := +($t18, $t1) on_abort goto L9 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:328:33+35
    call $t19 := $AddU64($t18, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,13041,13076)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(4,8):", $t9} $t9 == $t9;
        goto L9;
    }

    // $t20 := borrow_field<0x42::integer_vulnerabilities::TokenSupply>.current_supply($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:328:9+21
    $t20 := $ChildMutation($t0, 0, $Dereference($t0)->$current_supply);

    // write_ref($t20, $t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:328:9+59
    $t20 := $UpdateMutation($t20, $t19);

    // write_back[Reference($t0).current_supply (u64)]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:328:9+59
    $t0 := $UpdateMutation($t0, $Update'$42_integer_vulnerabilities_TokenSupply'_current_supply($Dereference($t0), $Dereference($t20)));

    // trace_local[supply]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:328:9+59
    $temp_0'$42_integer_vulnerabilities_TokenSupply' := $Dereference($t0);
    assume {:print "$track_local(4,8,0):", $temp_0'$42_integer_vulnerabilities_TokenSupply'} $temp_0'$42_integer_vulnerabilities_TokenSupply' == $temp_0'$42_integer_vulnerabilities_TokenSupply';

    // trace_local[supply]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:321:7+492
    assume {:print "$at(3,12592,13084)"} true;
    $temp_0'$42_integer_vulnerabilities_TokenSupply' := $Dereference($t0);
    assume {:print "$track_local(4,8,0):", $temp_0'$42_integer_vulnerabilities_TokenSupply'} $temp_0'$42_integer_vulnerabilities_TokenSupply' == $temp_0'$42_integer_vulnerabilities_TokenSupply';

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:321:7+492
    goto L8;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:9+6
    assume {:print "$at(3,12921,12927)"} true;
L6:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:9+6
    assume {:print "$at(3,12921,12927)"} true;

    // $t21 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:56+10
    $t21 := 1001;
    assume $IsValid'u64'($t21);

    // trace_abort($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:9+6
    assume {:print "$at(3,12921,12927)"} true;
    assume {:print "$track_abort(4,8):", $t21} $t21 == $t21;

    // $t9 := move($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:9+6
    $t9 := $t21;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:326:9+6
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:9+6
    assume {:print "$at(3,12843,12849)"} true;
L4:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:9+6
    assume {:print "$at(3,12843,12849)"} true;

    // $t22 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:65+10
    $t22 := 1001;
    assume $IsValid'u64'($t22);

    // trace_abort($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:9+6
    assume {:print "$at(3,12843,12849)"} true;
    assume {:print "$track_abort(4,8):", $t22} $t22 == $t22;

    // $t9 := move($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:9+6
    $t9 := $t22;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:325:9+6
    goto L9;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:9+6
    assume {:print "$at(3,12755,12761)"} true;
L2:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:9+6
    assume {:print "$at(3,12755,12761)"} true;

    // $t23 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:75+10
    $t23 := 1001;
    assume $IsValid'u64'($t23);

    // trace_abort($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:9+6
    assume {:print "$at(3,12755,12761)"} true;
    assume {:print "$track_abort(4,8):", $t23} $t23 == $t23;

    // $t9 := move($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:9+6
    $t9 := $t23;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:324:9+6
    goto L9;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:9+6
    assume {:print "$at(3,12681,12687)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:9+6
    assume {:print "$at(3,12681,12687)"} true;

    // $t24 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:61+10
    $t24 := 1001;
    assume $IsValid'u64'($t24);

    // trace_abort($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:9+6
    assume {:print "$at(3,12681,12687)"} true;
    assume {:print "$track_abort(4,8):", $t24} $t24 == $t24;

    // $t9 := move($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:9+6
    $t9 := $t24;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:323:9+6
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:329:5+1
    assume {:print "$at(3,13083,13084)"} true;
L8:

    // assert Not(Gt(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:341:9+68
    assume {:print "$at(3,13599,13667)"} true;
    assert {:msg "assert_failed(3,13599,13667): function does not abort under this condition"}
      !($t2->$current_supply > $t2->$max_supply);

    // assert Not(Gt($t1, Sub(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2)))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:342:9+82
    assume {:print "$at(3,13677,13759)"} true;
    assert {:msg "assert_failed(3,13677,13759): function does not abort under this condition"}
      !($t1 > ($t2->$max_supply - $t2->$current_supply));

    // assert Not(Gt(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), Sub(18446744073709551615, $t1))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:343:9+72
    assume {:print "$at(3,13769,13841)"} true;
    assert {:msg "assert_failed(3,13769,13841): function does not abort under this condition"}
      !($t2->$current_supply > (18446744073709551615 - $t1));

    // assert Not(Gt(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), 1000000000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:344:9+63
    assume {:print "$at(3,13851,13914)"} true;
    assert {:msg "assert_failed(3,13851,13914): function does not abort under this condition"}
      !($t2->$max_supply > 1000000000000);

    // assert Eq<u64>(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t0), Add(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:337:9+74
    assume {:print "$at(3,13390,13464)"} true;
    assert {:msg "assert_failed(3,13390,13464): post-condition does not hold"}
      $IsEqual'u64'($Dereference($t0)->$current_supply, ($t2->$current_supply + $t1));

    // assert Eq<u64>(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t0), select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:338:9+52
    assume {:print "$at(3,13474,13526)"} true;
    assert {:msg "assert_failed(3,13474,13526): post-condition does not hold"}
      $IsEqual'u64'($Dereference($t0)->$max_supply, $t2->$max_supply);

    // assert Le(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t0), select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:339:9+51
    assume {:print "$at(3,13536,13587)"} true;
    assert {:msg "assert_failed(3,13536,13587): post-condition does not hold"}
      ($Dereference($t0)->$current_supply <= $Dereference($t0)->$max_supply);

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:339:9+51
    $ret0 := $t0;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:329:5+1
    assume {:print "$at(3,13083,13084)"} true;
L9:

    // assert Or(Or(Or(Gt(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2)), Gt($t1, Sub(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2)))), Gt(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), Sub(18446744073709551615, $t1))), Gt(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), 1000000000000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:331:5+829
    assume {:print "$at(3,13092,13921)"} true;
    assert {:msg "assert_failed(3,13092,13921): abort not covered by any of the `aborts_if` clauses"}
      (((($t2->$current_supply > $t2->$max_supply) || ($t1 > ($t2->$max_supply - $t2->$current_supply))) || ($t2->$current_supply > (18446744073709551615 - $t1))) || ($t2->$max_supply > 1000000000000));

    // assert Or(Or(Or(And(Gt(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2)), Eq(1001, $t9)), And(Gt($t1, Sub(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2))), Eq(1001, $t9))), And(Gt(select integer_vulnerabilities::TokenSupply.current_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), Sub(18446744073709551615, $t1)), Eq(1001, $t9))), And(Gt(select integer_vulnerabilities::TokenSupply.max_supply<0x42::integer_vulnerabilities::TokenSupply>($t2), 1000000000000), Eq(1001, $t9))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:331:5+829
    assert {:msg "assert_failed(3,13092,13921): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((($t2->$current_supply > $t2->$max_supply) && $IsEqual'num'(1001, $t9)) || (($t1 > ($t2->$max_supply - $t2->$current_supply)) && $IsEqual'num'(1001, $t9))) || (($t2->$current_supply > (18446744073709551615 - $t1)) && $IsEqual'num'(1001, $t9))) || (($t2->$max_supply > 1000000000000) && $IsEqual'num'(1001, $t9)));

    // abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:331:5+829
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::safe_add [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:45:5+112
procedure {:timeLimit 40} $42_integer_vulnerabilities_safe_add$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:45:5+1
    assume {:print "$at(3,2087,2088)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:45:5+1
    assume $IsValid'u64'($t1);

    // assume Le($t0, Sub(18446744073709551615, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:52:9+26
    assume {:print "$at(3,2266,2292)"} true;
    assume ($t0 <= (18446744073709551615 - $t1));

    // trace_local[a]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:45:5+1
    assume {:print "$at(3,2087,2088)"} true;
    assume {:print "$track_local(4,10,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:45:5+1
    assume {:print "$track_local(4,10,1):", $t1} $t1 == $t1;

    // $t2 := 18446744073709551615 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:22+7
    assume {:print "$at(3,2152,2159)"} true;
    $t2 := 18446744073709551615;
    assume $IsValid'u64'($t2);

    // $t3 := -($t2, $t1) on_abort goto L3 with $t4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:22+11
    call $t3 := $Sub($t2, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,2152,2163)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,10):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := <=($t0, $t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:17+16
    call $t5 := $Le($t0, $t3);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:9+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:47:9+1
    assume {:print "$at(3,2187,2188)"} true;
L1:

    // $t6 := +($t0, $t1) on_abort goto L3 with $t4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:47:9+5
    assume {:print "$at(3,2187,2192)"} true;
    call $t6 := $AddU64($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,2187,2192)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,10):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:45:46+71
    assume {:print "$at(3,2128,2199)"} true;
    assume {:print "$track_return(4,10,0):", $t6} $t6 == $t6;

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:45:46+71
    goto L2;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:35+10
    assume {:print "$at(3,2165,2175)"} true;
L0:

    // $t7 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:35+10
    assume {:print "$at(3,2165,2175)"} true;
    $t7 := 1001;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:9+6
    assume {:print "$at(3,2139,2145)"} true;
    assume {:print "$track_abort(4,10):", $t7} $t7 == $t7;

    // $t4 := move($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:9+6
    $t4 := $t7;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:46:9+6
    goto L3;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:48:5+1
    assume {:print "$at(3,2198,2199)"} true;
L2:

    // assert Not(Gt($t0, Sub(18446744073709551615, $t1))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:53:9+42
    assume {:print "$at(3,2302,2344)"} true;
    assert {:msg "assert_failed(3,2302,2344): function does not abort under this condition"}
      !($t0 > (18446744073709551615 - $t1));

    // assert Eq<u64>($t6, Add($t0, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:51:9+24
    assume {:print "$at(3,2232,2256)"} true;
    assert {:msg "assert_failed(3,2232,2256): post-condition does not hold"}
      $IsEqual'u64'($t6, ($t0 + $t1));

    // return $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:51:9+24
    $ret0 := $t6;
    return;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:48:5+1
    assume {:print "$at(3,2198,2199)"} true;
L3:

    // assert Gt($t0, Sub(18446744073709551615, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:50:5+144
    assume {:print "$at(3,2207,2351)"} true;
    assert {:msg "assert_failed(3,2207,2351): abort not covered by any of the `aborts_if` clauses"}
      ($t0 > (18446744073709551615 - $t1));

    // assert And(Gt($t0, Sub(18446744073709551615, $t1)), Eq(1001, $t4)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:50:5+144
    assert {:msg "assert_failed(3,2207,2351): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($t0 > (18446744073709551615 - $t1)) && $IsEqual'num'(1001, $t4));

    // abort($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:50:5+144
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::safe_div [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:73:5+109
procedure {:timeLimit 40} $42_integer_vulnerabilities_safe_div$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:73:5+1
    assume {:print "$at(3,2960,2961)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:73:5+1
    assume $IsValid'u64'($t1);

    // assume Gt($t1, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:80:9+15
    assume {:print "$at(3,3136,3151)"} true;
    assume ($t1 > 0);

    // trace_local[a]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:73:5+1
    assume {:print "$at(3,2960,2961)"} true;
    assume {:print "$track_local(4,11,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:73:5+1
    assume {:print "$track_local(4,11,1):", $t1} $t1 == $t1;

    // $t2 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:21+1
    assume {:print "$at(3,3024,3025)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := >($t1, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:17+5
    call $t3 := $Gt($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:9+6
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:75:9+1
    assume {:print "$at(3,3057,3058)"} true;
L1:

    // $t4 := /($t0, $t1) on_abort goto L3 with $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:75:9+5
    assume {:print "$at(3,3057,3062)"} true;
    call $t4 := $Div($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,3057,3062)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(4,11):", $t5} $t5 == $t5;
        goto L3;
    }

    // trace_return[0]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:73:46+68
    assume {:print "$at(3,3001,3069)"} true;
    assume {:print "$track_return(4,11,0):", $t4} $t4 == $t4;

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:73:46+68
    goto L2;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:24+18
    assume {:print "$at(3,3027,3045)"} true;
L0:

    // $t6 := 1003 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:24+18
    assume {:print "$at(3,3027,3045)"} true;
    $t6 := 1003;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:9+6
    assume {:print "$at(3,3012,3018)"} true;
    assume {:print "$track_abort(4,11):", $t6} $t6 == $t6;

    // $t5 := move($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:9+6
    $t5 := $t6;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:74:9+6
    goto L3;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:76:5+1
    assume {:print "$at(3,3068,3069)"} true;
L2:

    // assert Not(Eq<u64>($t1, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:81:9+41
    assume {:print "$at(3,3161,3202)"} true;
    assert {:msg "assert_failed(3,3161,3202): function does not abort under this condition"}
      !$IsEqual'u64'($t1, 0);

    // assert Eq<u64>($t4, Div($t0, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:79:9+24
    assume {:print "$at(3,3102,3126)"} true;
    assert {:msg "assert_failed(3,3102,3126): post-condition does not hold"}
      $IsEqual'u64'($t4, ($t0 div $t1));

    // return $t4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:79:9+24
    $ret0 := $t4;
    return;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:76:5+1
    assume {:print "$at(3,3068,3069)"} true;
L3:

    // assert Eq<u64>($t1, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:78:5+132
    assume {:print "$at(3,3077,3209)"} true;
    assert {:msg "assert_failed(3,3077,3209): abort not covered by any of the `aborts_if` clauses"}
      $IsEqual'u64'($t1, 0);

    // assert And(Eq<u64>($t1, 0), Eq(1003, $t5)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:78:5+132
    assert {:msg "assert_failed(3,3077,3209): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($IsEqual'u64'($t1, 0) && $IsEqual'num'(1003, $t5));

    // abort($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:78:5+132
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::safe_downcast [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:166:5+159
procedure {:timeLimit 40} $42_integer_vulnerabilities_safe_downcast$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t0: int;
    var $temp_0'u128': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:166:5+1
    assume {:print "$at(3,6704,6705)"} true;
    assume $IsValid'u128'($t0);

    // assume Le($t0, 18446744073709551615) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:173:9+32
    assume {:print "$at(3,6941,6973)"} true;
    assume ($t0 <= 18446744073709551615);

    // trace_local[large_value]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:166:5+1
    assume {:print "$at(3,6704,6705)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // $t1 := 18446744073709551615 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:32+17
    assume {:print "$at(3,6787,6804)"} true;
    $t1 := 18446744073709551615;
    assume $IsValid'u128'($t1);

    // $t2 := <=($t0, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:17+32
    call $t2 := $Le($t0, $t1);

    // if ($t2) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:9+6
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:168:9+18
    assume {:print "$at(3,6838,6856)"} true;
L1:

    // $t3 := (u64)($t0) on_abort goto L3 with $t4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:168:9+18
    assume {:print "$at(3,6838,6856)"} true;
    call $t3 := $CastU64($t0);
    if ($abort_flag) {
        assume {:print "$at(3,6838,6856)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,12):", $t4} $t4 == $t4;
        goto L3;
    }

    // trace_return[0]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:166:54+110
    assume {:print "$at(3,6753,6863)"} true;
    assume {:print "$track_return(4,12,0):", $t3} $t3 == $t3;

    // goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:166:54+110
    goto L2;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:51+20
    assume {:print "$at(3,6806,6826)"} true;
L0:

    // $t5 := 1005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:51+20
    assume {:print "$at(3,6806,6826)"} true;
    $t5 := 1005;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:9+6
    assume {:print "$at(3,6764,6770)"} true;
    assume {:print "$track_abort(4,12):", $t5} $t5 == $t5;

    // $t4 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:9+6
    $t4 := $t5;

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:167:9+6
    goto L3;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:169:5+1
    assume {:print "$at(3,6862,6863)"} true;
L2:

    // assert Not(Gt($t0, 18446744073709551615)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:174:9+58
    assume {:print "$at(3,6983,7041)"} true;
    assert {:msg "assert_failed(3,6983,7041): function does not abort under this condition"}
      !($t0 > 18446744073709551615);

    // assert Eq<u64>($t3, $t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:172:9+30
    assume {:print "$at(3,6901,6931)"} true;
    assert {:msg "assert_failed(3,6901,6931): post-condition does not hold"}
      $IsEqual'u64'($t3, $t0);

    // return $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:172:9+30
    $ret0 := $t3;
    return;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:169:5+1
    assume {:print "$at(3,6862,6863)"} true;
L3:

    // assert Gt($t0, 18446744073709551615) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:171:5+177
    assume {:print "$at(3,6871,7048)"} true;
    assert {:msg "assert_failed(3,6871,7048): abort not covered by any of the `aborts_if` clauses"}
      ($t0 > 18446744073709551615);

    // assert And(Gt($t0, 18446744073709551615), Eq(1005, $t4)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:171:5+177
    assert {:msg "assert_failed(3,6871,7048): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (($t0 > 18446744073709551615) && $IsEqual'num'(1005, $t4));

    // abort($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:171:5+177
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::safe_mul [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:5+143
procedure {:timeLimit 40} $42_integer_vulnerabilities_safe_mul$verify(_$t0: int, _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:5+1
    assume {:print "$at(3,2486,2487)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:5+1
    assume $IsValid'u64'($t1);

    // assume Or(Eq<u64>($t1, 0), Le($t0, Div(18446744073709551615, $t1))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:67:9+36
    assume {:print "$at(3,2737,2773)"} true;
    assume ($IsEqual'u64'($t1, 0) || ($t0 <= (18446744073709551615 div $t1)));

    // trace_local[a]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:5+1
    assume {:print "$at(3,2486,2487)"} true;
    assume {:print "$track_local(4,13,0):", $t0} $t0 == $t0;

    // trace_local[b]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:5+1
    assume {:print "$track_local(4,13,1):", $t1} $t1 == $t1;

    // $t2 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:18+1
    assume {:print "$at(3,2547,2548)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := ==($t1, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:13+6
    $t3 := $IsEqual'u64'($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:9+20
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:28+1
L1:

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:28+1
    assume {:print "$at(3,2557,2558)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_return[0]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:21+8
    assume {:print "$track_return(4,13,0):", $t4} $t4 == $t4;

    // $t5 := move($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:21+8
    $t5 := $t4;

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:59:21+8
    goto L4;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:17+1
    assume {:print "$at(3,2577,2578)"} true;
L0:

    // $t6 := 18446744073709551615 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:22+7
    assume {:print "$at(3,2582,2589)"} true;
    $t6 := 18446744073709551615;
    assume $IsValid'u64'($t6);

    // $t7 := /($t6, $t1) on_abort goto L5 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:22+11
    call $t7 := $Div($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,2582,2593)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(4,13):", $t8} $t8 == $t8;
        goto L5;
    }

    // $t9 := <=($t0, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:17+16
    call $t9 := $Le($t0, $t7);

    // if ($t9) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:9+6
    if ($t9) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:61:9+1
    assume {:print "$at(3,2617,2618)"} true;
L3:

    // $t10 := *($t0, $t1) on_abort goto L5 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:61:9+5
    assume {:print "$at(3,2617,2622)"} true;
    call $t10 := $MulU64($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,2617,2622)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(4,13):", $t8} $t8 == $t8;
        goto L5;
    }

    // trace_return[0]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:46+102
    assume {:print "$at(3,2527,2629)"} true;
    assume {:print "$track_return(4,13,0):", $t10} $t10 == $t10;

    // $t5 := move($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:46+102
    $t5 := $t10;

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:58:46+102
    goto L4;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:35+10
    assume {:print "$at(3,2595,2605)"} true;
L2:

    // $t11 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:35+10
    assume {:print "$at(3,2595,2605)"} true;
    $t11 := 1001;
    assume $IsValid'u64'($t11);

    // trace_abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:9+6
    assume {:print "$at(3,2569,2575)"} true;
    assume {:print "$track_abort(4,13):", $t11} $t11 == $t11;

    // $t8 := move($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:9+6
    $t8 := $t11;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:60:9+6
    goto L5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:62:5+1
    assume {:print "$at(3,2628,2629)"} true;
L4:

    // assert Not(And(Neq<u64>($t1, 0), Gt($t0, Div(18446744073709551615, $t1)))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:68:9+52
    assume {:print "$at(3,2783,2835)"} true;
    assert {:msg "assert_failed(3,2783,2835): function does not abort under this condition"}
      !(!$IsEqual'u64'($t1, 0) && ($t0 > (18446744073709551615 div $t1)));

    // assert Eq<u64>($t5, Mul($t0, $t1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:65:9+24
    assume {:print "$at(3,2662,2686)"} true;
    assert {:msg "assert_failed(3,2662,2686): post-condition does not hold"}
      $IsEqual'u64'($t5, ($t0 * $t1));

    // assert Implies(Eq<u64>($t1, 0), Eq<u64>($t5, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:66:9+31
    assume {:print "$at(3,2696,2727)"} true;
    assert {:msg "assert_failed(3,2696,2727): post-condition does not hold"}
      ($IsEqual'u64'($t1, 0) ==> $IsEqual'u64'($t5, 0));

    // return $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:66:9+31
    $ret0 := $t5;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:62:5+1
    assume {:print "$at(3,2628,2629)"} true;
L5:

    // assert And(Neq<u64>($t1, 0), Gt($t0, Div(18446744073709551615, $t1))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:64:5+205
    assume {:print "$at(3,2637,2842)"} true;
    assert {:msg "assert_failed(3,2637,2842): abort not covered by any of the `aborts_if` clauses"}
      (!$IsEqual'u64'($t1, 0) && ($t0 > (18446744073709551615 div $t1)));

    // assert And(And(Neq<u64>($t1, 0), Gt($t0, Div(18446744073709551615, $t1))), Eq(1001, $t8)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:64:5+205
    assert {:msg "assert_failed(3,2637,2842): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((!$IsEqual'u64'($t1, 0) && ($t0 > (18446744073709551615 div $t1))) && $IsEqual'num'(1001, $t8));

    // abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:64:5+205
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun integer_vulnerabilities::simple_interest_verified [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:5+434
procedure {:timeLimit 40} $42_integer_vulnerabilities_simple_interest_verified$verify(_$t0: int, _$t1: int, _$t2: int) returns ($ret0: int)
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:5+1
    assume {:print "$at(3,14091,14092)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:5+1
    assume $IsValid'u64'($t2);

    // assume Le($t1, 100) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:359:9+25
    assume {:print "$at(3,14574,14599)"} true;
    assume ($t1 <= 100);

    // assume Le($t2, 10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:360:9+23
    assume {:print "$at(3,14609,14632)"} true;
    assume ($t2 <= 10);

    // assume Le($t0, 100000) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:361:9+32
    assume {:print "$at(3,14642,14674)"} true;
    assume ($t0 <= 100000);

    // trace_local[principal]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:5+1
    assume {:print "$at(3,14091,14092)"} true;
    assume {:print "$track_local(4,14,0):", $t0} $t0 == $t0;

    // trace_local[rate_bps]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:5+1
    assume {:print "$track_local(4,14,1):", $t1} $t1 == $t1;

    // trace_local[periods]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:5+1
    assume {:print "$track_local(4,14,2):", $t2} $t2 == $t2;

    // $t4 := 100 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:29+3
    assume {:print "$at(3,14208,14211)"} true;
    $t4 := 100;
    assume $IsValid'u64'($t4);

    // $t5 := <=($t1, $t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:17+15
    call $t5 := $Le($t1, $t4);

    // if ($t5) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:9+6
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:17+7
    assume {:print "$at(3,14275,14282)"} true;
L1:

    // $t6 := 10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:28+2
    assume {:print "$at(3,14286,14288)"} true;
    $t6 := 10;
    assume $IsValid'u64'($t6);

    // $t7 := <=($t2, $t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:17+13
    call $t7 := $Le($t2, $t6);

    // if ($t7) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:9+6
    if ($t7) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:17+9
    assume {:print "$at(3,14339,14348)"} true;
L3:

    // $t8 := 100000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:30+9
    assume {:print "$at(3,14352,14361)"} true;
    $t8 := 100000;
    assume $IsValid'u64'($t8);

    // $t9 := <=($t0, $t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:17+22
    call $t9 := $Le($t0, $t8);

    // if ($t9) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:9+6
    if ($t9) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:354:31+9
    assume {:print "$at(3,14442,14451)"} true;
L5:

    // $t10 := *($t0, $t1) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:354:31+20
    assume {:print "$at(3,14442,14462)"} true;
    call $t10 := $MulU64($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,14442,14462)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(4,14):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t12 := *($t10, $t2) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:354:30+32
    call $t12 := $MulU64($t10, $t2);
    if ($abort_flag) {
        assume {:print "$at(3,14441,14473)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(4,14):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t13 := 10000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:354:65+5
    $t13 := 10000;
    assume $IsValid'u64'($t13);

    // $t14 := /($t12, $t13) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:354:30+40
    call $t14 := $Div($t12, $t13);
    if ($abort_flag) {
        assume {:print "$at(3,14441,14481)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(4,14):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_local[$t5]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:354:30+40
    assume {:print "$track_local(4,14,3):", $t14} $t14 == $t14;

    // $t15 := +($t0, $t14) on_abort goto L7 with $t11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:355:9+26
    assume {:print "$at(3,14492,14518)"} true;
    call $t15 := $AddU64($t0, $t14);
    if ($abort_flag) {
        assume {:print "$at(3,14492,14518)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(4,14):", $t11} $t11 == $t11;
        goto L7;
    }

    // trace_return[0]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:91+348
    assume {:print "$at(3,14177,14525)"} true;
    assume {:print "$track_return(4,14,0):", $t15} $t15 == $t15;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:349:91+348
    goto L6;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:41+10
    assume {:print "$at(3,14363,14373)"} true;
L4:

    // $t16 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:41+10
    assume {:print "$at(3,14363,14373)"} true;
    $t16 := 1001;
    assume $IsValid'u64'($t16);

    // trace_abort($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:9+6
    assume {:print "$at(3,14331,14337)"} true;
    assume {:print "$track_abort(4,14):", $t16} $t16 == $t16;

    // $t11 := move($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:9+6
    $t11 := $t16;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:352:9+6
    goto L7;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:32+10
    assume {:print "$at(3,14290,14300)"} true;
L2:

    // $t17 := 1001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:32+10
    assume {:print "$at(3,14290,14300)"} true;
    $t17 := 1001;
    assume $IsValid'u64'($t17);

    // trace_abort($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:9+6
    assume {:print "$at(3,14267,14273)"} true;
    assume {:print "$track_abort(4,14):", $t17} $t17 == $t17;

    // $t11 := move($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:9+6
    $t11 := $t17;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:351:9+6
    goto L7;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:34+20
    assume {:print "$at(3,14213,14233)"} true;
L0:

    // $t18 := 1005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:34+20
    assume {:print "$at(3,14213,14233)"} true;
    $t18 := 1005;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:9+6
    assume {:print "$at(3,14188,14194)"} true;
    assume {:print "$track_abort(4,14):", $t18} $t18 == $t18;

    // $t11 := move($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:9+6
    $t11 := $t18;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:350:9+6
    goto L7;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:356:5+1
    assume {:print "$at(3,14524,14525)"} true;
L6:

    // assert Not(Gt($t1, 100)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:366:9+51
    assume {:print "$at(3,14807,14858)"} true;
    assert {:msg "assert_failed(3,14807,14858): function does not abort under this condition"}
      !($t1 > 100);

    // assert Not(Gt($t2, 10)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:367:9+39
    assume {:print "$at(3,14868,14907)"} true;
    assert {:msg "assert_failed(3,14868,14907): function does not abort under this condition"}
      !($t2 > 10);

    // assert Not(Gt($t0, 100000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:368:9+48
    assume {:print "$at(3,14917,14965)"} true;
    assert {:msg "assert_failed(3,14917,14965): function does not abort under this condition"}
      !($t0 > 100000);

    // assert Eq<u64>($t15, Add($t0, Div(Mul(Mul($t0, $t1), $t2), 10000))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:363:9+71
    assume {:print "$at(3,14686,14757)"} true;
    assert {:msg "assert_failed(3,14686,14757): post-condition does not hold"}
      $IsEqual'u64'($t15, ($t0 + ((($t0 * $t1) * $t2) div 10000)));

    // assert Ge($t15, $t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:364:9+28
    assume {:print "$at(3,14767,14795)"} true;
    assert {:msg "assert_failed(3,14767,14795): post-condition does not hold"}
      ($t15 >= $t0);

    // return $t15 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:364:9+28
    $ret0 := $t15;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:356:5+1
    assume {:print "$at(3,14524,14525)"} true;
L7:

    // assert Or(Or(Gt($t1, 100), Gt($t2, 10)), Gt($t0, 100000)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:358:5+439
    assume {:print "$at(3,14533,14972)"} true;
    assert {:msg "assert_failed(3,14533,14972): abort not covered by any of the `aborts_if` clauses"}
      ((($t1 > 100) || ($t2 > 10)) || ($t0 > 100000));

    // assert Or(Or(And(Gt($t1, 100), Eq(1005, $t11)), And(Gt($t2, 10), Eq(1001, $t11))), And(Gt($t0, 100000), Eq(1001, $t11))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:358:5+439
    assert {:msg "assert_failed(3,14533,14972): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($t1 > 100) && $IsEqual'num'(1005, $t11)) || (($t2 > 10) && $IsEqual'num'(1001, $t11))) || (($t0 > 100000) && $IsEqual'num'(1001, $t11)));

    // abort($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/integer_vulnerabilities.move:358:5+439
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// struct reentrancy_comprehensive::Balance at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:76:5+109
datatype $42_reentrancy_comprehensive_Balance {
    $42_reentrancy_comprehensive_Balance($owner: int, $amount: int, $frozen: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Balance'_owner(s: $42_reentrancy_comprehensive_Balance, x: int): $42_reentrancy_comprehensive_Balance {
    $42_reentrancy_comprehensive_Balance(x, s->$amount, s->$frozen)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Balance'_amount(s: $42_reentrancy_comprehensive_Balance, x: int): $42_reentrancy_comprehensive_Balance {
    $42_reentrancy_comprehensive_Balance(s->$owner, x, s->$frozen)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Balance'_frozen(s: $42_reentrancy_comprehensive_Balance, x: bool): $42_reentrancy_comprehensive_Balance {
    $42_reentrancy_comprehensive_Balance(s->$owner, s->$amount, x)
}
function $IsValid'$42_reentrancy_comprehensive_Balance'(s: $42_reentrancy_comprehensive_Balance): bool {
    $IsValid'address'(s->$owner)
      && $IsValid'u64'(s->$amount)
      && $IsValid'bool'(s->$frozen)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_Balance'(s1: $42_reentrancy_comprehensive_Balance, s2: $42_reentrancy_comprehensive_Balance): bool {
    s1 == s2
}

// struct reentrancy_comprehensive::Bank at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:68:5+210
datatype $42_reentrancy_comprehensive_Bank {
    $42_reentrancy_comprehensive_Bank($balances: Vec ($42_reentrancy_comprehensive_Balance), $total_deposits: int, $pending_withdrawals: Vec ($42_reentrancy_comprehensive_Withdrawal), $reentrancy_guard: bool, $emergency_locked: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Bank'_balances(s: $42_reentrancy_comprehensive_Bank, x: Vec ($42_reentrancy_comprehensive_Balance)): $42_reentrancy_comprehensive_Bank {
    $42_reentrancy_comprehensive_Bank(x, s->$total_deposits, s->$pending_withdrawals, s->$reentrancy_guard, s->$emergency_locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Bank'_total_deposits(s: $42_reentrancy_comprehensive_Bank, x: int): $42_reentrancy_comprehensive_Bank {
    $42_reentrancy_comprehensive_Bank(s->$balances, x, s->$pending_withdrawals, s->$reentrancy_guard, s->$emergency_locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Bank'_pending_withdrawals(s: $42_reentrancy_comprehensive_Bank, x: Vec ($42_reentrancy_comprehensive_Withdrawal)): $42_reentrancy_comprehensive_Bank {
    $42_reentrancy_comprehensive_Bank(s->$balances, s->$total_deposits, x, s->$reentrancy_guard, s->$emergency_locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Bank'_reentrancy_guard(s: $42_reentrancy_comprehensive_Bank, x: bool): $42_reentrancy_comprehensive_Bank {
    $42_reentrancy_comprehensive_Bank(s->$balances, s->$total_deposits, s->$pending_withdrawals, x, s->$emergency_locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Bank'_emergency_locked(s: $42_reentrancy_comprehensive_Bank, x: bool): $42_reentrancy_comprehensive_Bank {
    $42_reentrancy_comprehensive_Bank(s->$balances, s->$total_deposits, s->$pending_withdrawals, s->$reentrancy_guard, x)
}
function $IsValid'$42_reentrancy_comprehensive_Bank'(s: $42_reentrancy_comprehensive_Bank): bool {
    $IsValid'vec'$42_reentrancy_comprehensive_Balance''(s->$balances)
      && $IsValid'u64'(s->$total_deposits)
      && $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''(s->$pending_withdrawals)
      && $IsValid'bool'(s->$reentrancy_guard)
      && $IsValid'bool'(s->$emergency_locked)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_Bank'(s1: $42_reentrancy_comprehensive_Bank, s2: $42_reentrancy_comprehensive_Bank): bool {
    $IsEqual'vec'$42_reentrancy_comprehensive_Balance''(s1->$balances, s2->$balances)
    && $IsEqual'u64'(s1->$total_deposits, s2->$total_deposits)
    && $IsEqual'vec'$42_reentrancy_comprehensive_Withdrawal''(s1->$pending_withdrawals, s2->$pending_withdrawals)
    && $IsEqual'bool'(s1->$reentrancy_guard, s2->$reentrancy_guard)
    && $IsEqual'bool'(s1->$emergency_locked, s2->$emergency_locked)}
var $42_reentrancy_comprehensive_Bank_$memory: $Memory $42_reentrancy_comprehensive_Bank;

// struct reentrancy_comprehensive::BridgeState at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:907:5+199
datatype $42_reentrancy_comprehensive_BridgeState {
    $42_reentrancy_comprehensive_BridgeState($sui_balances: Vec ($42_reentrancy_comprehensive_Balance), $aptos_balances: Vec ($42_reentrancy_comprehensive_Balance), $cross_chain_locks: Vec ($42_reentrancy_comprehensive_CrossChainLock), $bridge_active: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_BridgeState'_sui_balances(s: $42_reentrancy_comprehensive_BridgeState, x: Vec ($42_reentrancy_comprehensive_Balance)): $42_reentrancy_comprehensive_BridgeState {
    $42_reentrancy_comprehensive_BridgeState(x, s->$aptos_balances, s->$cross_chain_locks, s->$bridge_active)
}
function {:inline} $Update'$42_reentrancy_comprehensive_BridgeState'_aptos_balances(s: $42_reentrancy_comprehensive_BridgeState, x: Vec ($42_reentrancy_comprehensive_Balance)): $42_reentrancy_comprehensive_BridgeState {
    $42_reentrancy_comprehensive_BridgeState(s->$sui_balances, x, s->$cross_chain_locks, s->$bridge_active)
}
function {:inline} $Update'$42_reentrancy_comprehensive_BridgeState'_cross_chain_locks(s: $42_reentrancy_comprehensive_BridgeState, x: Vec ($42_reentrancy_comprehensive_CrossChainLock)): $42_reentrancy_comprehensive_BridgeState {
    $42_reentrancy_comprehensive_BridgeState(s->$sui_balances, s->$aptos_balances, x, s->$bridge_active)
}
function {:inline} $Update'$42_reentrancy_comprehensive_BridgeState'_bridge_active(s: $42_reentrancy_comprehensive_BridgeState, x: bool): $42_reentrancy_comprehensive_BridgeState {
    $42_reentrancy_comprehensive_BridgeState(s->$sui_balances, s->$aptos_balances, s->$cross_chain_locks, x)
}
function $IsValid'$42_reentrancy_comprehensive_BridgeState'(s: $42_reentrancy_comprehensive_BridgeState): bool {
    $IsValid'vec'$42_reentrancy_comprehensive_Balance''(s->$sui_balances)
      && $IsValid'vec'$42_reentrancy_comprehensive_Balance''(s->$aptos_balances)
      && $IsValid'vec'$42_reentrancy_comprehensive_CrossChainLock''(s->$cross_chain_locks)
      && $IsValid'bool'(s->$bridge_active)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_BridgeState'(s1: $42_reentrancy_comprehensive_BridgeState, s2: $42_reentrancy_comprehensive_BridgeState): bool {
    $IsEqual'vec'$42_reentrancy_comprehensive_Balance''(s1->$sui_balances, s2->$sui_balances)
    && $IsEqual'vec'$42_reentrancy_comprehensive_Balance''(s1->$aptos_balances, s2->$aptos_balances)
    && $IsEqual'vec'$42_reentrancy_comprehensive_CrossChainLock''(s1->$cross_chain_locks, s2->$cross_chain_locks)
    && $IsEqual'bool'(s1->$bridge_active, s2->$bridge_active)}
var $42_reentrancy_comprehensive_BridgeState_$memory: $Memory $42_reentrancy_comprehensive_BridgeState;

// struct reentrancy_comprehensive::CompletedTransfer at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:568:5+148
datatype $42_reentrancy_comprehensive_CompletedTransfer {
    $42_reentrancy_comprehensive_CompletedTransfer($from: int, $to: int, $amount: int, $completion_time: int)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CompletedTransfer'_from(s: $42_reentrancy_comprehensive_CompletedTransfer, x: int): $42_reentrancy_comprehensive_CompletedTransfer {
    $42_reentrancy_comprehensive_CompletedTransfer(x, s->$to, s->$amount, s->$completion_time)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CompletedTransfer'_to(s: $42_reentrancy_comprehensive_CompletedTransfer, x: int): $42_reentrancy_comprehensive_CompletedTransfer {
    $42_reentrancy_comprehensive_CompletedTransfer(s->$from, x, s->$amount, s->$completion_time)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CompletedTransfer'_amount(s: $42_reentrancy_comprehensive_CompletedTransfer, x: int): $42_reentrancy_comprehensive_CompletedTransfer {
    $42_reentrancy_comprehensive_CompletedTransfer(s->$from, s->$to, x, s->$completion_time)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CompletedTransfer'_completion_time(s: $42_reentrancy_comprehensive_CompletedTransfer, x: int): $42_reentrancy_comprehensive_CompletedTransfer {
    $42_reentrancy_comprehensive_CompletedTransfer(s->$from, s->$to, s->$amount, x)
}
function $IsValid'$42_reentrancy_comprehensive_CompletedTransfer'(s: $42_reentrancy_comprehensive_CompletedTransfer): bool {
    $IsValid'address'(s->$from)
      && $IsValid'address'(s->$to)
      && $IsValid'u64'(s->$amount)
      && $IsValid'u64'(s->$completion_time)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_CompletedTransfer'(s1: $42_reentrancy_comprehensive_CompletedTransfer, s2: $42_reentrancy_comprehensive_CompletedTransfer): bool {
    s1 == s2
}

// struct reentrancy_comprehensive::ComplexSystem at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:742:5+192
datatype $42_reentrancy_comprehensive_ComplexSystem {
    $42_reentrancy_comprehensive_ComplexSystem($subsystems: Vec ($42_reentrancy_comprehensive_Subsystem), $global_lock: bool, $processing_queue: Vec ($42_reentrancy_comprehensive_QueuedOperation), $deadlock_detection: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ComplexSystem'_subsystems(s: $42_reentrancy_comprehensive_ComplexSystem, x: Vec ($42_reentrancy_comprehensive_Subsystem)): $42_reentrancy_comprehensive_ComplexSystem {
    $42_reentrancy_comprehensive_ComplexSystem(x, s->$global_lock, s->$processing_queue, s->$deadlock_detection)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ComplexSystem'_global_lock(s: $42_reentrancy_comprehensive_ComplexSystem, x: bool): $42_reentrancy_comprehensive_ComplexSystem {
    $42_reentrancy_comprehensive_ComplexSystem(s->$subsystems, x, s->$processing_queue, s->$deadlock_detection)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ComplexSystem'_processing_queue(s: $42_reentrancy_comprehensive_ComplexSystem, x: Vec ($42_reentrancy_comprehensive_QueuedOperation)): $42_reentrancy_comprehensive_ComplexSystem {
    $42_reentrancy_comprehensive_ComplexSystem(s->$subsystems, s->$global_lock, x, s->$deadlock_detection)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ComplexSystem'_deadlock_detection(s: $42_reentrancy_comprehensive_ComplexSystem, x: bool): $42_reentrancy_comprehensive_ComplexSystem {
    $42_reentrancy_comprehensive_ComplexSystem(s->$subsystems, s->$global_lock, s->$processing_queue, x)
}
function $IsValid'$42_reentrancy_comprehensive_ComplexSystem'(s: $42_reentrancy_comprehensive_ComplexSystem): bool {
    $IsValid'vec'$42_reentrancy_comprehensive_Subsystem''(s->$subsystems)
      && $IsValid'bool'(s->$global_lock)
      && $IsValid'vec'$42_reentrancy_comprehensive_QueuedOperation''(s->$processing_queue)
      && $IsValid'bool'(s->$deadlock_detection)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_ComplexSystem'(s1: $42_reentrancy_comprehensive_ComplexSystem, s2: $42_reentrancy_comprehensive_ComplexSystem): bool {
    $IsEqual'vec'$42_reentrancy_comprehensive_Subsystem''(s1->$subsystems, s2->$subsystems)
    && $IsEqual'bool'(s1->$global_lock, s2->$global_lock)
    && $IsEqual'vec'$42_reentrancy_comprehensive_QueuedOperation''(s1->$processing_queue, s2->$processing_queue)
    && $IsEqual'bool'(s1->$deadlock_detection, s2->$deadlock_detection)}
var $42_reentrancy_comprehensive_ComplexSystem_$memory: $Memory $42_reentrancy_comprehensive_ComplexSystem;

// struct reentrancy_comprehensive::CrossChainLock at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:914:5+187
datatype $42_reentrancy_comprehensive_CrossChainLock {
    $42_reentrancy_comprehensive_CrossChainLock($source_chain: int, $target_chain: int, $user: int, $amount: int, $locked: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CrossChainLock'_source_chain(s: $42_reentrancy_comprehensive_CrossChainLock, x: int): $42_reentrancy_comprehensive_CrossChainLock {
    $42_reentrancy_comprehensive_CrossChainLock(x, s->$target_chain, s->$user, s->$amount, s->$locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CrossChainLock'_target_chain(s: $42_reentrancy_comprehensive_CrossChainLock, x: int): $42_reentrancy_comprehensive_CrossChainLock {
    $42_reentrancy_comprehensive_CrossChainLock(s->$source_chain, x, s->$user, s->$amount, s->$locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CrossChainLock'_user(s: $42_reentrancy_comprehensive_CrossChainLock, x: int): $42_reentrancy_comprehensive_CrossChainLock {
    $42_reentrancy_comprehensive_CrossChainLock(s->$source_chain, s->$target_chain, x, s->$amount, s->$locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CrossChainLock'_amount(s: $42_reentrancy_comprehensive_CrossChainLock, x: int): $42_reentrancy_comprehensive_CrossChainLock {
    $42_reentrancy_comprehensive_CrossChainLock(s->$source_chain, s->$target_chain, s->$user, x, s->$locked)
}
function {:inline} $Update'$42_reentrancy_comprehensive_CrossChainLock'_locked(s: $42_reentrancy_comprehensive_CrossChainLock, x: bool): $42_reentrancy_comprehensive_CrossChainLock {
    $42_reentrancy_comprehensive_CrossChainLock(s->$source_chain, s->$target_chain, s->$user, s->$amount, x)
}
function $IsValid'$42_reentrancy_comprehensive_CrossChainLock'(s: $42_reentrancy_comprehensive_CrossChainLock): bool {
    $IsValid'u8'(s->$source_chain)
      && $IsValid'u8'(s->$target_chain)
      && $IsValid'address'(s->$user)
      && $IsValid'u64'(s->$amount)
      && $IsValid'bool'(s->$locked)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_CrossChainLock'(s1: $42_reentrancy_comprehensive_CrossChainLock, s2: $42_reentrancy_comprehensive_CrossChainLock): bool {
    s1 == s2
}

// struct reentrancy_comprehensive::GameState at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:388:5+212
datatype $42_reentrancy_comprehensive_GameState {
    $42_reentrancy_comprehensive_GameState($player_scores: Vec ($42_reentrancy_comprehensive_PlayerScore), $game_active: bool, $processing_turn: bool, $bonus_calculation_depth: int, $max_recursion_depth: int)
}
function {:inline} $Update'$42_reentrancy_comprehensive_GameState'_player_scores(s: $42_reentrancy_comprehensive_GameState, x: Vec ($42_reentrancy_comprehensive_PlayerScore)): $42_reentrancy_comprehensive_GameState {
    $42_reentrancy_comprehensive_GameState(x, s->$game_active, s->$processing_turn, s->$bonus_calculation_depth, s->$max_recursion_depth)
}
function {:inline} $Update'$42_reentrancy_comprehensive_GameState'_game_active(s: $42_reentrancy_comprehensive_GameState, x: bool): $42_reentrancy_comprehensive_GameState {
    $42_reentrancy_comprehensive_GameState(s->$player_scores, x, s->$processing_turn, s->$bonus_calculation_depth, s->$max_recursion_depth)
}
function {:inline} $Update'$42_reentrancy_comprehensive_GameState'_processing_turn(s: $42_reentrancy_comprehensive_GameState, x: bool): $42_reentrancy_comprehensive_GameState {
    $42_reentrancy_comprehensive_GameState(s->$player_scores, s->$game_active, x, s->$bonus_calculation_depth, s->$max_recursion_depth)
}
function {:inline} $Update'$42_reentrancy_comprehensive_GameState'_bonus_calculation_depth(s: $42_reentrancy_comprehensive_GameState, x: int): $42_reentrancy_comprehensive_GameState {
    $42_reentrancy_comprehensive_GameState(s->$player_scores, s->$game_active, s->$processing_turn, x, s->$max_recursion_depth)
}
function {:inline} $Update'$42_reentrancy_comprehensive_GameState'_max_recursion_depth(s: $42_reentrancy_comprehensive_GameState, x: int): $42_reentrancy_comprehensive_GameState {
    $42_reentrancy_comprehensive_GameState(s->$player_scores, s->$game_active, s->$processing_turn, s->$bonus_calculation_depth, x)
}
function $IsValid'$42_reentrancy_comprehensive_GameState'(s: $42_reentrancy_comprehensive_GameState): bool {
    $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''(s->$player_scores)
      && $IsValid'bool'(s->$game_active)
      && $IsValid'bool'(s->$processing_turn)
      && $IsValid'u64'(s->$bonus_calculation_depth)
      && $IsValid'u64'(s->$max_recursion_depth)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_GameState'(s1: $42_reentrancy_comprehensive_GameState, s2: $42_reentrancy_comprehensive_GameState): bool {
    $IsEqual'vec'$42_reentrancy_comprehensive_PlayerScore''(s1->$player_scores, s2->$player_scores)
    && $IsEqual'bool'(s1->$game_active, s2->$game_active)
    && $IsEqual'bool'(s1->$processing_turn, s2->$processing_turn)
    && $IsEqual'u64'(s1->$bonus_calculation_depth, s2->$bonus_calculation_depth)
    && $IsEqual'u64'(s1->$max_recursion_depth, s2->$max_recursion_depth)}
var $42_reentrancy_comprehensive_GameState_$memory: $Memory $42_reentrancy_comprehensive_GameState;

// struct reentrancy_comprehensive::LendingPool at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:214:5+225
datatype $42_reentrancy_comprehensive_LendingPool {
    $42_reentrancy_comprehensive_LendingPool($total_borrowed: int, $total_collateral: int, $liquidation_threshold: int, $liquidation_lock: bool, $active_liquidations: Vec ($42_reentrancy_comprehensive_LiquidationProcess))
}
function {:inline} $Update'$42_reentrancy_comprehensive_LendingPool'_total_borrowed(s: $42_reentrancy_comprehensive_LendingPool, x: int): $42_reentrancy_comprehensive_LendingPool {
    $42_reentrancy_comprehensive_LendingPool(x, s->$total_collateral, s->$liquidation_threshold, s->$liquidation_lock, s->$active_liquidations)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LendingPool'_total_collateral(s: $42_reentrancy_comprehensive_LendingPool, x: int): $42_reentrancy_comprehensive_LendingPool {
    $42_reentrancy_comprehensive_LendingPool(s->$total_borrowed, x, s->$liquidation_threshold, s->$liquidation_lock, s->$active_liquidations)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LendingPool'_liquidation_threshold(s: $42_reentrancy_comprehensive_LendingPool, x: int): $42_reentrancy_comprehensive_LendingPool {
    $42_reentrancy_comprehensive_LendingPool(s->$total_borrowed, s->$total_collateral, x, s->$liquidation_lock, s->$active_liquidations)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LendingPool'_liquidation_lock(s: $42_reentrancy_comprehensive_LendingPool, x: bool): $42_reentrancy_comprehensive_LendingPool {
    $42_reentrancy_comprehensive_LendingPool(s->$total_borrowed, s->$total_collateral, s->$liquidation_threshold, x, s->$active_liquidations)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LendingPool'_active_liquidations(s: $42_reentrancy_comprehensive_LendingPool, x: Vec ($42_reentrancy_comprehensive_LiquidationProcess)): $42_reentrancy_comprehensive_LendingPool {
    $42_reentrancy_comprehensive_LendingPool(s->$total_borrowed, s->$total_collateral, s->$liquidation_threshold, s->$liquidation_lock, x)
}
function $IsValid'$42_reentrancy_comprehensive_LendingPool'(s: $42_reentrancy_comprehensive_LendingPool): bool {
    $IsValid'u64'(s->$total_borrowed)
      && $IsValid'u64'(s->$total_collateral)
      && $IsValid'u64'(s->$liquidation_threshold)
      && $IsValid'bool'(s->$liquidation_lock)
      && $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''(s->$active_liquidations)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_LendingPool'(s1: $42_reentrancy_comprehensive_LendingPool, s2: $42_reentrancy_comprehensive_LendingPool): bool {
    $IsEqual'u64'(s1->$total_borrowed, s2->$total_borrowed)
    && $IsEqual'u64'(s1->$total_collateral, s2->$total_collateral)
    && $IsEqual'u64'(s1->$liquidation_threshold, s2->$liquidation_threshold)
    && $IsEqual'bool'(s1->$liquidation_lock, s2->$liquidation_lock)
    && $IsEqual'vec'$42_reentrancy_comprehensive_LiquidationProcess''(s1->$active_liquidations, s2->$active_liquidations)}
var $42_reentrancy_comprehensive_LendingPool_$memory: $Memory $42_reentrancy_comprehensive_LendingPool;

// struct reentrancy_comprehensive::LiquidationProcess at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:230:5+193
datatype $42_reentrancy_comprehensive_LiquidationProcess {
    $42_reentrancy_comprehensive_LiquidationProcess($target_user: int, $liquidator: int, $amount: int, $stage: int)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LiquidationProcess'_target_user(s: $42_reentrancy_comprehensive_LiquidationProcess, x: int): $42_reentrancy_comprehensive_LiquidationProcess {
    $42_reentrancy_comprehensive_LiquidationProcess(x, s->$liquidator, s->$amount, s->$stage)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LiquidationProcess'_liquidator(s: $42_reentrancy_comprehensive_LiquidationProcess, x: int): $42_reentrancy_comprehensive_LiquidationProcess {
    $42_reentrancy_comprehensive_LiquidationProcess(s->$target_user, x, s->$amount, s->$stage)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LiquidationProcess'_amount(s: $42_reentrancy_comprehensive_LiquidationProcess, x: int): $42_reentrancy_comprehensive_LiquidationProcess {
    $42_reentrancy_comprehensive_LiquidationProcess(s->$target_user, s->$liquidator, x, s->$stage)
}
function {:inline} $Update'$42_reentrancy_comprehensive_LiquidationProcess'_stage(s: $42_reentrancy_comprehensive_LiquidationProcess, x: int): $42_reentrancy_comprehensive_LiquidationProcess {
    $42_reentrancy_comprehensive_LiquidationProcess(s->$target_user, s->$liquidator, s->$amount, x)
}
function $IsValid'$42_reentrancy_comprehensive_LiquidationProcess'(s: $42_reentrancy_comprehensive_LiquidationProcess): bool {
    $IsValid'address'(s->$target_user)
      && $IsValid'address'(s->$liquidator)
      && $IsValid'u64'(s->$amount)
      && $IsValid'u8'(s->$stage)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_LiquidationProcess'(s1: $42_reentrancy_comprehensive_LiquidationProcess, s2: $42_reentrancy_comprehensive_LiquidationProcess): bool {
    s1 == s2
}

// struct reentrancy_comprehensive::PendingTransfer at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:560:5+166
datatype $42_reentrancy_comprehensive_PendingTransfer {
    $42_reentrancy_comprehensive_PendingTransfer($from: int, $to: int, $amount: int, $timestamp: int, $confirmed: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PendingTransfer'_from(s: $42_reentrancy_comprehensive_PendingTransfer, x: int): $42_reentrancy_comprehensive_PendingTransfer {
    $42_reentrancy_comprehensive_PendingTransfer(x, s->$to, s->$amount, s->$timestamp, s->$confirmed)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PendingTransfer'_to(s: $42_reentrancy_comprehensive_PendingTransfer, x: int): $42_reentrancy_comprehensive_PendingTransfer {
    $42_reentrancy_comprehensive_PendingTransfer(s->$from, x, s->$amount, s->$timestamp, s->$confirmed)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PendingTransfer'_amount(s: $42_reentrancy_comprehensive_PendingTransfer, x: int): $42_reentrancy_comprehensive_PendingTransfer {
    $42_reentrancy_comprehensive_PendingTransfer(s->$from, s->$to, x, s->$timestamp, s->$confirmed)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PendingTransfer'_timestamp(s: $42_reentrancy_comprehensive_PendingTransfer, x: int): $42_reentrancy_comprehensive_PendingTransfer {
    $42_reentrancy_comprehensive_PendingTransfer(s->$from, s->$to, s->$amount, x, s->$confirmed)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PendingTransfer'_confirmed(s: $42_reentrancy_comprehensive_PendingTransfer, x: bool): $42_reentrancy_comprehensive_PendingTransfer {
    $42_reentrancy_comprehensive_PendingTransfer(s->$from, s->$to, s->$amount, s->$timestamp, x)
}
function $IsValid'$42_reentrancy_comprehensive_PendingTransfer'(s: $42_reentrancy_comprehensive_PendingTransfer): bool {
    $IsValid'address'(s->$from)
      && $IsValid'address'(s->$to)
      && $IsValid'u64'(s->$amount)
      && $IsValid'u64'(s->$timestamp)
      && $IsValid'bool'(s->$confirmed)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_PendingTransfer'(s1: $42_reentrancy_comprehensive_PendingTransfer, s2: $42_reentrancy_comprehensive_PendingTransfer): bool {
    s1 == s2
}

// struct reentrancy_comprehensive::PlayerScore at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:396:5+155
datatype $42_reentrancy_comprehensive_PlayerScore {
    $42_reentrancy_comprehensive_PlayerScore($player: int, $score: int, $bonus_multiplier: int, $calculation_lock: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PlayerScore'_player(s: $42_reentrancy_comprehensive_PlayerScore, x: int): $42_reentrancy_comprehensive_PlayerScore {
    $42_reentrancy_comprehensive_PlayerScore(x, s->$score, s->$bonus_multiplier, s->$calculation_lock)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PlayerScore'_score(s: $42_reentrancy_comprehensive_PlayerScore, x: int): $42_reentrancy_comprehensive_PlayerScore {
    $42_reentrancy_comprehensive_PlayerScore(s->$player, x, s->$bonus_multiplier, s->$calculation_lock)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PlayerScore'_bonus_multiplier(s: $42_reentrancy_comprehensive_PlayerScore, x: int): $42_reentrancy_comprehensive_PlayerScore {
    $42_reentrancy_comprehensive_PlayerScore(s->$player, s->$score, x, s->$calculation_lock)
}
function {:inline} $Update'$42_reentrancy_comprehensive_PlayerScore'_calculation_lock(s: $42_reentrancy_comprehensive_PlayerScore, x: bool): $42_reentrancy_comprehensive_PlayerScore {
    $42_reentrancy_comprehensive_PlayerScore(s->$player, s->$score, s->$bonus_multiplier, x)
}
function $IsValid'$42_reentrancy_comprehensive_PlayerScore'(s: $42_reentrancy_comprehensive_PlayerScore): bool {
    $IsValid'address'(s->$player)
      && $IsValid'u64'(s->$score)
      && $IsValid'u64'(s->$bonus_multiplier)
      && $IsValid'bool'(s->$calculation_lock)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_PlayerScore'(s1: $42_reentrancy_comprehensive_PlayerScore, s2: $42_reentrancy_comprehensive_PlayerScore): bool {
    s1 == s2
}

// struct reentrancy_comprehensive::QueuedOperation at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:756:5+165
datatype $42_reentrancy_comprehensive_QueuedOperation {
    $42_reentrancy_comprehensive_QueuedOperation($operation_type: int, $target_subsystem: int, $parameters: Vec (int), $priority: int)
}
function {:inline} $Update'$42_reentrancy_comprehensive_QueuedOperation'_operation_type(s: $42_reentrancy_comprehensive_QueuedOperation, x: int): $42_reentrancy_comprehensive_QueuedOperation {
    $42_reentrancy_comprehensive_QueuedOperation(x, s->$target_subsystem, s->$parameters, s->$priority)
}
function {:inline} $Update'$42_reentrancy_comprehensive_QueuedOperation'_target_subsystem(s: $42_reentrancy_comprehensive_QueuedOperation, x: int): $42_reentrancy_comprehensive_QueuedOperation {
    $42_reentrancy_comprehensive_QueuedOperation(s->$operation_type, x, s->$parameters, s->$priority)
}
function {:inline} $Update'$42_reentrancy_comprehensive_QueuedOperation'_parameters(s: $42_reentrancy_comprehensive_QueuedOperation, x: Vec (int)): $42_reentrancy_comprehensive_QueuedOperation {
    $42_reentrancy_comprehensive_QueuedOperation(s->$operation_type, s->$target_subsystem, x, s->$priority)
}
function {:inline} $Update'$42_reentrancy_comprehensive_QueuedOperation'_priority(s: $42_reentrancy_comprehensive_QueuedOperation, x: int): $42_reentrancy_comprehensive_QueuedOperation {
    $42_reentrancy_comprehensive_QueuedOperation(s->$operation_type, s->$target_subsystem, s->$parameters, x)
}
function $IsValid'$42_reentrancy_comprehensive_QueuedOperation'(s: $42_reentrancy_comprehensive_QueuedOperation): bool {
    $IsValid'u8'(s->$operation_type)
      && $IsValid'u64'(s->$target_subsystem)
      && $IsValid'vec'u64''(s->$parameters)
      && $IsValid'u8'(s->$priority)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_QueuedOperation'(s1: $42_reentrancy_comprehensive_QueuedOperation, s2: $42_reentrancy_comprehensive_QueuedOperation): bool {
    $IsEqual'u8'(s1->$operation_type, s2->$operation_type)
    && $IsEqual'u64'(s1->$target_subsystem, s2->$target_subsystem)
    && $IsEqual'vec'u64''(s1->$parameters, s2->$parameters)
    && $IsEqual'u8'(s1->$priority, s2->$priority)}

// struct reentrancy_comprehensive::ResourceVault at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:552:5+240
datatype $42_reentrancy_comprehensive_ResourceVault {
    $42_reentrancy_comprehensive_ResourceVault($resource_count: int, $pending_transfers: Vec ($42_reentrancy_comprehensive_PendingTransfer), $completed_transfers: Vec ($42_reentrancy_comprehensive_CompletedTransfer), $transfer_lock: bool, $batch_processing: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ResourceVault'_resource_count(s: $42_reentrancy_comprehensive_ResourceVault, x: int): $42_reentrancy_comprehensive_ResourceVault {
    $42_reentrancy_comprehensive_ResourceVault(x, s->$pending_transfers, s->$completed_transfers, s->$transfer_lock, s->$batch_processing)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ResourceVault'_pending_transfers(s: $42_reentrancy_comprehensive_ResourceVault, x: Vec ($42_reentrancy_comprehensive_PendingTransfer)): $42_reentrancy_comprehensive_ResourceVault {
    $42_reentrancy_comprehensive_ResourceVault(s->$resource_count, x, s->$completed_transfers, s->$transfer_lock, s->$batch_processing)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ResourceVault'_completed_transfers(s: $42_reentrancy_comprehensive_ResourceVault, x: Vec ($42_reentrancy_comprehensive_CompletedTransfer)): $42_reentrancy_comprehensive_ResourceVault {
    $42_reentrancy_comprehensive_ResourceVault(s->$resource_count, s->$pending_transfers, x, s->$transfer_lock, s->$batch_processing)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ResourceVault'_transfer_lock(s: $42_reentrancy_comprehensive_ResourceVault, x: bool): $42_reentrancy_comprehensive_ResourceVault {
    $42_reentrancy_comprehensive_ResourceVault(s->$resource_count, s->$pending_transfers, s->$completed_transfers, x, s->$batch_processing)
}
function {:inline} $Update'$42_reentrancy_comprehensive_ResourceVault'_batch_processing(s: $42_reentrancy_comprehensive_ResourceVault, x: bool): $42_reentrancy_comprehensive_ResourceVault {
    $42_reentrancy_comprehensive_ResourceVault(s->$resource_count, s->$pending_transfers, s->$completed_transfers, s->$transfer_lock, x)
}
function $IsValid'$42_reentrancy_comprehensive_ResourceVault'(s: $42_reentrancy_comprehensive_ResourceVault): bool {
    $IsValid'u64'(s->$resource_count)
      && $IsValid'vec'$42_reentrancy_comprehensive_PendingTransfer''(s->$pending_transfers)
      && $IsValid'vec'$42_reentrancy_comprehensive_CompletedTransfer''(s->$completed_transfers)
      && $IsValid'bool'(s->$transfer_lock)
      && $IsValid'bool'(s->$batch_processing)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_ResourceVault'(s1: $42_reentrancy_comprehensive_ResourceVault, s2: $42_reentrancy_comprehensive_ResourceVault): bool {
    $IsEqual'u64'(s1->$resource_count, s2->$resource_count)
    && $IsEqual'vec'$42_reentrancy_comprehensive_PendingTransfer''(s1->$pending_transfers, s2->$pending_transfers)
    && $IsEqual'vec'$42_reentrancy_comprehensive_CompletedTransfer''(s1->$completed_transfers, s2->$completed_transfers)
    && $IsEqual'bool'(s1->$transfer_lock, s2->$transfer_lock)
    && $IsEqual'bool'(s1->$batch_processing, s2->$batch_processing)}
var $42_reentrancy_comprehensive_ResourceVault_$memory: $Memory $42_reentrancy_comprehensive_ResourceVault;

// struct reentrancy_comprehensive::Subsystem at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:749:5+160
datatype $42_reentrancy_comprehensive_Subsystem {
    $42_reentrancy_comprehensive_Subsystem($id: int, $locked: bool, $pending_operations: int, $dependent_subsystems: Vec (int))
}
function {:inline} $Update'$42_reentrancy_comprehensive_Subsystem'_id(s: $42_reentrancy_comprehensive_Subsystem, x: int): $42_reentrancy_comprehensive_Subsystem {
    $42_reentrancy_comprehensive_Subsystem(x, s->$locked, s->$pending_operations, s->$dependent_subsystems)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Subsystem'_locked(s: $42_reentrancy_comprehensive_Subsystem, x: bool): $42_reentrancy_comprehensive_Subsystem {
    $42_reentrancy_comprehensive_Subsystem(s->$id, x, s->$pending_operations, s->$dependent_subsystems)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Subsystem'_pending_operations(s: $42_reentrancy_comprehensive_Subsystem, x: int): $42_reentrancy_comprehensive_Subsystem {
    $42_reentrancy_comprehensive_Subsystem(s->$id, s->$locked, x, s->$dependent_subsystems)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Subsystem'_dependent_subsystems(s: $42_reentrancy_comprehensive_Subsystem, x: Vec (int)): $42_reentrancy_comprehensive_Subsystem {
    $42_reentrancy_comprehensive_Subsystem(s->$id, s->$locked, s->$pending_operations, x)
}
function $IsValid'$42_reentrancy_comprehensive_Subsystem'(s: $42_reentrancy_comprehensive_Subsystem): bool {
    $IsValid'u64'(s->$id)
      && $IsValid'bool'(s->$locked)
      && $IsValid'u64'(s->$pending_operations)
      && $IsValid'vec'u64''(s->$dependent_subsystems)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_Subsystem'(s1: $42_reentrancy_comprehensive_Subsystem, s2: $42_reentrancy_comprehensive_Subsystem): bool {
    $IsEqual'u64'(s1->$id, s2->$id)
    && $IsEqual'bool'(s1->$locked, s2->$locked)
    && $IsEqual'u64'(s1->$pending_operations, s2->$pending_operations)
    && $IsEqual'vec'u64''(s1->$dependent_subsystems, s2->$dependent_subsystems)}

// struct reentrancy_comprehensive::UserPosition at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:222:5+177
datatype $42_reentrancy_comprehensive_UserPosition {
    $42_reentrancy_comprehensive_UserPosition($user: int, $borrowed: int, $collateral: int, $active: bool, $liquidation_pending: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_UserPosition'_user(s: $42_reentrancy_comprehensive_UserPosition, x: int): $42_reentrancy_comprehensive_UserPosition {
    $42_reentrancy_comprehensive_UserPosition(x, s->$borrowed, s->$collateral, s->$active, s->$liquidation_pending)
}
function {:inline} $Update'$42_reentrancy_comprehensive_UserPosition'_borrowed(s: $42_reentrancy_comprehensive_UserPosition, x: int): $42_reentrancy_comprehensive_UserPosition {
    $42_reentrancy_comprehensive_UserPosition(s->$user, x, s->$collateral, s->$active, s->$liquidation_pending)
}
function {:inline} $Update'$42_reentrancy_comprehensive_UserPosition'_collateral(s: $42_reentrancy_comprehensive_UserPosition, x: int): $42_reentrancy_comprehensive_UserPosition {
    $42_reentrancy_comprehensive_UserPosition(s->$user, s->$borrowed, x, s->$active, s->$liquidation_pending)
}
function {:inline} $Update'$42_reentrancy_comprehensive_UserPosition'_active(s: $42_reentrancy_comprehensive_UserPosition, x: bool): $42_reentrancy_comprehensive_UserPosition {
    $42_reentrancy_comprehensive_UserPosition(s->$user, s->$borrowed, s->$collateral, x, s->$liquidation_pending)
}
function {:inline} $Update'$42_reentrancy_comprehensive_UserPosition'_liquidation_pending(s: $42_reentrancy_comprehensive_UserPosition, x: bool): $42_reentrancy_comprehensive_UserPosition {
    $42_reentrancy_comprehensive_UserPosition(s->$user, s->$borrowed, s->$collateral, s->$active, x)
}
function $IsValid'$42_reentrancy_comprehensive_UserPosition'(s: $42_reentrancy_comprehensive_UserPosition): bool {
    $IsValid'address'(s->$user)
      && $IsValid'u64'(s->$borrowed)
      && $IsValid'u64'(s->$collateral)
      && $IsValid'bool'(s->$active)
      && $IsValid'bool'(s->$liquidation_pending)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_UserPosition'(s1: $42_reentrancy_comprehensive_UserPosition, s2: $42_reentrancy_comprehensive_UserPosition): bool {
    s1 == s2
}

// struct reentrancy_comprehensive::Withdrawal at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:82:5+140
datatype $42_reentrancy_comprehensive_Withdrawal {
    $42_reentrancy_comprehensive_Withdrawal($owner: int, $amount: int, $timestamp: int, $completed: bool)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Withdrawal'_owner(s: $42_reentrancy_comprehensive_Withdrawal, x: int): $42_reentrancy_comprehensive_Withdrawal {
    $42_reentrancy_comprehensive_Withdrawal(x, s->$amount, s->$timestamp, s->$completed)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Withdrawal'_amount(s: $42_reentrancy_comprehensive_Withdrawal, x: int): $42_reentrancy_comprehensive_Withdrawal {
    $42_reentrancy_comprehensive_Withdrawal(s->$owner, x, s->$timestamp, s->$completed)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Withdrawal'_timestamp(s: $42_reentrancy_comprehensive_Withdrawal, x: int): $42_reentrancy_comprehensive_Withdrawal {
    $42_reentrancy_comprehensive_Withdrawal(s->$owner, s->$amount, x, s->$completed)
}
function {:inline} $Update'$42_reentrancy_comprehensive_Withdrawal'_completed(s: $42_reentrancy_comprehensive_Withdrawal, x: bool): $42_reentrancy_comprehensive_Withdrawal {
    $42_reentrancy_comprehensive_Withdrawal(s->$owner, s->$amount, s->$timestamp, x)
}
function $IsValid'$42_reentrancy_comprehensive_Withdrawal'(s: $42_reentrancy_comprehensive_Withdrawal): bool {
    $IsValid'address'(s->$owner)
      && $IsValid'u64'(s->$amount)
      && $IsValid'u64'(s->$timestamp)
      && $IsValid'bool'(s->$completed)
}
function {:inline} $IsEqual'$42_reentrancy_comprehensive_Withdrawal'(s1: $42_reentrancy_comprehensive_Withdrawal, s2: $42_reentrancy_comprehensive_Withdrawal): bool {
    s1 == s2
}

// fun reentrancy_comprehensive::calculate_bonus_vulnerable [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:407:5+1033
procedure {:inline 1} $42_reentrancy_comprehensive_calculate_bonus_vulnerable(_$t0: $Mutation ($42_reentrancy_comprehensive_GameState), _$t1: int, _$t2: int, _$t3: int) returns ($ret0: int, $ret1: $Mutation ($42_reentrancy_comprehensive_GameState))
{
    // declare local variables
    var $t4: int;
    var $t5: $Mutation (int);
    var $t6: $Mutation ($42_reentrancy_comprehensive_PlayerScore);
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t11: int;
    var $t12: int;
    var $t13: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t14: int;
    var $t15: bool;
    var $t16: $Mutation (int);
    var $t17: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore));
    var $t18: $Mutation ($42_reentrancy_comprehensive_PlayerScore);
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation (int);
    var $t24: int;
    var $t0: $Mutation ($42_reentrancy_comprehensive_GameState);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$42_reentrancy_comprehensive_GameState': $42_reentrancy_comprehensive_GameState;
    var $temp_0'$42_reentrancy_comprehensive_PlayerScore': $42_reentrancy_comprehensive_PlayerScore;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:407:5+1
    assume {:print "$at(4,16637,16638)"} true;
    $temp_0'$42_reentrancy_comprehensive_GameState' := $Dereference($t0);
    assume {:print "$track_local(5,4,0):", $temp_0'$42_reentrancy_comprehensive_GameState'} $temp_0'$42_reentrancy_comprehensive_GameState' == $temp_0'$42_reentrancy_comprehensive_GameState';

    // trace_local[player]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:407:5+1
    assume {:print "$track_local(5,4,1):", $t1} $t1 == $t1;

    // trace_local[base_points]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:407:5+1
    assume {:print "$track_local(5,4,2):", $t2} $t2 == $t2;

    // trace_local[depth]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:407:5+1
    assume {:print "$track_local(5,4,3):", $t3} $t3 == $t3;

    // $t7 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:22+1
    assume {:print "$at(4,16816,16817)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := ==($t3, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:13+10
    $t8 := $IsEqual'u64'($t3, $t7);

    // if ($t8) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:9+34
    if ($t8) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:25+18
L1:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:25+18
    assume {:print "$at(4,16819,16837)"} true;

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:25+18
    assume {:print "$track_return(5,4,0):", $t2} $t2 == $t2;

    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:25+18
    $temp_0'$42_reentrancy_comprehensive_GameState' := $Dereference($t0);
    assume {:print "$track_local(5,4,0):", $temp_0'$42_reentrancy_comprehensive_GameState'} $temp_0'$42_reentrancy_comprehensive_GameState' == $temp_0'$42_reentrancy_comprehensive_GameState';

    // $t9 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:25+18
    $t9 := $t2;

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:413:25+18
    goto L4;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:415:44+19
    assume {:print "$at(4,16885,16904)"} true;
L0:

    // $t10 := get_field<0x42::reentrancy_comprehensive::GameState>.player_scores($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:415:44+19
    assume {:print "$at(4,16885,16904)"} true;
    $t10 := $Dereference($t0)->$player_scores;

    // $t11 := reentrancy_comprehensive::find_player_index($t10, $t1) on_abort goto L5 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:415:26+46
    call $t11 := $42_reentrancy_comprehensive_find_player_index($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,16867,16913)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(5,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // trace_local[$t7]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:415:26+46
    assume {:print "$track_local(5,4,4):", $t11} $t11 == $t11;

    // $t13 := get_field<0x42::reentrancy_comprehensive::GameState>.player_scores($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:42+19
    assume {:print "$at(4,16957,16976)"} true;
    $t13 := $Dereference($t0)->$player_scores;

    // $t14 := vector::length<0x42::reentrancy_comprehensive::PlayerScore>($t13) on_abort goto L5 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:27+35
    call $t14 := $1_vector_length'$42_reentrancy_comprehensive_PlayerScore'($t13);
    if ($abort_flag) {
        assume {:print "$at(4,16942,16977)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(5,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t15 := >=($t11, $t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:13+49
    call $t15 := $Ge($t11, $t14);

    // if ($t15) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:9+73
    if ($t15) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:64+18
L3:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:64+18
    assume {:print "$at(4,16979,16997)"} true;

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:64+18
    assume {:print "$track_return(5,4,0):", $t2} $t2 == $t2;

    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:64+18
    $temp_0'$42_reentrancy_comprehensive_GameState' := $Dereference($t0);
    assume {:print "$track_local(5,4,0):", $temp_0'$42_reentrancy_comprehensive_GameState'} $temp_0'$42_reentrancy_comprehensive_GameState' == $temp_0'$42_reentrancy_comprehensive_GameState';

    // $t9 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:64+18
    $t9 := $t2;

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:416:64+18
    goto L4;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:419:9+28
    assume {:print "$at(4,17089,17117)"} true;
L2:

    // $t16 := borrow_field<0x42::reentrancy_comprehensive::GameState>.bonus_calculation_depth($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:419:9+28
    assume {:print "$at(4,17089,17117)"} true;
    $t16 := $ChildMutation($t0, 3, $Dereference($t0)->$bonus_calculation_depth);

    // trace_local[$t14]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:419:9+36
    $temp_0'u64' := $Dereference($t16);
    assume {:print "$track_local(5,4,5):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // write_ref($t16, $t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:419:9+36
    $t16 := $UpdateMutation($t16, $t3);

    // write_back[Reference($t0).bonus_calculation_depth (u64)]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:419:9+36
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_GameState'_bonus_calculation_depth($Dereference($t0), $Dereference($t16)));

    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:419:9+36
    $temp_0'$42_reentrancy_comprehensive_GameState' := $Dereference($t0);
    assume {:print "$track_local(5,4,0):", $temp_0'$42_reentrancy_comprehensive_GameState'} $temp_0'$42_reentrancy_comprehensive_GameState' == $temp_0'$42_reentrancy_comprehensive_GameState';

    // $t17 := borrow_field<0x42::reentrancy_comprehensive::GameState>.player_scores($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:421:51+23
    assume {:print "$at(4,17201,17224)"} true;
    $t17 := $ChildMutation($t0, 0, $Dereference($t0)->$player_scores);

    // $t18 := vector::borrow_mut<0x42::reentrancy_comprehensive::PlayerScore>($t17, $t11) on_abort goto L5 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:421:32+55
    call $t18,$t17 := $1_vector_borrow_mut'$42_reentrancy_comprehensive_PlayerScore'($t17, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,17182,17237)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(5,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // trace_local[player_score_ref]($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:421:32+55
    $temp_0'$42_reentrancy_comprehensive_PlayerScore' := $Dereference($t18);
    assume {:print "$track_local(5,4,6):", $temp_0'$42_reentrancy_comprehensive_PlayerScore'} $temp_0'$42_reentrancy_comprehensive_PlayerScore' == $temp_0'$42_reentrancy_comprehensive_PlayerScore';

    // $t19 := 2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:425:35+1
    assume {:print "$at(4,17429,17430)"} true;
    $t19 := 2;
    assume $IsValid'u64'($t19);

    // $t20 := /($t2, $t19) on_abort goto L5 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:425:21+15
    call $t20 := $Div($t2, $t19);
    if ($abort_flag) {
        assume {:print "$at(4,17415,17430)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(5,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // trace_local[depth]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:425:21+15
    assume {:print "$track_local(5,4,3):", $t20} $t20 == $t20;

    // $t21 := get_field<0x42::reentrancy_comprehensive::PlayerScore>.score($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:34+22
    assume {:print "$at(4,17580,17602)"} true;
    $t21 := $Dereference($t18)->$score;

    // $t22 := +($t21, $t20) on_abort goto L5 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:34+30
    call $t22 := $AddU64($t21, $t20);
    if ($abort_flag) {
        assume {:print "$at(4,17580,17610)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(5,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t23 := borrow_field<0x42::reentrancy_comprehensive::PlayerScore>.score($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:9+22
    $t23 := $ChildMutation($t18, 1, $Dereference($t18)->$score);

    // write_ref($t23, $t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:9+55
    $t23 := $UpdateMutation($t23, $t22);

    // write_back[Reference($t18).score (u64)]($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:9+55
    $t18 := $UpdateMutation($t18, $Update'$42_reentrancy_comprehensive_PlayerScore'_score($Dereference($t18), $Dereference($t23)));

    // write_back[Reference($t17)[]]($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:9+55
    $t17 := $UpdateMutation($t17, UpdateVec($Dereference($t17), ReadVec($t18->p, LenVec($t17->p)), $Dereference($t18)));

    // write_back[Reference($t0).player_scores (vector<0x42::reentrancy_comprehensive::PlayerScore>)]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:9+55
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_GameState'_player_scores($Dereference($t0), $Dereference($t17)));

    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:428:9+55
    $temp_0'$42_reentrancy_comprehensive_GameState' := $Dereference($t0);
    assume {:print "$track_local(5,4,0):", $temp_0'$42_reentrancy_comprehensive_GameState'} $temp_0'$42_reentrancy_comprehensive_GameState' == $temp_0'$42_reentrancy_comprehensive_GameState';

    // $t24 := +($t2, $t20) on_abort goto L5 with $t12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:430:9+19
    assume {:print "$at(4,17644,17663)"} true;
    call $t24 := $AddU64($t2, $t20);
    if ($abort_flag) {
        assume {:print "$at(4,17644,17663)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(5,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // trace_return[0]($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:412:12+878
    assume {:print "$at(4,16792,17670)"} true;
    assume {:print "$track_return(5,4,0):", $t24} $t24 == $t24;

    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:412:12+878
    $temp_0'$42_reentrancy_comprehensive_GameState' := $Dereference($t0);
    assume {:print "$track_local(5,4,0):", $temp_0'$42_reentrancy_comprehensive_GameState'} $temp_0'$42_reentrancy_comprehensive_GameState' == $temp_0'$42_reentrancy_comprehensive_GameState';

    // $t9 := move($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:412:12+878
    $t9 := $t24;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:431:5+1
    assume {:print "$at(4,17669,17670)"} true;
L4:

    // return $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:431:5+1
    assume {:print "$at(4,17669,17670)"} true;
    $ret0 := $t9;
    $ret1 := $t0;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:431:5+1
L5:

    // abort($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:431:5+1
    assume {:print "$at(4,17669,17670)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::comprehensive_attack_simulation [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1044:5+3129
procedure {:timeLimit 40} $42_reentrancy_comprehensive_comprehensive_attack_simulation$verify() returns ($ret0: Vec (int), $ret1: Vec (bool))
{
    // declare local variables
    var $t0: Vec (int);
    var $t1: Vec (bool);
    var $t2: $42_reentrancy_comprehensive_Bank;
    var $t3: int;
    var $t4: int;
    var $t5: $42_reentrancy_comprehensive_LendingPool;
    var $t6: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t7: $42_reentrancy_comprehensive_GameState;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: $42_reentrancy_comprehensive_Balance;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: $42_reentrancy_comprehensive_Balance;
    var $t18: Vec ($42_reentrancy_comprehensive_Balance);
    var $t19: $Mutation (Vec ($42_reentrancy_comprehensive_Balance));
    var $t20: int;
    var $t21: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var $t22: bool;
    var $t23: bool;
    var $t24: $42_reentrancy_comprehensive_Bank;
    var $t25: int;
    var $t26: $Mutation ($42_reentrancy_comprehensive_Bank);
    var $t27: int;
    var $t28: int;
    var $t29: bool;
    var $t30: $42_reentrancy_comprehensive_Bank;
    var $t31: int;
    var $t32: $Mutation (Vec (int));
    var $t33: $Mutation (Vec (int));
    var $t34: $Mutation (Vec (bool));
    var $t35: bool;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: bool;
    var $t40: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: bool;
    var $t45: bool;
    var $t46: $42_reentrancy_comprehensive_UserPosition;
    var $t47: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t48: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition));
    var $t49: $42_reentrancy_comprehensive_LendingPool;
    var $t50: int;
    var $t51: $Mutation ($42_reentrancy_comprehensive_LendingPool);
    var $t52: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition));
    var $t53: int;
    var $t54: int;
    var $t55: $42_reentrancy_comprehensive_LendingPool;
    var $t56: int;
    var $t57: $Mutation (Vec (int));
    var $t58: $Mutation (Vec (int));
    var $t59: $Mutation (Vec (bool));
    var $t60: bool;
    var $t61: int;
    var $t62: int;
    var $t63: int;
    var $t64: bool;
    var $t65: $42_reentrancy_comprehensive_PlayerScore;
    var $t66: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t67: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore));
    var $t68: bool;
    var $t69: bool;
    var $t70: int;
    var $t71: int;
    var $t72: $42_reentrancy_comprehensive_GameState;
    var $t73: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t74: int;
    var $t75: $42_reentrancy_comprehensive_PlayerScore;
    var $t76: int;
    var $t77: $Mutation ($42_reentrancy_comprehensive_GameState);
    var $t78: int;
    var $t79: int;
    var $t80: int;
    var $t81: int;
    var $t82: $42_reentrancy_comprehensive_GameState;
    var $t83: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t84: int;
    var $t85: $42_reentrancy_comprehensive_PlayerScore;
    var $t86: int;
    var $t87: $Mutation (Vec (int));
    var $t88: $Mutation (Vec (int));
    var $t89: $Mutation (Vec (bool));
    var $t90: bool;
    var $t91: $42_reentrancy_comprehensive_Bank;
    var $t92: $42_reentrancy_comprehensive_LendingPool;
    var $t93: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t94: $42_reentrancy_comprehensive_GameState;
    var $t95: Vec (int);
    var $t96: Vec (bool);
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'$42_reentrancy_comprehensive_GameState': $42_reentrancy_comprehensive_GameState;
    var $temp_0'$42_reentrancy_comprehensive_LendingPool': $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'': Vec ($42_reentrancy_comprehensive_UserPosition);
    var $temp_0'vec'bool'': Vec (bool);
    var $temp_0'vec'u64'': Vec (int);

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // $t0 := vector::empty<u64>() on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1045:23+20
    assume {:print "$at(4,41612,41632)"} true;
    call $t0 := $1_vector_empty'u64'();
    if ($abort_flag) {
        assume {:print "$at(4,41612,41632)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1045:23+20
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t1 := vector::empty<bool>() on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1046:40+21
    assume {:print "$at(4,41674,41695)"} true;
    call $t1 := $1_vector_empty'bool'();
    if ($abort_flag) {
        assume {:print "$at(4,41674,41695)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[vulnerabilities_detected]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1046:40+21
    assume {:print "$track_local(5,6,1):", $t1} $t1 == $t1;

    // $t10 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1051:34+6
    assume {:print "$at(4,41844,41850)"} true;
    $t10 := 291;
    assume $IsValid'address'($t10);

    // $t11 := 1000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1051:50+4
    $t11 := 1000;
    assume $IsValid'u64'($t11);

    // $t12 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1051:64+5
    $t12 := false;
    assume $IsValid'bool'($t12);

    // $t13 := pack 0x42::reentrancy_comprehensive::Balance($t10, $t11, $t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1051:17+54
    $t13 := $42_reentrancy_comprehensive_Balance($t10, $t11, $t12);

    // $t14 := 0x456 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1052:34+6
    assume {:print "$at(4,41917,41923)"} true;
    $t14 := 1110;
    assume $IsValid'address'($t14);

    // $t15 := 500 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1052:50+3
    $t15 := 500;
    assume $IsValid'u64'($t15);

    // $t16 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1052:63+5
    $t16 := false;
    assume $IsValid'bool'($t16);

    // $t17 := pack 0x42::reentrancy_comprehensive::Balance($t14, $t15, $t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1052:17+53
    $t17 := $42_reentrancy_comprehensive_Balance($t14, $t15, $t16);

    // $t18 := vector::empty<0x42::reentrancy_comprehensive::Balance>() on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1050:23+6
    assume {:print "$at(4,41802,41808)"} true;
    call $t18 := $1_vector_empty'$42_reentrancy_comprehensive_Balance'();
    if ($abort_flag) {
        assume {:print "$at(4,41802,41808)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t19 := borrow_local($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1050:23+6
    $t19 := $Mutation($Local(18), EmptyVec(), $t18);

    // vector::push_back<0x42::reentrancy_comprehensive::Balance>($t19, $t13) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1050:23+6
    call $t19 := $1_vector_push_back'$42_reentrancy_comprehensive_Balance'($t19, $t13);
    if ($abort_flag) {
        assume {:print "$at(4,41802,41808)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // vector::push_back<0x42::reentrancy_comprehensive::Balance>($t19, $t17) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1050:23+6
    call $t19 := $1_vector_push_back'$42_reentrancy_comprehensive_Balance'($t19, $t17);
    if ($abort_flag) {
        assume {:print "$at(4,41802,41808)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t18)@]($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1050:23+6
    $t18 := $Dereference($t19);

    // $t20 := 1500 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1054:29+4
    assume {:print "$at(4,41999,42003)"} true;
    $t20 := 1500;
    assume $IsValid'u64'($t20);

    // $t21 := vector::empty<0x42::reentrancy_comprehensive::Withdrawal>() on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1055:34+15
    assume {:print "$at(4,42039,42054)"} true;
    call $t21 := $1_vector_empty'$42_reentrancy_comprehensive_Withdrawal'();
    if ($abort_flag) {
        assume {:print "$at(4,42039,42054)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t22 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1056:31+5
    assume {:print "$at(4,42087,42092)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // $t23 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1057:31+5
    assume {:print "$at(4,42125,42130)"} true;
    $t23 := false;
    assume $IsValid'bool'($t23);

    // $t2 := pack 0x42::reentrancy_comprehensive::Bank($t18, $t20, $t21, $t22, $t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1049:20+370
    assume {:print "$at(4,41772,42142)"} true;
    $t2 := $42_reentrancy_comprehensive_Bank($t18, $t20, $t21, $t22, $t23);

    // trace_local[bank]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1049:20+370
    assume {:print "$track_local(5,6,2):", $t2} $t2 == $t2;

    // $t24 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1060:29+4
    assume {:print "$at(4,42175,42179)"} true;
    $t24 := $t2;

    // $t25 := get_field<0x42::reentrancy_comprehensive::Bank>.total_deposits($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1060:29+19
    $t25 := $t24->$total_deposits;

    // trace_local[$t8]($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1060:29+19
    assume {:print "$track_local(5,6,3):", $t25} $t25 == $t25;

    // $t26 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1061:32+9
    assume {:print "$at(4,42228,42237)"} true;
    $t26 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t27 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1061:43+6
    $t27 := 291;
    assume $IsValid'address'($t27);

    // $t28 := 100 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1061:51+3
    $t28 := 100;
    assume $IsValid'u64'($t28);

    // $t29 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1061:56+4
    $t29 := true;
    assume $IsValid'bool'($t29);

    // reentrancy_comprehensive::withdraw_vulnerable_v1($t26, $t27, $t28, $t29) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1061:9+52
    call $t26 := $42_reentrancy_comprehensive_withdraw_vulnerable_v1($t26, $t27, $t28, $t29);
    if ($abort_flag) {
        assume {:print "$at(4,42205,42257)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t2)@]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1061:9+52
    $t2 := $Dereference($t26);

    // trace_local[bank]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1061:9+52
    assume {:print "$track_local(5,6,2):", $t2} $t2 == $t2;

    // $t30 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1062:27+4
    assume {:print "$at(4,42286,42290)"} true;
    $t30 := $t2;

    // $t31 := get_field<0x42::reentrancy_comprehensive::Bank>.total_deposits($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1062:27+19
    $t31 := $t30->$total_deposits;

    // trace_local[$t23]($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1062:27+19
    assume {:print "$track_local(5,6,4):", $t31} $t31 == $t31;

    // $t32 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1064:27+12
    assume {:print "$at(4,42336,42348)"} true;
    $t32 := $Mutation($Local(0), EmptyVec(), $t0);

    // vector::push_back<u64>($t32, $t25) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1064:9+46
    call $t32 := $1_vector_push_back'u64'($t32, $t25);
    if ($abort_flag) {
        assume {:print "$at(4,42318,42364)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1064:9+46
    $t0 := $Dereference($t32);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1064:9+46
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t33 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1065:27+12
    assume {:print "$at(4,42393,42405)"} true;
    $t33 := $Mutation($Local(0), EmptyVec(), $t0);

    // vector::push_back<u64>($t33, $t31) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1065:9+44
    call $t33 := $1_vector_push_back'u64'($t33, $t31);
    if ($abort_flag) {
        assume {:print "$at(4,42375,42419)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1065:9+44
    $t0 := $Dereference($t33);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1065:9+44
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t34 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1066:27+29
    assume {:print "$at(4,42448,42477)"} true;
    $t34 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t35 := !=($t25, $t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1066:58+28
    $t35 := !$IsEqual'u64'($t25, $t31);

    // vector::push_back<bool>($t34, $t35) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1066:9+78
    call $t34 := $1_vector_push_back'bool'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(4,42430,42508)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1066:9+78
    $t1 := $Dereference($t34);

    // trace_local[vulnerabilities_detected]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1066:9+78
    assume {:print "$track_local(5,6,1):", $t1} $t1 == $t1;

    // $t36 := 1000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1070:29+4
    assume {:print "$at(4,42632,42636)"} true;
    $t36 := 1000;
    assume $IsValid'u64'($t36);

    // $t37 := 1500 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1071:31+4
    assume {:print "$at(4,42669,42673)"} true;
    $t37 := 1500;
    assume $IsValid'u64'($t37);

    // $t38 := 7500 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1072:36+4
    assume {:print "$at(4,42711,42715)"} true;
    $t38 := 7500;
    assume $IsValid'u64'($t38);

    // $t39 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1073:31+5
    assume {:print "$at(4,42748,42753)"} true;
    $t39 := false;
    assume $IsValid'bool'($t39);

    // $t40 := vector::empty<0x42::reentrancy_comprehensive::LiquidationProcess>() on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1074:34+15
    assume {:print "$at(4,42789,42804)"} true;
    call $t40 := $1_vector_empty'$42_reentrancy_comprehensive_LiquidationProcess'();
    if ($abort_flag) {
        assume {:print "$at(4,42789,42804)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t5 := pack 0x42::reentrancy_comprehensive::LendingPool($t36, $t37, $t38, $t39, $t40) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1069:20+227
    assume {:print "$at(4,42589,42816)"} true;
    $t5 := $42_reentrancy_comprehensive_LendingPool($t36, $t37, $t38, $t39, $t40);

    // trace_local[pool]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1069:20+227
    assume {:print "$track_local(5,6,5):", $t5} $t5 == $t5;

    // $t41 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1079:23+6
    assume {:print "$at(4,42904,42910)"} true;
    $t41 := 291;
    assume $IsValid'address'($t41);

    // $t42 := 800 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1080:27+3
    assume {:print "$at(4,42939,42942)"} true;
    $t42 := 800;
    assume $IsValid'u64'($t42);

    // $t43 := 900 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1081:29+3
    assume {:print "$at(4,42973,42976)"} true;
    $t43 := 900;
    assume $IsValid'u64'($t43);

    // $t44 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1082:25+4
    assume {:print "$at(4,43003,43007)"} true;
    $t44 := true;
    assume $IsValid'bool'($t44);

    // $t45 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1083:38+5
    assume {:print "$at(4,43047,43052)"} true;
    $t45 := false;
    assume $IsValid'bool'($t45);

    // $t46 := pack 0x42::reentrancy_comprehensive::UserPosition($t41, $t42, $t43, $t44, $t45) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1078:13+201
    assume {:print "$at(4,42866,43067)"} true;
    $t46 := $42_reentrancy_comprehensive_UserPosition($t41, $t42, $t43, $t44, $t45);

    // $t47 := vector::empty<0x42::reentrancy_comprehensive::UserPosition>() on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1077:25+6
    assume {:print "$at(4,42845,42851)"} true;
    call $t47 := $1_vector_empty'$42_reentrancy_comprehensive_UserPosition'();
    if ($abort_flag) {
        assume {:print "$at(4,42845,42851)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t48 := borrow_local($t47) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1077:25+6
    $t48 := $Mutation($Local(47), EmptyVec(), $t47);

    // vector::push_back<0x42::reentrancy_comprehensive::UserPosition>($t48, $t46) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1077:25+6
    call $t48 := $1_vector_push_back'$42_reentrancy_comprehensive_UserPosition'($t48, $t46);
    if ($abort_flag) {
        assume {:print "$at(4,42845,42851)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t47)@]($t48) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1077:25+6
    $t47 := $Dereference($t48);

    // $t6 := $t47 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1077:25+6
    $t6 := $t47;

    // trace_local[positions]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1077:25+6
    assume {:print "$track_local(5,6,6):", $t6} $t6 == $t6;

    // $t49 := copy($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1087:32+4
    assume {:print "$at(4,43114,43118)"} true;
    $t49 := $t5;

    // $t50 := get_field<0x42::reentrancy_comprehensive::LendingPool>.total_borrowed($t49) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1087:32+19
    $t50 := $t49->$total_borrowed;

    // trace_local[$t8]($t50) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1087:32+19
    assume {:print "$track_local(5,6,3):", $t50} $t50 == $t50;

    // $t51 := borrow_local($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:39+9
    assume {:print "$at(4,43174,43183)"} true;
    $t51 := $Mutation($Local(5), EmptyVec(), $t5);

    // $t52 := borrow_local($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:50+14
    $t52 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t53 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:66+6
    $t53 := 291;
    assume $IsValid'address'($t53);

    // $t54 := 0x456 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:74+6
    $t54 := 1110;
    assume $IsValid'address'($t54);

    // reentrancy_comprehensive::liquidate_position_vulnerable($t51, $t52, $t53, $t54) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:9+72
    call $t51,$t52 := $42_reentrancy_comprehensive_liquidate_position_vulnerable($t51, $t52, $t53, $t54);
    if ($abort_flag) {
        assume {:print "$at(4,43144,43216)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t5)@]($t51) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:9+72
    $t5 := $Dereference($t51);

    // trace_local[pool]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:9+72
    assume {:print "$track_local(5,6,5):", $t5} $t5 == $t5;

    // write_back[LocalRoot($t6)@]($t52) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:9+72
    $t6 := $Dereference($t52);

    // trace_local[positions]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1088:9+72
    assume {:print "$track_local(5,6,6):", $t6} $t6 == $t6;

    // $t55 := copy($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1089:30+4
    assume {:print "$at(4,43248,43252)"} true;
    $t55 := $t5;

    // $t56 := get_field<0x42::reentrancy_comprehensive::LendingPool>.total_borrowed($t55) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1089:30+19
    $t56 := $t55->$total_borrowed;

    // trace_local[$t23]($t56) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1089:30+19
    assume {:print "$track_local(5,6,4):", $t56} $t56 == $t56;

    // $t57 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1091:27+12
    assume {:print "$at(4,43298,43310)"} true;
    $t57 := $Mutation($Local(0), EmptyVec(), $t0);

    // vector::push_back<u64>($t57, $t50) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1091:9+49
    call $t57 := $1_vector_push_back'u64'($t57, $t50);
    if ($abort_flag) {
        assume {:print "$at(4,43280,43329)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t57) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1091:9+49
    $t0 := $Dereference($t57);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1091:9+49
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t58 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1092:27+12
    assume {:print "$at(4,43358,43370)"} true;
    $t58 := $Mutation($Local(0), EmptyVec(), $t0);

    // vector::push_back<u64>($t58, $t56) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1092:9+47
    call $t58 := $1_vector_push_back'u64'($t58, $t56);
    if ($abort_flag) {
        assume {:print "$at(4,43340,43387)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t58) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1092:9+47
    $t0 := $Dereference($t58);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1092:9+47
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t59 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1093:27+29
    assume {:print "$at(4,43416,43445)"} true;
    $t59 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t60 := !=($t50, $t56) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1093:58+34
    $t60 := !$IsEqual'u64'($t50, $t56);

    // vector::push_back<bool>($t59, $t60) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1093:9+84
    call $t59 := $1_vector_push_back'bool'($t59, $t60);
    if ($abort_flag) {
        assume {:print "$at(4,43398,43482)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t59) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1093:9+84
    $t1 := $Dereference($t59);

    // trace_local[vulnerabilities_detected]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1093:9+84
    assume {:print "$track_local(5,6,1):", $t1} $t1 == $t1;

    // $t61 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1099:29+6
    assume {:print "$at(4,43676,43682)"} true;
    $t61 := 291;
    assume $IsValid'address'($t61);

    // $t62 := 100 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1100:28+3
    assume {:print "$at(4,43712,43715)"} true;
    $t62 := 100;
    assume $IsValid'u64'($t62);

    // $t63 := 2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1101:39+1
    assume {:print "$at(4,43756,43757)"} true;
    $t63 := 2;
    assume $IsValid'u64'($t63);

    // $t64 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1102:39+5
    assume {:print "$at(4,43798,43803)"} true;
    $t64 := false;
    assume $IsValid'bool'($t64);

    // $t65 := pack 0x42::reentrancy_comprehensive::PlayerScore($t61, $t62, $t63, $t64) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1098:17+190
    assume {:print "$at(4,43633,43823)"} true;
    $t65 := $42_reentrancy_comprehensive_PlayerScore($t61, $t62, $t63, $t64);

    // $t66 := vector::empty<0x42::reentrancy_comprehensive::PlayerScore>() on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1097:28+6
    assume {:print "$at(4,43608,43614)"} true;
    call $t66 := $1_vector_empty'$42_reentrancy_comprehensive_PlayerScore'();
    if ($abort_flag) {
        assume {:print "$at(4,43608,43614)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t67 := borrow_local($t66) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1097:28+6
    $t67 := $Mutation($Local(66), EmptyVec(), $t66);

    // vector::push_back<0x42::reentrancy_comprehensive::PlayerScore>($t67, $t65) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1097:28+6
    call $t67 := $1_vector_push_back'$42_reentrancy_comprehensive_PlayerScore'($t67, $t65);
    if ($abort_flag) {
        assume {:print "$at(4,43608,43614)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t66)@]($t67) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1097:28+6
    $t66 := $Dereference($t67);

    // $t68 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1105:26+4
    assume {:print "$at(4,43866,43870)"} true;
    $t68 := true;
    assume $IsValid'bool'($t68);

    // $t69 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1106:30+5
    assume {:print "$at(4,43902,43907)"} true;
    $t69 := false;
    assume $IsValid'bool'($t69);

    // $t70 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1107:38+1
    assume {:print "$at(4,43947,43948)"} true;
    $t70 := 0;
    assume $IsValid'u64'($t70);

    // $t71 := 10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1108:34+2
    assume {:print "$at(4,43984,43986)"} true;
    $t71 := 10;
    assume $IsValid'u64'($t71);

    // $t7 := pack 0x42::reentrancy_comprehensive::GameState($t66, $t68, $t69, $t70, $t71) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1096:20+430
    assume {:print "$at(4,43568,43998)"} true;
    $t7 := $42_reentrancy_comprehensive_GameState($t66, $t68, $t69, $t70, $t71);

    // trace_local[game]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1096:20+430
    assume {:print "$track_local(5,6,7):", $t7} $t7 == $t7;

    // $t72 := copy($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1111:45+4
    assume {:print "$at(4,44047,44051)"} true;
    $t72 := $t7;

    // $t73 := get_field<0x42::reentrancy_comprehensive::GameState>.player_scores($t72) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1111:44+19
    $t73 := $t72->$player_scores;

    // $t74 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1111:65+1
    $t74 := 0;
    assume $IsValid'u64'($t74);

    // $t75 := vector::borrow<0x42::reentrancy_comprehensive::PlayerScore>($t73, $t74) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1111:29+38
    call $t75 := $1_vector_borrow'$42_reentrancy_comprehensive_PlayerScore'($t73, $t74);
    if ($abort_flag) {
        assume {:print "$at(4,44031,44069)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t76 := get_field<0x42::reentrancy_comprehensive::PlayerScore>.score($t75) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1111:29+44
    $t76 := $t75->$score;

    // trace_local[$t8]($t76) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1111:29+44
    assume {:print "$track_local(5,6,3):", $t76} $t76 == $t76;

    // $t77 := borrow_local($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:49+9
    assume {:print "$at(4,44126,44135)"} true;
    $t77 := $Mutation($Local(7), EmptyVec(), $t7);

    // $t78 := 0x123 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:60+6
    $t78 := 291;
    assume $IsValid'address'($t78);

    // $t79 := 50 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:68+2
    $t79 := 50;
    assume $IsValid'u64'($t79);

    // $t80 := 3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:72+1
    $t80 := 3;
    assume $IsValid'u64'($t80);

    // $t81 := reentrancy_comprehensive::calculate_bonus_vulnerable($t77, $t78, $t79, $t80) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:22+52
    call $t81,$t77 := $42_reentrancy_comprehensive_calculate_bonus_vulnerable($t77, $t78, $t79, $t80);
    if ($abort_flag) {
        assume {:print "$at(4,44099,44151)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t7)@]($t77) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:22+52
    $t7 := $Dereference($t77);

    // trace_local[game]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:22+52
    assume {:print "$track_local(5,6,7):", $t7} $t7 == $t7;

    // drop($t81) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1112:22+52

    // $t82 := copy($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1113:43+4
    assume {:print "$at(4,44196,44200)"} true;
    $t82 := $t7;

    // $t83 := get_field<0x42::reentrancy_comprehensive::GameState>.player_scores($t82) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1113:42+19
    $t83 := $t82->$player_scores;

    // $t84 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1113:63+1
    $t84 := 0;
    assume $IsValid'u64'($t84);

    // $t85 := vector::borrow<0x42::reentrancy_comprehensive::PlayerScore>($t83, $t84) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1113:27+38
    call $t85 := $1_vector_borrow'$42_reentrancy_comprehensive_PlayerScore'($t83, $t84);
    if ($abort_flag) {
        assume {:print "$at(4,44180,44218)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t86 := get_field<0x42::reentrancy_comprehensive::PlayerScore>.score($t85) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1113:27+44
    $t86 := $t85->$score;

    // trace_local[$t36]($t86) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1113:27+44
    assume {:print "$track_local(5,6,8):", $t86} $t86 == $t86;

    // $t87 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1115:27+12
    assume {:print "$at(4,44255,44267)"} true;
    $t87 := $Mutation($Local(0), EmptyVec(), $t0);

    // vector::push_back<u64>($t87, $t76) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1115:9+46
    call $t87 := $1_vector_push_back'u64'($t87, $t76);
    if ($abort_flag) {
        assume {:print "$at(4,44237,44283)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t87) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1115:9+46
    $t0 := $Dereference($t87);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1115:9+46
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t88 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1116:27+12
    assume {:print "$at(4,44312,44324)"} true;
    $t88 := $Mutation($Local(0), EmptyVec(), $t0);

    // vector::push_back<u64>($t88, $t86) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1116:9+44
    call $t88 := $1_vector_push_back'u64'($t88, $t86);
    if ($abort_flag) {
        assume {:print "$at(4,44294,44338)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t0)@]($t88) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1116:9+44
    $t0 := $Dereference($t88);

    // trace_local[results]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1116:9+44
    assume {:print "$track_local(5,6,0):", $t0} $t0 == $t0;

    // $t89 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1117:27+29
    assume {:print "$at(4,44367,44396)"} true;
    $t89 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t90 := !=($t76, $t86) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1117:58+28
    $t90 := !$IsEqual'u64'($t76, $t86);

    // vector::push_back<bool>($t89, $t90) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1117:9+78
    call $t89 := $1_vector_push_back'bool'($t89, $t90);
    if ($abort_flag) {
        assume {:print "$at(4,44349,44427)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // write_back[LocalRoot($t1)@]($t89) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1117:9+78
    $t1 := $Dereference($t89);

    // trace_local[vulnerabilities_detected]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1117:9+78
    assume {:print "$track_local(5,6,1):", $t1} $t1 == $t1;

    // $t91 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1120:9+15
    assume {:print "$at(4,44470,44485)"} true;
    $t91 := $t2;

    // reentrancy_comprehensive::drop_bank($t91) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1120:9+15
    call $42_reentrancy_comprehensive_drop_bank($t91);
    if ($abort_flag) {
        assume {:print "$at(4,44470,44485)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t92 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1121:9+23
    assume {:print "$at(4,44496,44519)"} true;
    $t92 := $t5;

    // reentrancy_comprehensive::drop_lending_pool($t92) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1121:9+23
    call $42_reentrancy_comprehensive_drop_lending_pool($t92);
    if ($abort_flag) {
        assume {:print "$at(4,44496,44519)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t93 := move($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1122:9+25
    assume {:print "$at(4,44530,44555)"} true;
    $t93 := $t6;

    // reentrancy_comprehensive::drop_positions($t93) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1122:9+25
    call $42_reentrancy_comprehensive_drop_positions($t93);
    if ($abort_flag) {
        assume {:print "$at(4,44530,44555)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t94 := move($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1123:9+21
    assume {:print "$at(4,44566,44587)"} true;
    $t94 := $t7;

    // reentrancy_comprehensive::drop_game_state($t94) on_abort goto L2 with $t9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1123:9+21
    call $42_reentrancy_comprehensive_drop_game_state($t94);
    if ($abort_flag) {
        assume {:print "$at(4,44566,44587)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(5,6):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t95 := move($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1125:10+7
    assume {:print "$at(4,44601,44608)"} true;
    $t95 := $t0;

    // $t96 := move($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1125:19+24
    $t96 := $t1;

    // trace_return[0]($t95) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1044:79+3055
    assume {:print "$at(4,41587,44642)"} true;
    assume {:print "$track_return(5,6,0):", $t95} $t95 == $t95;

    // trace_return[1]($t96) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1044:79+3055
    assume {:print "$track_return(5,6,1):", $t96} $t96 == $t96;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1126:5+1
    assume {:print "$at(4,44641,44642)"} true;
L1:

    // return ($t95, $t96) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1126:5+1
    assume {:print "$at(4,44641,44642)"} true;
    $ret0 := $t95;
    $ret1 := $t96;
    return;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1126:5+1
L2:

    // abort($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1126:5+1
    assume {:print "$at(4,44641,44642)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_bank [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:5+502
procedure {:inline 1} $42_reentrancy_comprehensive_drop_bank(_$t0: $42_reentrancy_comprehensive_Bank) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var $t2: Vec ($42_reentrancy_comprehensive_Balance);
    var $t3: Vec ($42_reentrancy_comprehensive_Balance);
    var $t4: int;
    var $t5: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var $t6: bool;
    var $t7: bool;
    var $t8: Vec ($42_reentrancy_comprehensive_Balance);
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $42_reentrancy_comprehensive_Balance;
    var $t13: $Mutation (Vec ($42_reentrancy_comprehensive_Balance));
    var $t14: int;
    var $t15: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: $42_reentrancy_comprehensive_Withdrawal;
    var $t20: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal));
    var $t0: $42_reentrancy_comprehensive_Bank;
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'vec'$42_reentrancy_comprehensive_Balance'': Vec ($42_reentrancy_comprehensive_Balance);
    var $temp_0'vec'$42_reentrancy_comprehensive_Withdrawal'': Vec ($42_reentrancy_comprehensive_Withdrawal);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:5+1
    assume {:print "$at(4,52241,52242)"} true;
    assume {:print "$track_local(5,8,0):", $t0} $t0 == $t0;

    // ($t3, $t4, $t5, $t6, $t7) := unpack 0x42::reentrancy_comprehensive::Bank($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    assume {:print "$at(4,52282,52455)"} true;
    $t3 := $t0->$balances;
    $t4 := $t0->$total_deposits;
    $t5 := $t0->$pending_withdrawals;
    $t6 := $t0->$reentrancy_guard;
    $t7 := $t0->$emergency_locked;

    // drop($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173

    // drop($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173

    // $t1 := $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    $t1 := $t5;

    // trace_local[pending_withdrawals]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    assume {:print "$track_local(5,8,1):", $t1} $t1 == $t1;

    // drop($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173

    // $t2 := $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    $t2 := $t3;

    // trace_local[balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    assume {:print "$track_local(5,8,2):", $t2} $t2 == $t2;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume {:print "$at(4,52497,52506)"} true;
L3:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume {:print "$at(4,52497,52506)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t2);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'$42_reentrancy_comprehensive_Balance'($t12);

    // $t13 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($Dereference($t13));

    // trace_local[balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume {:print "$info(): enter loop, variable(s) balances havocked and reassigned"} true;
    assume {:print "$track_local(5,8,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume !$abort_flag;

    // $t8 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    $t8 := $t2;

    // $t9 := vector::length<0x42::reentrancy_comprehensive::Balance>($t8) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:16+25
    call $t9 := $1_vector_length'$42_reentrancy_comprehensive_Balance'($t8);
    if ($abort_flag) {
        assume {:print "$at(4,52482,52507)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // $t10 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:44+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := >($t9, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:16+29
    call $t11 := $Gt($t9, $t10);

    // if ($t11) goto L0 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:9+111
    if ($t11) { goto L0; } else { goto L2; }

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:45+13
    assume {:print "$at(4,52560,52573)"} true;
L0:

    // $t13 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:45+13
    assume {:print "$at(4,52560,52573)"} true;
    $t13 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t12 := vector::pop_back<0x42::reentrancy_comprehensive::Balance>($t13) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31
    call $t12,$t13 := $1_vector_pop_back'$42_reentrancy_comprehensive_Balance'($t13);
    if ($abort_flag) {
        assume {:print "$at(4,52543,52574)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // write_back[LocalRoot($t2)@]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31
    $t2 := $Dereference($t13);

    // trace_local[balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31
    assume {:print "$track_local(5,8,2):", $t2} $t2 == $t2;

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:9+111
    assume {:print "$at(4,52475,52586)"} true;
    goto L7;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume {:print "$at(4,52621,52641)"} true;
L2:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume {:print "$at(4,52621,52641)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''($t1);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t19;

    // assume WellFormed($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'$42_reentrancy_comprehensive_Withdrawal'($t19);

    // $t20 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''($Dereference($t20));

    // trace_local[pending_withdrawals]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume {:print "$info(): enter loop, variable(s) pending_withdrawals havocked and reassigned"} true;
    assume {:print "$track_local(5,8,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume !$abort_flag;

    // $t15 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    $t15 := $t1;

    // $t16 := vector::length<0x42::reentrancy_comprehensive::Withdrawal>($t15) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:16+36
    call $t16 := $1_vector_length'$42_reentrancy_comprehensive_Withdrawal'($t15);
    if ($abort_flag) {
        assume {:print "$at(4,52606,52642)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // $t17 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:55+1
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := >($t16, $t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:16+40
    call $t18 := $Gt($t16, $t17);

    // if ($t18) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:9+136
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:48+24
    assume {:print "$at(4,52698,52722)"} true;
L5:

    // $t20 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:48+24
    assume {:print "$at(4,52698,52722)"} true;
    $t20 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t19 := vector::pop_back<0x42::reentrancy_comprehensive::Withdrawal>($t20) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42
    call $t19,$t20 := $1_vector_pop_back'$42_reentrancy_comprehensive_Withdrawal'($t20);
    if ($abort_flag) {
        assume {:print "$at(4,52681,52723)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // write_back[LocalRoot($t1)@]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42
    $t1 := $Dereference($t20);

    // trace_local[pending_withdrawals]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42
    assume {:print "$track_local(5,8,1):", $t1} $t1 == $t1;

    // drop($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:9+136
    assume {:print "$at(4,52599,52735)"} true;
    goto L6;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
L4:

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
    goto L8;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    // Loop invariant checking block for the loop started with header: L2
L6:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
    assume false;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    // Loop invariant checking block for the loop started with header: L3
L7:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
    assume false;
    return;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
    assume {:print "$at(4,52742,52743)"} true;
L8:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
    assume {:print "$at(4,52742,52743)"} true;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
L9:

    // abort($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
    assume {:print "$at(4,52742,52743)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_bank [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:5+502
procedure {:timeLimit 40} $42_reentrancy_comprehensive_drop_bank$verify(_$t0: $42_reentrancy_comprehensive_Bank) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var $t2: Vec ($42_reentrancy_comprehensive_Balance);
    var $t3: Vec ($42_reentrancy_comprehensive_Balance);
    var $t4: int;
    var $t5: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var $t6: bool;
    var $t7: bool;
    var $t8: Vec ($42_reentrancy_comprehensive_Balance);
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $42_reentrancy_comprehensive_Balance;
    var $t13: $Mutation (Vec ($42_reentrancy_comprehensive_Balance));
    var $t14: int;
    var $t15: Vec ($42_reentrancy_comprehensive_Withdrawal);
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: $42_reentrancy_comprehensive_Withdrawal;
    var $t20: $Mutation (Vec ($42_reentrancy_comprehensive_Withdrawal));
    var $t0: $42_reentrancy_comprehensive_Bank;
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'vec'$42_reentrancy_comprehensive_Balance'': Vec ($42_reentrancy_comprehensive_Balance);
    var $temp_0'vec'$42_reentrancy_comprehensive_Withdrawal'': Vec ($42_reentrancy_comprehensive_Withdrawal);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:5+1
    assume {:print "$at(4,52241,52242)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_Bank'($t0);

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:5+1
    assume {:print "$track_local(5,8,0):", $t0} $t0 == $t0;

    // ($t3, $t4, $t5, $t6, $t7) := unpack 0x42::reentrancy_comprehensive::Bank($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    assume {:print "$at(4,52282,52455)"} true;
    $t3 := $t0->$balances;
    $t4 := $t0->$total_deposits;
    $t5 := $t0->$pending_withdrawals;
    $t6 := $t0->$reentrancy_guard;
    $t7 := $t0->$emergency_locked;

    // drop($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173

    // drop($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173

    // $t1 := $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    $t1 := $t5;

    // trace_local[pending_withdrawals]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    assume {:print "$track_local(5,8,1):", $t1} $t1 == $t1;

    // drop($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173

    // $t2 := $t3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    $t2 := $t3;

    // trace_local[balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1349:13+173
    assume {:print "$track_local(5,8,2):", $t2} $t2 == $t2;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume {:print "$at(4,52497,52506)"} true;
L3:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume {:print "$at(4,52497,52506)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t2);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'$42_reentrancy_comprehensive_Balance'($t12);

    // $t13 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($Dereference($t13));

    // trace_local[balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume {:print "$info(): enter loop, variable(s) balances havocked and reassigned"} true;
    assume {:print "$track_local(5,8,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    assume !$abort_flag;

    // $t8 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:31+9
    $t8 := $t2;

    // $t9 := vector::length<0x42::reentrancy_comprehensive::Balance>($t8) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:16+25
    call $t9 := $1_vector_length'$42_reentrancy_comprehensive_Balance'($t8);
    if ($abort_flag) {
        assume {:print "$at(4,52482,52507)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // $t10 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:44+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := >($t9, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:16+29
    call $t11 := $Gt($t9, $t10);

    // if ($t11) goto L0 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:9+111
    if ($t11) { goto L0; } else { goto L2; }

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:45+13
    assume {:print "$at(4,52560,52573)"} true;
L0:

    // $t13 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:45+13
    assume {:print "$at(4,52560,52573)"} true;
    $t13 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t12 := vector::pop_back<0x42::reentrancy_comprehensive::Balance>($t13) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31
    call $t12,$t13 := $1_vector_pop_back'$42_reentrancy_comprehensive_Balance'($t13);
    if ($abort_flag) {
        assume {:print "$at(4,52543,52574)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // write_back[LocalRoot($t2)@]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31
    $t2 := $Dereference($t13);

    // trace_local[balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31
    assume {:print "$track_local(5,8,2):", $t2} $t2 == $t2;

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1358:28+31

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1357:9+111
    assume {:print "$at(4,52475,52586)"} true;
    goto L7;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume {:print "$at(4,52621,52641)"} true;
L2:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume {:print "$at(4,52621,52641)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''($t1);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t19;

    // assume WellFormed($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'$42_reentrancy_comprehensive_Withdrawal'($t19);

    // $t20 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_Withdrawal''($Dereference($t20));

    // trace_local[pending_withdrawals]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume {:print "$info(): enter loop, variable(s) pending_withdrawals havocked and reassigned"} true;
    assume {:print "$track_local(5,8,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    assume !$abort_flag;

    // $t15 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:31+20
    $t15 := $t1;

    // $t16 := vector::length<0x42::reentrancy_comprehensive::Withdrawal>($t15) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:16+36
    call $t16 := $1_vector_length'$42_reentrancy_comprehensive_Withdrawal'($t15);
    if ($abort_flag) {
        assume {:print "$at(4,52606,52642)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // $t17 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:55+1
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := >($t16, $t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:16+40
    call $t18 := $Gt($t16, $t17);

    // if ($t18) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:9+136
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:48+24
    assume {:print "$at(4,52698,52722)"} true;
L5:

    // $t20 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:48+24
    assume {:print "$at(4,52698,52722)"} true;
    $t20 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t19 := vector::pop_back<0x42::reentrancy_comprehensive::Withdrawal>($t20) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42
    call $t19,$t20 := $1_vector_pop_back'$42_reentrancy_comprehensive_Withdrawal'($t20);
    if ($abort_flag) {
        assume {:print "$at(4,52681,52723)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,8):", $t14} $t14 == $t14;
        goto L9;
    }

    // write_back[LocalRoot($t1)@]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42
    $t1 := $Dereference($t20);

    // trace_local[pending_withdrawals]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42
    assume {:print "$track_local(5,8,1):", $t1} $t1 == $t1;

    // drop($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1362:31+42

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1361:9+136
    assume {:print "$at(4,52599,52735)"} true;
    goto L6;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
L4:

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
    goto L8;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    // Loop invariant checking block for the loop started with header: L2
L6:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
    assume false;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    // Loop invariant checking block for the loop started with header: L3
L7:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1348:31+476
    assume {:print "$at(4,52267,52743)"} true;
    assume false;
    return;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
    assume {:print "$at(4,52742,52743)"} true;
L8:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
    assume {:print "$at(4,52742,52743)"} true;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
L9:

    // abort($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1364:5+1
    assume {:print "$at(4,52742,52743)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_bridge_state [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:5+624
procedure {:timeLimit 40} $42_reentrancy_comprehensive_drop_bridge_state$verify(_$t0: $42_reentrancy_comprehensive_BridgeState) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var $t2: Vec ($42_reentrancy_comprehensive_Balance);
    var $t3: Vec ($42_reentrancy_comprehensive_Balance);
    var $t4: Vec ($42_reentrancy_comprehensive_Balance);
    var $t5: Vec ($42_reentrancy_comprehensive_Balance);
    var $t6: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var $t7: bool;
    var $t8: Vec ($42_reentrancy_comprehensive_Balance);
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $42_reentrancy_comprehensive_Balance;
    var $t13: $Mutation (Vec ($42_reentrancy_comprehensive_Balance));
    var $t14: int;
    var $t15: Vec ($42_reentrancy_comprehensive_Balance);
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: $42_reentrancy_comprehensive_Balance;
    var $t20: $Mutation (Vec ($42_reentrancy_comprehensive_Balance));
    var $t21: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: $42_reentrancy_comprehensive_CrossChainLock;
    var $t26: $Mutation (Vec ($42_reentrancy_comprehensive_CrossChainLock));
    var $t0: $42_reentrancy_comprehensive_BridgeState;
    var $temp_0'$42_reentrancy_comprehensive_BridgeState': $42_reentrancy_comprehensive_BridgeState;
    var $temp_0'vec'$42_reentrancy_comprehensive_Balance'': Vec ($42_reentrancy_comprehensive_Balance);
    var $temp_0'vec'$42_reentrancy_comprehensive_CrossChainLock'': Vec ($42_reentrancy_comprehensive_CrossChainLock);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:5+1
    assume {:print "$at(4,54320,54321)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_BridgeState'($t0);

    // trace_local[bridge]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:5+1
    assume {:print "$track_local(5,9,0):", $t0} $t0 == $t0;

    // ($t4, $t5, $t6, $t7) := unpack 0x42::reentrancy_comprehensive::BridgeState($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142
    assume {:print "$at(4,54378,54520)"} true;
    $t4 := $t0->$sui_balances;
    $t5 := $t0->$aptos_balances;
    $t6 := $t0->$cross_chain_locks;
    $t7 := $t0->$bridge_active;

    // drop($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142

    // $t1 := $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142
    $t1 := $t6;

    // trace_local[cross_chain_locks]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142
    assume {:print "$track_local(5,9,1):", $t1} $t1 == $t1;

    // $t2 := $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142
    $t2 := $t5;

    // trace_local[aptos_balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142
    assume {:print "$track_local(5,9,2):", $t2} $t2 == $t2;

    // $t3 := $t4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142
    $t3 := $t4;

    // trace_local[sui_balances]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1419:13+142
    assume {:print "$track_local(5,9,3):", $t3} $t3 == $t3;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume {:print "$at(4,54564,54577)"} true;
L3:

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume {:print "$at(4,54564,54577)"} true;
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t3);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume $IsValid'$42_reentrancy_comprehensive_Balance'($t12);

    // $t13 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($Dereference($t13));

    // trace_local[sui_balances]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume {:print "$info(): enter loop, variable(s) sui_balances havocked and reassigned"} true;
    assume {:print "$track_local(5,9,3):", $t3} $t3 == $t3;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    assume !$abort_flag;

    // $t8 := copy($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:31+13
    $t8 := $t3;

    // $t9 := vector::length<0x42::reentrancy_comprehensive::Balance>($t8) on_abort goto L13 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:16+29
    call $t9 := $1_vector_length'$42_reentrancy_comprehensive_Balance'($t8);
    if ($abort_flag) {
        assume {:print "$at(4,54549,54578)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,9):", $t14} $t14 == $t14;
        goto L13;
    }

    // $t10 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:48+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := >($t9, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:16+33
    call $t11 := $Gt($t9, $t10);

    // if ($t11) goto L0 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:9+119
    if ($t11) { goto L0; } else { goto L2; }

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1427:45+17
    assume {:print "$at(4,54631,54648)"} true;
L0:

    // $t13 := borrow_local($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1427:45+17
    assume {:print "$at(4,54631,54648)"} true;
    $t13 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t12 := vector::pop_back<0x42::reentrancy_comprehensive::Balance>($t13) on_abort goto L13 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1427:28+35
    call $t12,$t13 := $1_vector_pop_back'$42_reentrancy_comprehensive_Balance'($t13);
    if ($abort_flag) {
        assume {:print "$at(4,54614,54649)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,9):", $t14} $t14 == $t14;
        goto L13;
    }

    // write_back[LocalRoot($t3)@]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1427:28+35
    $t3 := $Dereference($t13);

    // trace_local[sui_balances]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1427:28+35
    assume {:print "$track_local(5,9,3):", $t3} $t3 == $t3;

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1427:28+35

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1426:9+119
    assume {:print "$at(4,54542,54661)"} true;
    goto L10;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume {:print "$at(4,54696,54711)"} true;
L2:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume {:print "$at(4,54696,54711)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t2);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    havoc $t19;

    // assume WellFormed($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume $IsValid'$42_reentrancy_comprehensive_Balance'($t19);

    // $t20 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($Dereference($t20));

    // trace_local[aptos_balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume {:print "$info(): enter loop, variable(s) aptos_balances havocked and reassigned"} true;
    assume {:print "$track_local(5,9,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    assume !$abort_flag;

    // $t15 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:31+15
    $t15 := $t2;

    // $t16 := vector::length<0x42::reentrancy_comprehensive::Balance>($t15) on_abort goto L13 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:16+31
    call $t16 := $1_vector_length'$42_reentrancy_comprehensive_Balance'($t15);
    if ($abort_flag) {
        assume {:print "$at(4,54681,54712)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,9):", $t14} $t14 == $t14;
        goto L13;
    }

    // $t17 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:50+1
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := >($t16, $t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:16+35
    call $t18 := $Gt($t16, $t17);

    // if ($t18) goto L4 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:9+123
    if ($t18) { goto L4; } else { goto L6; }

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1431:45+19
    assume {:print "$at(4,54765,54784)"} true;
L4:

    // $t20 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1431:45+19
    assume {:print "$at(4,54765,54784)"} true;
    $t20 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t19 := vector::pop_back<0x42::reentrancy_comprehensive::Balance>($t20) on_abort goto L13 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1431:28+37
    call $t19,$t20 := $1_vector_pop_back'$42_reentrancy_comprehensive_Balance'($t20);
    if ($abort_flag) {
        assume {:print "$at(4,54748,54785)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,9):", $t14} $t14 == $t14;
        goto L13;
    }

    // write_back[LocalRoot($t2)@]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1431:28+37
    $t2 := $Dereference($t20);

    // trace_local[aptos_balances]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1431:28+37
    assume {:print "$track_local(5,9,2):", $t2} $t2 == $t2;

    // drop($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1431:28+37

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1430:9+123
    assume {:print "$at(4,54674,54797)"} true;
    goto L9;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume {:print "$at(4,54832,54850)"} true;
L6:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume {:print "$at(4,54832,54850)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume $IsValid'vec'$42_reentrancy_comprehensive_CrossChainLock''($t1);

    // $t21 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    havoc $t21;

    // assume WellFormed($t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume $IsValid'vec'$42_reentrancy_comprehensive_CrossChainLock''($t21);

    // $t22 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    havoc $t22;

    // assume WellFormed($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume $IsValid'u64'($t22);

    // $t23 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    havoc $t23;

    // assume WellFormed($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume $IsValid'u64'($t23);

    // $t24 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    havoc $t24;

    // assume WellFormed($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume $IsValid'bool'($t24);

    // $t25 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    havoc $t25;

    // assume WellFormed($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume $IsValid'$42_reentrancy_comprehensive_CrossChainLock'($t25);

    // $t26 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    havoc $t26;

    // assume WellFormed($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume $IsValid'vec'$42_reentrancy_comprehensive_CrossChainLock''($Dereference($t26));

    // trace_local[cross_chain_locks]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume {:print "$info(): enter loop, variable(s) cross_chain_locks havocked and reassigned"} true;
    assume {:print "$track_local(5,9,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    assume !$abort_flag;

    // $t21 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:31+18
    $t21 := $t1;

    // $t22 := vector::length<0x42::reentrancy_comprehensive::CrossChainLock>($t21) on_abort goto L13 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:16+34
    call $t22 := $1_vector_length'$42_reentrancy_comprehensive_CrossChainLock'($t21);
    if ($abort_flag) {
        assume {:print "$at(4,54817,54851)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,9):", $t14} $t14 == $t14;
        goto L13;
    }

    // $t23 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:53+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:16+38
    call $t24 := $Gt($t22, $t23);

    // if ($t24) goto L8 else goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:9+126
    if ($t24) { goto L8; } else { goto L7; }

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1435:42+22
    assume {:print "$at(4,54901,54923)"} true;
L8:

    // $t26 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1435:42+22
    assume {:print "$at(4,54901,54923)"} true;
    $t26 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t25 := vector::pop_back<0x42::reentrancy_comprehensive::CrossChainLock>($t26) on_abort goto L13 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1435:25+40
    call $t25,$t26 := $1_vector_pop_back'$42_reentrancy_comprehensive_CrossChainLock'($t26);
    if ($abort_flag) {
        assume {:print "$at(4,54884,54924)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,9):", $t14} $t14 == $t14;
        goto L13;
    }

    // write_back[LocalRoot($t1)@]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1435:25+40
    $t1 := $Dereference($t26);

    // trace_local[cross_chain_locks]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1435:25+40
    assume {:print "$track_local(5,9,1):", $t1} $t1 == $t1;

    // drop($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1435:25+40

    // goto L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1434:9+126
    assume {:print "$at(4,54810,54936)"} true;
    goto L11;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    assume {:print "$at(4,54363,54944)"} true;
L7:

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    assume {:print "$at(4,54363,54944)"} true;
    goto L12;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    // Loop invariant checking block for the loop started with header: L2
L9:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    assume {:print "$at(4,54363,54944)"} true;
    assume false;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    // Loop invariant checking block for the loop started with header: L3
L10:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    assume {:print "$at(4,54363,54944)"} true;
    assume false;
    return;

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    // Loop invariant checking block for the loop started with header: L6
L11:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1418:48+581
    assume {:print "$at(4,54363,54944)"} true;
    assume false;
    return;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1437:5+1
    assume {:print "$at(4,54943,54944)"} true;
L12:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1437:5+1
    assume {:print "$at(4,54943,54944)"} true;
    return;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1437:5+1
L13:

    // abort($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1437:5+1
    assume {:print "$at(4,54943,54944)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_game_state [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:5+388
procedure {:inline 1} $42_reentrancy_comprehensive_drop_game_state(_$t0: $42_reentrancy_comprehensive_GameState) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t2: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $42_reentrancy_comprehensive_PlayerScore;
    var $t12: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore));
    var $t13: int;
    var $t0: $42_reentrancy_comprehensive_GameState;
    var $temp_0'$42_reentrancy_comprehensive_GameState': $42_reentrancy_comprehensive_GameState;
    var $temp_0'vec'$42_reentrancy_comprehensive_PlayerScore'': Vec ($42_reentrancy_comprehensive_PlayerScore);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:5+1
    assume {:print "$at(4,53369,53370)"} true;
    assume {:print "$track_local(5,10,0):", $t0} $t0 == $t0;

    // ($t2, $t3, $t4, $t5, $t6) := unpack 0x42::reentrancy_comprehensive::GameState($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189
    assume {:print "$at(4,53421,53610)"} true;
    $t2 := $t0->$player_scores;
    $t3 := $t0->$game_active;
    $t4 := $t0->$processing_turn;
    $t5 := $t0->$bonus_calculation_depth;
    $t6 := $t0->$max_recursion_depth;

    // drop($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // drop($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // drop($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // drop($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // $t1 := $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189
    $t1 := $t2;

    // trace_local[player_scores]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189
    assume {:print "$track_local(5,10,1):", $t1} $t1 == $t1;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume {:print "$at(4,53652,53666)"} true;
L2:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume {:print "$at(4,53652,53666)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''($t1);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'u64'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'$42_reentrancy_comprehensive_PlayerScore'($t11);

    // $t12 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''($Dereference($t12));

    // trace_local[player_scores]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume {:print "$info(): enter loop, variable(s) player_scores havocked and reassigned"} true;
    assume {:print "$track_local(5,10,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume !$abort_flag;

    // $t7 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    $t7 := $t1;

    // $t8 := vector::length<0x42::reentrancy_comprehensive::PlayerScore>($t7) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:16+30
    call $t8 := $1_vector_length'$42_reentrancy_comprehensive_PlayerScore'($t7);
    if ($abort_flag) {
        assume {:print "$at(4,53637,53667)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,10):", $t13} $t13 == $t13;
        goto L5;
    }

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:49+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := >($t8, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:16+34
    call $t10 := $Gt($t8, $t9);

    // if ($t10) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:9+119
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:43+18
    assume {:print "$at(4,53718,53736)"} true;
L1:

    // $t12 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:43+18
    assume {:print "$at(4,53718,53736)"} true;
    $t12 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t11 := vector::pop_back<0x42::reentrancy_comprehensive::PlayerScore>($t12) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36
    call $t11,$t12 := $1_vector_pop_back'$42_reentrancy_comprehensive_PlayerScore'($t12);
    if ($abort_flag) {
        assume {:print "$at(4,53701,53737)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,10):", $t13} $t13 == $t13;
        goto L5;
    }

    // write_back[LocalRoot($t1)@]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36
    $t1 := $Dereference($t12);

    // trace_local[player_scores]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36
    assume {:print "$track_local(5,10,1):", $t1} $t1 == $t1;

    // drop($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:9+119
    assume {:print "$at(4,53630,53749)"} true;
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    assume {:print "$at(4,53406,53757)"} true;
L0:

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    assume {:print "$at(4,53406,53757)"} true;
    goto L4;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    // Loop invariant checking block for the loop started with header: L2
L3:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    assume {:print "$at(4,53406,53757)"} true;
    assume false;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
    assume {:print "$at(4,53756,53757)"} true;
L4:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
    assume {:print "$at(4,53756,53757)"} true;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
L5:

    // abort($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
    assume {:print "$at(4,53756,53757)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_game_state [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:5+388
procedure {:timeLimit 40} $42_reentrancy_comprehensive_drop_game_state$verify(_$t0: $42_reentrancy_comprehensive_GameState) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t2: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t3: bool;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $42_reentrancy_comprehensive_PlayerScore;
    var $t12: $Mutation (Vec ($42_reentrancy_comprehensive_PlayerScore));
    var $t13: int;
    var $t0: $42_reentrancy_comprehensive_GameState;
    var $temp_0'$42_reentrancy_comprehensive_GameState': $42_reentrancy_comprehensive_GameState;
    var $temp_0'vec'$42_reentrancy_comprehensive_PlayerScore'': Vec ($42_reentrancy_comprehensive_PlayerScore);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:5+1
    assume {:print "$at(4,53369,53370)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_GameState'($t0);

    // trace_local[game]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:5+1
    assume {:print "$track_local(5,10,0):", $t0} $t0 == $t0;

    // ($t2, $t3, $t4, $t5, $t6) := unpack 0x42::reentrancy_comprehensive::GameState($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189
    assume {:print "$at(4,53421,53610)"} true;
    $t2 := $t0->$player_scores;
    $t3 := $t0->$game_active;
    $t4 := $t0->$processing_turn;
    $t5 := $t0->$bonus_calculation_depth;
    $t6 := $t0->$max_recursion_depth;

    // drop($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // drop($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // drop($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // drop($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189

    // $t1 := $t2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189
    $t1 := $t2;

    // trace_local[player_scores]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1387:13+189
    assume {:print "$track_local(5,10,1):", $t1} $t1 == $t1;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume {:print "$at(4,53652,53666)"} true;
L2:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume {:print "$at(4,53652,53666)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''($t1);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'u64'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'$42_reentrancy_comprehensive_PlayerScore'($t11);

    // $t12 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''($Dereference($t12));

    // trace_local[player_scores]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume {:print "$info(): enter loop, variable(s) player_scores havocked and reassigned"} true;
    assume {:print "$track_local(5,10,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    assume !$abort_flag;

    // $t7 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:31+14
    $t7 := $t1;

    // $t8 := vector::length<0x42::reentrancy_comprehensive::PlayerScore>($t7) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:16+30
    call $t8 := $1_vector_length'$42_reentrancy_comprehensive_PlayerScore'($t7);
    if ($abort_flag) {
        assume {:print "$at(4,53637,53667)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,10):", $t13} $t13 == $t13;
        goto L5;
    }

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:49+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := >($t8, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:16+34
    call $t10 := $Gt($t8, $t9);

    // if ($t10) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:9+119
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:43+18
    assume {:print "$at(4,53718,53736)"} true;
L1:

    // $t12 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:43+18
    assume {:print "$at(4,53718,53736)"} true;
    $t12 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t11 := vector::pop_back<0x42::reentrancy_comprehensive::PlayerScore>($t12) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36
    call $t11,$t12 := $1_vector_pop_back'$42_reentrancy_comprehensive_PlayerScore'($t12);
    if ($abort_flag) {
        assume {:print "$at(4,53701,53737)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,10):", $t13} $t13 == $t13;
        goto L5;
    }

    // write_back[LocalRoot($t1)@]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36
    $t1 := $Dereference($t12);

    // trace_local[player_scores]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36
    assume {:print "$track_local(5,10,1):", $t1} $t1 == $t1;

    // drop($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1396:26+36

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1395:9+119
    assume {:print "$at(4,53630,53749)"} true;
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    assume {:print "$at(4,53406,53757)"} true;
L0:

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    assume {:print "$at(4,53406,53757)"} true;
    goto L4;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    // Loop invariant checking block for the loop started with header: L2
L3:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1386:42+351
    assume {:print "$at(4,53406,53757)"} true;
    assume false;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
    assume {:print "$at(4,53756,53757)"} true;
L4:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
    assume {:print "$at(4,53756,53757)"} true;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
L5:

    // abort($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1398:5+1
    assume {:print "$at(4,53756,53757)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_lending_pool [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:5+417
procedure {:inline 1} $42_reentrancy_comprehensive_drop_lending_pool(_$t0: $42_reentrancy_comprehensive_LendingPool) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var $t7: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $42_reentrancy_comprehensive_LiquidationProcess;
    var $t12: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess));
    var $t13: int;
    var $t0: $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'$42_reentrancy_comprehensive_LendingPool': $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'vec'$42_reentrancy_comprehensive_LiquidationProcess'': Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:5+1
    assume {:print "$at(4,52751,52752)"} true;
    assume {:print "$track_local(5,11,0):", $t0} $t0 == $t0;

    // ($t2, $t3, $t4, $t5, $t6) := unpack 0x42::reentrancy_comprehensive::LendingPool($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196
    assume {:print "$at(4,52807,53003)"} true;
    $t2 := $t0->$total_borrowed;
    $t3 := $t0->$total_collateral;
    $t4 := $t0->$liquidation_threshold;
    $t5 := $t0->$liquidation_lock;
    $t6 := $t0->$active_liquidations;

    // $t1 := $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196
    $t1 := $t6;

    // trace_local[active_liquidations]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196
    assume {:print "$track_local(5,11,1):", $t1} $t1 == $t1;

    // drop($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // drop($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // drop($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // drop($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume {:print "$at(4,53045,53065)"} true;
L2:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume {:print "$at(4,53045,53065)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''($t1);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'u64'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'$42_reentrancy_comprehensive_LiquidationProcess'($t11);

    // $t12 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''($Dereference($t12));

    // trace_local[active_liquidations]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume {:print "$info(): enter loop, variable(s) active_liquidations havocked and reassigned"} true;
    assume {:print "$track_local(5,11,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume !$abort_flag;

    // $t7 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    $t7 := $t1;

    // $t8 := vector::length<0x42::reentrancy_comprehensive::LiquidationProcess>($t7) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:16+36
    call $t8 := $1_vector_length'$42_reentrancy_comprehensive_LiquidationProcess'($t7);
    if ($abort_flag) {
        assume {:print "$at(4,53030,53066)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,11):", $t13} $t13 == $t13;
        goto L5;
    }

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:55+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := >($t8, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:16+40
    call $t10 := $Gt($t8, $t9);

    // if ($t10) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:9+137
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:49+24
    assume {:print "$at(4,53123,53147)"} true;
L1:

    // $t12 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:49+24
    assume {:print "$at(4,53123,53147)"} true;
    $t12 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t11 := vector::pop_back<0x42::reentrancy_comprehensive::LiquidationProcess>($t12) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42
    call $t11,$t12 := $1_vector_pop_back'$42_reentrancy_comprehensive_LiquidationProcess'($t12);
    if ($abort_flag) {
        assume {:print "$at(4,53106,53148)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,11):", $t13} $t13 == $t13;
        goto L5;
    }

    // write_back[LocalRoot($t1)@]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42
    $t1 := $Dereference($t12);

    // trace_local[active_liquidations]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42
    assume {:print "$track_local(5,11,1):", $t1} $t1 == $t1;

    // drop($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:9+137
    assume {:print "$at(4,53023,53160)"} true;
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    assume {:print "$at(4,52792,53168)"} true;
L0:

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    assume {:print "$at(4,52792,53168)"} true;
    goto L4;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    // Loop invariant checking block for the loop started with header: L2
L3:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    assume {:print "$at(4,52792,53168)"} true;
    assume false;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
    assume {:print "$at(4,53167,53168)"} true;
L4:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
    assume {:print "$at(4,53167,53168)"} true;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
L5:

    // abort($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
    assume {:print "$at(4,53167,53168)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_lending_pool [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:5+417
procedure {:timeLimit 40} $42_reentrancy_comprehensive_drop_lending_pool$verify(_$t0: $42_reentrancy_comprehensive_LendingPool) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var $t7: Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $42_reentrancy_comprehensive_LiquidationProcess;
    var $t12: $Mutation (Vec ($42_reentrancy_comprehensive_LiquidationProcess));
    var $t13: int;
    var $t0: $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'$42_reentrancy_comprehensive_LendingPool': $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'vec'$42_reentrancy_comprehensive_LiquidationProcess'': Vec ($42_reentrancy_comprehensive_LiquidationProcess);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:5+1
    assume {:print "$at(4,52751,52752)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_LendingPool'($t0);

    // trace_local[pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:5+1
    assume {:print "$track_local(5,11,0):", $t0} $t0 == $t0;

    // ($t2, $t3, $t4, $t5, $t6) := unpack 0x42::reentrancy_comprehensive::LendingPool($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196
    assume {:print "$at(4,52807,53003)"} true;
    $t2 := $t0->$total_borrowed;
    $t3 := $t0->$total_collateral;
    $t4 := $t0->$liquidation_threshold;
    $t5 := $t0->$liquidation_lock;
    $t6 := $t0->$active_liquidations;

    // $t1 := $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196
    $t1 := $t6;

    // trace_local[active_liquidations]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196
    assume {:print "$track_local(5,11,1):", $t1} $t1 == $t1;

    // drop($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // drop($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // drop($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // drop($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1367:13+196

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume {:print "$at(4,53045,53065)"} true;
L2:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume {:print "$at(4,53045,53065)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''($t1);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'u64'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'$42_reentrancy_comprehensive_LiquidationProcess'($t11);

    // $t12 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_LiquidationProcess''($Dereference($t12));

    // trace_local[active_liquidations]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume {:print "$info(): enter loop, variable(s) active_liquidations havocked and reassigned"} true;
    assume {:print "$track_local(5,11,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    assume !$abort_flag;

    // $t7 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:31+20
    $t7 := $t1;

    // $t8 := vector::length<0x42::reentrancy_comprehensive::LiquidationProcess>($t7) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:16+36
    call $t8 := $1_vector_length'$42_reentrancy_comprehensive_LiquidationProcess'($t7);
    if ($abort_flag) {
        assume {:print "$at(4,53030,53066)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,11):", $t13} $t13 == $t13;
        goto L5;
    }

    // $t9 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:55+1
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // $t10 := >($t8, $t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:16+40
    call $t10 := $Gt($t8, $t9);

    // if ($t10) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:9+137
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:49+24
    assume {:print "$at(4,53123,53147)"} true;
L1:

    // $t12 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:49+24
    assume {:print "$at(4,53123,53147)"} true;
    $t12 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t11 := vector::pop_back<0x42::reentrancy_comprehensive::LiquidationProcess>($t12) on_abort goto L5 with $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42
    call $t11,$t12 := $1_vector_pop_back'$42_reentrancy_comprehensive_LiquidationProcess'($t12);
    if ($abort_flag) {
        assume {:print "$at(4,53106,53148)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(5,11):", $t13} $t13 == $t13;
        goto L5;
    }

    // write_back[LocalRoot($t1)@]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42
    $t1 := $Dereference($t12);

    // trace_local[active_liquidations]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42
    assume {:print "$track_local(5,11,1):", $t1} $t1 == $t1;

    // drop($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1376:32+42

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1375:9+137
    assume {:print "$at(4,53023,53160)"} true;
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    assume {:print "$at(4,52792,53168)"} true;
L0:

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    assume {:print "$at(4,52792,53168)"} true;
    goto L4;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    // Loop invariant checking block for the loop started with header: L2
L3:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1366:46+376
    assume {:print "$at(4,52792,53168)"} true;
    assume false;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
    assume {:print "$at(4,53167,53168)"} true;
L4:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
    assume {:print "$at(4,53167,53168)"} true;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
L5:

    // abort($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1378:5+1
    assume {:print "$at(4,53167,53168)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_positions [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:5+185
procedure {:inline 1} $42_reentrancy_comprehensive_drop_positions(_$t0: Vec ($42_reentrancy_comprehensive_UserPosition)) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $42_reentrancy_comprehensive_UserPosition;
    var $t6: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition));
    var $t7: int;
    var $t0: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'': Vec ($42_reentrancy_comprehensive_UserPosition);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:5+1
    assume {:print "$at(4,53176,53177)"} true;
    assume {:print "$track_local(5,12,0):", $t0} $t0 == $t0;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume {:print "$at(4,53261,53271)"} true;
L2:

    // $t0 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume {:print "$at(4,53261,53271)"} true;
    havoc $t0;

    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($t0);

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($t1);

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'u64'($t2);

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'$42_reentrancy_comprehensive_UserPosition'($t5);

    // $t6 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($Dereference($t6));

    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume {:print "$info(): enter loop, variable(s) positions havocked and reassigned"} true;
    assume {:print "$track_local(5,12,0):", $t0} $t0 == $t0;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume !$abort_flag;

    // $t1 := copy($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    $t1 := $t0;

    // $t2 := vector::length<0x42::reentrancy_comprehensive::UserPosition>($t1) on_abort goto L5 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:16+26
    call $t2 := $1_vector_length'$42_reentrancy_comprehensive_UserPosition'($t1);
    if ($abort_flag) {
        assume {:print "$at(4,53246,53272)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(5,12):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:45+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := >($t2, $t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:16+30
    call $t4 := $Gt($t2, $t3);

    // if ($t4) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:9+114
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:46+14
    assume {:print "$at(4,53326,53340)"} true;
L1:

    // $t6 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:46+14
    assume {:print "$at(4,53326,53340)"} true;
    $t6 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t5 := vector::pop_back<0x42::reentrancy_comprehensive::UserPosition>($t6) on_abort goto L5 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32
    call $t5,$t6 := $1_vector_pop_back'$42_reentrancy_comprehensive_UserPosition'($t6);
    if ($abort_flag) {
        assume {:print "$at(4,53309,53341)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(5,12):", $t7} $t7 == $t7;
        goto L5;
    }

    // write_back[LocalRoot($t0)@]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32
    $t0 := $Dereference($t6);

    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32
    assume {:print "$track_local(5,12,0):", $t0} $t0 == $t0;

    // drop($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:9+114
    assume {:print "$at(4,53239,53353)"} true;
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    assume {:print "$at(4,53228,53361)"} true;
L0:

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    assume {:print "$at(4,53228,53361)"} true;
    goto L4;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    // Loop invariant checking block for the loop started with header: L2
L3:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    assume {:print "$at(4,53228,53361)"} true;
    assume false;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
    assume {:print "$at(4,53360,53361)"} true;
L4:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
    assume {:print "$at(4,53360,53361)"} true;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
L5:

    // abort($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
    assume {:print "$at(4,53360,53361)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_positions [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:5+185
procedure {:timeLimit 40} $42_reentrancy_comprehensive_drop_positions$verify(_$t0: Vec ($42_reentrancy_comprehensive_UserPosition)) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: $42_reentrancy_comprehensive_UserPosition;
    var $t6: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition));
    var $t7: int;
    var $t0: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'': Vec ($42_reentrancy_comprehensive_UserPosition);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:5+1
    assume {:print "$at(4,53176,53177)"} true;
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($t0);

    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:5+1
    assume {:print "$track_local(5,12,0):", $t0} $t0 == $t0;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume {:print "$at(4,53261,53271)"} true;
L2:

    // $t0 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume {:print "$at(4,53261,53271)"} true;
    havoc $t0;

    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($t0);

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($t1);

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'u64'($t2);

    // $t3 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t3;

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'u64'($t3);

    // $t4 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t4;

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'bool'($t4);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'$42_reentrancy_comprehensive_UserPosition'($t5);

    // $t6 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    havoc $t6;

    // assume WellFormed($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($Dereference($t6));

    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume {:print "$info(): enter loop, variable(s) positions havocked and reassigned"} true;
    assume {:print "$track_local(5,12,0):", $t0} $t0 == $t0;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    assume !$abort_flag;

    // $t1 := copy($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:31+10
    $t1 := $t0;

    // $t2 := vector::length<0x42::reentrancy_comprehensive::UserPosition>($t1) on_abort goto L5 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:16+26
    call $t2 := $1_vector_length'$42_reentrancy_comprehensive_UserPosition'($t1);
    if ($abort_flag) {
        assume {:print "$at(4,53246,53272)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(5,12):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t3 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:45+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := >($t2, $t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:16+30
    call $t4 := $Gt($t2, $t3);

    // if ($t4) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:9+114
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:46+14
    assume {:print "$at(4,53326,53340)"} true;
L1:

    // $t6 := borrow_local($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:46+14
    assume {:print "$at(4,53326,53340)"} true;
    $t6 := $Mutation($Local(0), EmptyVec(), $t0);

    // $t5 := vector::pop_back<0x42::reentrancy_comprehensive::UserPosition>($t6) on_abort goto L5 with $t7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32
    call $t5,$t6 := $1_vector_pop_back'$42_reentrancy_comprehensive_UserPosition'($t6);
    if ($abort_flag) {
        assume {:print "$at(4,53309,53341)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(5,12):", $t7} $t7 == $t7;
        goto L5;
    }

    // write_back[LocalRoot($t0)@]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32
    $t0 := $Dereference($t6);

    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32
    assume {:print "$track_local(5,12,0):", $t0} $t0 == $t0;

    // drop($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1382:29+32

    // goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1381:9+114
    assume {:print "$at(4,53239,53353)"} true;
    goto L3;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    assume {:print "$at(4,53228,53361)"} true;
L0:

    // goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    assume {:print "$at(4,53228,53361)"} true;
    goto L4;

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    // Loop invariant checking block for the loop started with header: L2
L3:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1380:57+133
    assume {:print "$at(4,53228,53361)"} true;
    assume false;
    return;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
    assume {:print "$at(4,53360,53361)"} true;
L4:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
    assume {:print "$at(4,53360,53361)"} true;
    return;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
L5:

    // abort($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1384:5+1
    assume {:print "$at(4,53360,53361)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::drop_vault [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:5+547
procedure {:timeLimit 40} $42_reentrancy_comprehensive_drop_vault$verify(_$t0: $42_reentrancy_comprehensive_ResourceVault) returns ()
{
    // declare local variables
    var $t1: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var $t2: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var $t3: int;
    var $t4: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var $t5: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var $t6: bool;
    var $t7: bool;
    var $t8: Vec ($42_reentrancy_comprehensive_PendingTransfer);
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $42_reentrancy_comprehensive_PendingTransfer;
    var $t13: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer));
    var $t14: int;
    var $t15: Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: $42_reentrancy_comprehensive_CompletedTransfer;
    var $t20: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer));
    var $t0: $42_reentrancy_comprehensive_ResourceVault;
    var $temp_0'$42_reentrancy_comprehensive_ResourceVault': $42_reentrancy_comprehensive_ResourceVault;
    var $temp_0'vec'$42_reentrancy_comprehensive_CompletedTransfer'': Vec ($42_reentrancy_comprehensive_CompletedTransfer);
    var $temp_0'vec'$42_reentrancy_comprehensive_PendingTransfer'': Vec ($42_reentrancy_comprehensive_PendingTransfer);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:5+1
    assume {:print "$at(4,53765,53766)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_ResourceVault'($t0);

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:5+1
    assume {:print "$track_local(5,13,0):", $t0} $t0 == $t0;

    // ($t3, $t4, $t5, $t6, $t7) := unpack 0x42::reentrancy_comprehensive::ResourceVault($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188
    assume {:print "$at(4,53817,54005)"} true;
    $t3 := $t0->$resource_count;
    $t4 := $t0->$pending_transfers;
    $t5 := $t0->$completed_transfers;
    $t6 := $t0->$transfer_lock;
    $t7 := $t0->$batch_processing;

    // drop($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188

    // drop($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188

    // $t1 := $t5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188
    $t1 := $t5;

    // trace_local[completed_transfers]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188
    assume {:print "$track_local(5,13,1):", $t1} $t1 == $t1;

    // $t2 := $t4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188
    $t2 := $t4;

    // trace_local[pending_transfers]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188
    assume {:print "$track_local(5,13,2):", $t2} $t2 == $t2;

    // drop($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1401:13+188

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume {:print "$at(4,54048,54066)"} true;
L3:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume {:print "$at(4,54048,54066)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume $IsValid'vec'$42_reentrancy_comprehensive_PendingTransfer''($t2);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume $IsValid'vec'$42_reentrancy_comprehensive_PendingTransfer''($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume $IsValid'u64'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume $IsValid'bool'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume $IsValid'$42_reentrancy_comprehensive_PendingTransfer'($t12);

    // $t13 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume $IsValid'vec'$42_reentrancy_comprehensive_PendingTransfer''($Dereference($t13));

    // trace_local[pending_transfers]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume {:print "$info(): enter loop, variable(s) pending_transfers havocked and reassigned"} true;
    assume {:print "$track_local(5,13,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    assume !$abort_flag;

    // $t8 := copy($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:31+18
    $t8 := $t2;

    // $t9 := vector::length<0x42::reentrancy_comprehensive::PendingTransfer>($t8) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:16+34
    call $t9 := $1_vector_length'$42_reentrancy_comprehensive_PendingTransfer'($t8);
    if ($abort_flag) {
        assume {:print "$at(4,54033,54067)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,13):", $t14} $t14 == $t14;
        goto L9;
    }

    // $t10 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:53+1
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // $t11 := >($t9, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:16+38
    call $t11 := $Gt($t9, $t10);

    // if ($t11) goto L0 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:9+130
    if ($t11) { goto L0; } else { goto L2; }

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1410:46+22
    assume {:print "$at(4,54121,54143)"} true;
L0:

    // $t13 := borrow_local($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1410:46+22
    assume {:print "$at(4,54121,54143)"} true;
    $t13 := $Mutation($Local(2), EmptyVec(), $t2);

    // $t12 := vector::pop_back<0x42::reentrancy_comprehensive::PendingTransfer>($t13) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1410:29+40
    call $t12,$t13 := $1_vector_pop_back'$42_reentrancy_comprehensive_PendingTransfer'($t13);
    if ($abort_flag) {
        assume {:print "$at(4,54104,54144)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,13):", $t14} $t14 == $t14;
        goto L9;
    }

    // write_back[LocalRoot($t2)@]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1410:29+40
    $t2 := $Dereference($t13);

    // trace_local[pending_transfers]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1410:29+40
    assume {:print "$track_local(5,13,2):", $t2} $t2 == $t2;

    // drop($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1410:29+40

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1409:9+130
    assume {:print "$at(4,54026,54156)"} true;
    goto L7;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume {:print "$at(4,54191,54211)"} true;
L2:

    // $t1 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume {:print "$at(4,54191,54211)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_CompletedTransfer''($t1);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_CompletedTransfer''($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    havoc $t17;

    // assume WellFormed($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    havoc $t18;

    // assume WellFormed($t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    havoc $t19;

    // assume WellFormed($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume $IsValid'$42_reentrancy_comprehensive_CompletedTransfer'($t19);

    // $t20 := havoc[mut_all]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    havoc $t20;

    // assume WellFormed($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume $IsValid'vec'$42_reentrancy_comprehensive_CompletedTransfer''($Dereference($t20));

    // trace_local[completed_transfers]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume {:print "$info(): enter loop, variable(s) completed_transfers havocked and reassigned"} true;
    assume {:print "$track_local(5,13,1):", $t1} $t1 == $t1;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    assume !$abort_flag;

    // $t15 := copy($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:31+20
    $t15 := $t1;

    // $t16 := vector::length<0x42::reentrancy_comprehensive::CompletedTransfer>($t15) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:16+36
    call $t16 := $1_vector_length'$42_reentrancy_comprehensive_CompletedTransfer'($t15);
    if ($abort_flag) {
        assume {:print "$at(4,54176,54212)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,13):", $t14} $t14 == $t14;
        goto L9;
    }

    // $t17 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:55+1
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := >($t16, $t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:16+40
    call $t18 := $Gt($t16, $t17);

    // if ($t18) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:9+135
    if ($t18) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1414:47+24
    assume {:print "$at(4,54267,54291)"} true;
L5:

    // $t20 := borrow_local($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1414:47+24
    assume {:print "$at(4,54267,54291)"} true;
    $t20 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t19 := vector::pop_back<0x42::reentrancy_comprehensive::CompletedTransfer>($t20) on_abort goto L9 with $t14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1414:30+42
    call $t19,$t20 := $1_vector_pop_back'$42_reentrancy_comprehensive_CompletedTransfer'($t20);
    if ($abort_flag) {
        assume {:print "$at(4,54250,54292)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(5,13):", $t14} $t14 == $t14;
        goto L9;
    }

    // write_back[LocalRoot($t1)@]($t20) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1414:30+42
    $t1 := $Dereference($t20);

    // trace_local[completed_transfers]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1414:30+42
    assume {:print "$track_local(5,13,1):", $t1} $t1 == $t1;

    // drop($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1414:30+42

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1413:9+135
    assume {:print "$at(4,54169,54304)"} true;
    goto L6;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:42+510
    assume {:print "$at(4,53802,54312)"} true;
L4:

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:42+510
    assume {:print "$at(4,53802,54312)"} true;
    goto L8;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:42+510
    // Loop invariant checking block for the loop started with header: L2
L6:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:42+510
    assume {:print "$at(4,53802,54312)"} true;
    assume false;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:42+510
    // Loop invariant checking block for the loop started with header: L3
L7:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1400:42+510
    assume {:print "$at(4,53802,54312)"} true;
    assume false;
    return;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1416:5+1
    assume {:print "$at(4,54311,54312)"} true;
L8:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1416:5+1
    assume {:print "$at(4,54311,54312)"} true;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1416:5+1
L9:

    // abort($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1416:5+1
    assume {:print "$at(4,54311,54312)"} true;
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::execute_subsystem_operation [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:5+149
procedure {:timeLimit 40} $42_reentrancy_comprehensive_execute_subsystem_operation$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_ComplexSystem), _$t1: int, _$t2: Vec (int)) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_ComplexSystem))
{
    // declare local variables
    var $t0: $Mutation ($42_reentrancy_comprehensive_ComplexSystem);
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'$42_reentrancy_comprehensive_ComplexSystem': $42_reentrancy_comprehensive_ComplexSystem;
    var $temp_0'u64': int;
    var $temp_0'vec'u64'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:5+1
    assume {:print "$at(4,51901,51902)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_ComplexSystem'($Dereference($t0));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:5+1
    assume $IsValid'vec'u64''($t2);

    // trace_local[_system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:5+1
    $temp_0'$42_reentrancy_comprehensive_ComplexSystem' := $Dereference($t0);
    assume {:print "$track_local(5,16,0):", $temp_0'$42_reentrancy_comprehensive_ComplexSystem'} $temp_0'$42_reentrancy_comprehensive_ComplexSystem' == $temp_0'$42_reentrancy_comprehensive_ComplexSystem';

    // trace_local[_subsystem]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:5+1
    assume {:print "$track_local(5,16,1):", $t1} $t1 == $t1;

    // trace_local[_data]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:5+1
    assume {:print "$track_local(5,16,2):", $t2} $t2 == $t2;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:104+50

    // trace_local[_system]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1339:104+50
    $temp_0'$42_reentrancy_comprehensive_ComplexSystem' := $Dereference($t0);
    assume {:print "$track_local(5,16,0):", $temp_0'$42_reentrancy_comprehensive_ComplexSystem'} $temp_0'$42_reentrancy_comprehensive_ComplexSystem' == $temp_0'$42_reentrancy_comprehensive_ComplexSystem';

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1341:5+1
    assume {:print "$at(4,52049,52050)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1341:5+1
    assume {:print "$at(4,52049,52050)"} true;
    $ret0 := $t0;
    return;

}

// fun reentrancy_comprehensive::execute_withdrawal_callbacks [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+127
procedure {:inline 1} $42_reentrancy_comprehensive_execute_withdrawal_callbacks(_$t0: $42_reentrancy_comprehensive_Bank, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t0: $42_reentrancy_comprehensive_Bank;
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[_bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume {:print "$at(4,50842,50843)"} true;
    assume {:print "$track_local(5,17,0):", $t0} $t0 == $t0;

    // trace_local[_owner]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume {:print "$track_local(5,17,1):", $t1} $t1 == $t1;

    // trace_local[_amount]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume {:print "$track_local(5,17,2):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1309:5+1
    assume {:print "$at(4,50968,50969)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1309:5+1
    assume {:print "$at(4,50968,50969)"} true;
    return;

}

// fun reentrancy_comprehensive::execute_withdrawal_callbacks [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+127
procedure {:timeLimit 40} $42_reentrancy_comprehensive_execute_withdrawal_callbacks$verify(_$t0: $42_reentrancy_comprehensive_Bank, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t0: $42_reentrancy_comprehensive_Bank;
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume {:print "$at(4,50842,50843)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_Bank'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume $IsValid'u64'($t2);

    // trace_local[_bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume {:print "$track_local(5,17,0):", $t0} $t0 == $t0;

    // trace_local[_owner]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume {:print "$track_local(5,17,1):", $t1} $t1 == $t1;

    // trace_local[_amount]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1307:5+1
    assume {:print "$track_local(5,17,2):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1309:5+1
    assume {:print "$at(4,50968,50969)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1309:5+1
    assume {:print "$at(4,50968,50969)"} true;
    return;

}

// fun reentrancy_comprehensive::finalize_liquidation_process [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:5+158
procedure {:timeLimit 40} $42_reentrancy_comprehensive_finalize_liquidation_process$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_LendingPool), _$t1: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), _$t2: int) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_LendingPool), $ret1: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)))
{
    // declare local variables
    var $t0: $Mutation ($42_reentrancy_comprehensive_LendingPool);
    var $t1: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition));
    var $t2: int;
    var $temp_0'$42_reentrancy_comprehensive_LendingPool': $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'address': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'': Vec ($42_reentrancy_comprehensive_UserPosition);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);
    assume $t1->l == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:5+1
    assume {:print "$at(4,51382,51383)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_LendingPool'($Dereference($t0));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:5+1
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($Dereference($t1));

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:5+1
    assume $IsValid'address'($t2);

    // trace_local[_pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:5+1
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,18,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // trace_local[_positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:5+1
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,18,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // trace_local[_user]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:5+1
    assume {:print "$track_local(5,18,2):", $t2} $t2 == $t2;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:118+45

    // drop($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:118+45

    // trace_local[_pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:118+45
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,18,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // trace_local[_positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1323:118+45
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,18,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1325:5+1
    assume {:print "$at(4,51539,51540)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1325:5+1
    assume {:print "$at(4,51539,51540)"} true;
    $ret0 := $t0;
    $ret1 := $t1;
    return;

}

// fun reentrancy_comprehensive::find_balance_index [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+332
procedure {:inline 1} $42_reentrancy_comprehensive_find_balance_index(_$t0: Vec ($42_reentrancy_comprehensive_Balance), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $42_reentrancy_comprehensive_Balance;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_reentrancy_comprehensive_Balance);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_Balance'': Vec ($42_reentrancy_comprehensive_Balance);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[balances]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+1
    assume {:print "$at(4,49059,49060)"} true;
    assume {:print "$track_local(5,19,0):", $t0} $t0 == $t0;

    // trace_local[owner]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+1
    assume {:print "$track_local(5,19,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1240:17+1
    assume {:print "$at(4,49150,49151)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1240:17+1
    assume {:print "$track_local(5,19,2):", $t4} $t4 == $t4;

    // $t5 := vector::length<0x42::reentrancy_comprehensive::Balance>($t0) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1241:19+24
    assume {:print "$at(4,49172,49196)"} true;
    call $t5 := $1_vector_length'$42_reentrancy_comprehensive_Balance'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,49172,49196)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,19):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[len]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1241:19+24
    assume {:print "$track_local(5,19,3):", $t5} $t5 == $t5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume {:print "$at(4,49216,49217)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume {:print "$at(4,49216,49217)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'$42_reentrancy_comprehensive_Balance'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'address'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(5,19,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+7
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1244:42+8
    assume {:print "$at(4,49269,49277)"} true;
L1:

    // $t8 := vector::borrow<0x42::reentrancy_comprehensive::Balance>($t0, $t2) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1244:27+27
    assume {:print "$at(4,49254,49281)"} true;
    call $t8 := $1_vector_borrow'$42_reentrancy_comprehensive_Balance'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,49254,49281)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,19):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t9 := get_field<0x42::reentrancy_comprehensive::Balance>.owner($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:17+13
    assume {:print "$at(4,49300,49313)"} true;
    $t9 := $t8->$owner;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:17+22
    $t10 := $IsEqual'address'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:13+36
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
    assume {:print "$at(4,49324,49332)"} true;
    assume {:print "$track_return(5,19,0):", $t2} $t2 == $t2;

    // $t13 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
    $t13 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:17+1
    assume {:print "$at(4,49351,49352)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:21+1
    assume {:print "$at(4,49355,49356)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,49351,49356)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,19):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:13+9
    assume {:print "$track_local(5,19,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    assume {:print "$at(4,49209,49368)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
L0:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:77+260
    assume {:print "$at(4,49131,49391)"} true;
    assume {:print "$track_return(5,19,0):", $t5} $t5 == $t5;

    // $t13 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:77+260
    $t13 := $t5;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:77+260
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(4,49209,49368)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    assume {:print "$at(4,49209,49368)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
    assume {:print "$at(4,49390,49391)"} true;
L6:

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
    assume {:print "$at(4,49390,49391)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
L7:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
    assume {:print "$at(4,49390,49391)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::find_balance_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+332
procedure {:timeLimit 40} $42_reentrancy_comprehensive_find_balance_index$verify(_$t0: Vec ($42_reentrancy_comprehensive_Balance), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $42_reentrancy_comprehensive_Balance;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_reentrancy_comprehensive_Balance);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_Balance'': Vec ($42_reentrancy_comprehensive_Balance);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+1
    assume {:print "$at(4,49059,49060)"} true;
    assume $IsValid'vec'$42_reentrancy_comprehensive_Balance''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+1
    assume $IsValid'address'($t1);

    // trace_local[balances]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+1
    assume {:print "$track_local(5,19,0):", $t0} $t0 == $t0;

    // trace_local[owner]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:5+1
    assume {:print "$track_local(5,19,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1240:17+1
    assume {:print "$at(4,49150,49151)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1240:17+1
    assume {:print "$track_local(5,19,2):", $t4} $t4 == $t4;

    // $t5 := vector::length<0x42::reentrancy_comprehensive::Balance>($t0) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1241:19+24
    assume {:print "$at(4,49172,49196)"} true;
    call $t5 := $1_vector_length'$42_reentrancy_comprehensive_Balance'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,49172,49196)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,19):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[len]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1241:19+24
    assume {:print "$track_local(5,19,3):", $t5} $t5 == $t5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume {:print "$at(4,49216,49217)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume {:print "$at(4,49216,49217)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'$42_reentrancy_comprehensive_Balance'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'address'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(5,19,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:16+7
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1244:42+8
    assume {:print "$at(4,49269,49277)"} true;
L1:

    // $t8 := vector::borrow<0x42::reentrancy_comprehensive::Balance>($t0, $t2) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1244:27+27
    assume {:print "$at(4,49254,49281)"} true;
    call $t8 := $1_vector_borrow'$42_reentrancy_comprehensive_Balance'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,49254,49281)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,19):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t9 := get_field<0x42::reentrancy_comprehensive::Balance>.owner($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:17+13
    assume {:print "$at(4,49300,49313)"} true;
    $t9 := $t8->$owner;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:17+22
    $t10 := $IsEqual'address'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:13+36
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
    assume {:print "$at(4,49324,49332)"} true;
    assume {:print "$track_return(5,19,0):", $t2} $t2 == $t2;

    // $t13 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
    $t13 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1245:41+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:17+1
    assume {:print "$at(4,49351,49352)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:21+1
    assume {:print "$at(4,49355,49356)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,49351,49356)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,19):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1246:13+9
    assume {:print "$track_local(5,19,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    assume {:print "$at(4,49209,49368)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
L0:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:77+260
    assume {:print "$at(4,49131,49391)"} true;
    assume {:print "$track_return(5,19,0):", $t5} $t5 == $t5;

    // $t13 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:77+260
    $t13 := $t5;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1239:77+260
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(4,49209,49368)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1243:9+159
    assume {:print "$at(4,49209,49368)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
    assume {:print "$at(4,49390,49391)"} true;
L6:

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
    assume {:print "$at(4,49390,49391)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
L7:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1250:5+1
    assume {:print "$at(4,49390,49391)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::find_player_index [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+328
procedure {:inline 1} $42_reentrancy_comprehensive_find_player_index(_$t0: Vec ($42_reentrancy_comprehensive_PlayerScore), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $42_reentrancy_comprehensive_PlayerScore;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_PlayerScore'': Vec ($42_reentrancy_comprehensive_PlayerScore);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[scores]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+1
    assume {:print "$at(4,49747,49748)"} true;
    assume {:print "$track_local(5,20,0):", $t0} $t0 == $t0;

    // trace_local[player]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+1
    assume {:print "$track_local(5,20,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1266:17+1
    assume {:print "$at(4,49840,49841)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1266:17+1
    assume {:print "$track_local(5,20,2):", $t4} $t4 == $t4;

    // $t5 := vector::length<0x42::reentrancy_comprehensive::PlayerScore>($t0) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1267:19+22
    assume {:print "$at(4,49862,49884)"} true;
    call $t5 := $1_vector_length'$42_reentrancy_comprehensive_PlayerScore'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,49862,49884)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,20):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[len]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1267:19+22
    assume {:print "$track_local(5,20,3):", $t5} $t5 == $t5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume {:print "$at(4,49904,49905)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume {:print "$at(4,49904,49905)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'$42_reentrancy_comprehensive_PlayerScore'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'address'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(5,20,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+7
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1270:40+6
    assume {:print "$at(4,49955,49961)"} true;
L1:

    // $t8 := vector::borrow<0x42::reentrancy_comprehensive::PlayerScore>($t0, $t2) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1270:25+25
    assume {:print "$at(4,49940,49965)"} true;
    call $t8 := $1_vector_borrow'$42_reentrancy_comprehensive_PlayerScore'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,49940,49965)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,20):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t9 := get_field<0x42::reentrancy_comprehensive::PlayerScore>.player($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:17+12
    assume {:print "$at(4,49984,49996)"} true;
    $t9 := $t8->$player;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:17+22
    $t10 := $IsEqual'address'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:13+36
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
    assume {:print "$at(4,50008,50016)"} true;
    assume {:print "$track_return(5,20,0):", $t2} $t2 == $t2;

    // $t13 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
    $t13 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:17+1
    assume {:print "$at(4,50035,50036)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:21+1
    assume {:print "$at(4,50039,50040)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,50035,50040)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,20):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:13+9
    assume {:print "$track_local(5,20,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    assume {:print "$at(4,49897,50052)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
L0:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:79+254
    assume {:print "$at(4,49821,50075)"} true;
    assume {:print "$track_return(5,20,0):", $t5} $t5 == $t5;

    // $t13 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:79+254
    $t13 := $t5;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:79+254
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(4,49897,50052)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    assume {:print "$at(4,49897,50052)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
    assume {:print "$at(4,50074,50075)"} true;
L6:

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
    assume {:print "$at(4,50074,50075)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
L7:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
    assume {:print "$at(4,50074,50075)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::find_player_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+328
procedure {:timeLimit 40} $42_reentrancy_comprehensive_find_player_index$verify(_$t0: Vec ($42_reentrancy_comprehensive_PlayerScore), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $42_reentrancy_comprehensive_PlayerScore;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_reentrancy_comprehensive_PlayerScore);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_PlayerScore'': Vec ($42_reentrancy_comprehensive_PlayerScore);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+1
    assume {:print "$at(4,49747,49748)"} true;
    assume $IsValid'vec'$42_reentrancy_comprehensive_PlayerScore''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+1
    assume $IsValid'address'($t1);

    // trace_local[scores]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+1
    assume {:print "$track_local(5,20,0):", $t0} $t0 == $t0;

    // trace_local[player]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:5+1
    assume {:print "$track_local(5,20,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1266:17+1
    assume {:print "$at(4,49840,49841)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1266:17+1
    assume {:print "$track_local(5,20,2):", $t4} $t4 == $t4;

    // $t5 := vector::length<0x42::reentrancy_comprehensive::PlayerScore>($t0) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1267:19+22
    assume {:print "$at(4,49862,49884)"} true;
    call $t5 := $1_vector_length'$42_reentrancy_comprehensive_PlayerScore'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,49862,49884)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,20):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[len]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1267:19+22
    assume {:print "$track_local(5,20,3):", $t5} $t5 == $t5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume {:print "$at(4,49904,49905)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume {:print "$at(4,49904,49905)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'$42_reentrancy_comprehensive_PlayerScore'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'address'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(5,20,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:16+7
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1270:40+6
    assume {:print "$at(4,49955,49961)"} true;
L1:

    // $t8 := vector::borrow<0x42::reentrancy_comprehensive::PlayerScore>($t0, $t2) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1270:25+25
    assume {:print "$at(4,49940,49965)"} true;
    call $t8 := $1_vector_borrow'$42_reentrancy_comprehensive_PlayerScore'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,49940,49965)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,20):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t9 := get_field<0x42::reentrancy_comprehensive::PlayerScore>.player($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:17+12
    assume {:print "$at(4,49984,49996)"} true;
    $t9 := $t8->$player;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:17+22
    $t10 := $IsEqual'address'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:13+36
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
    assume {:print "$at(4,50008,50016)"} true;
    assume {:print "$track_return(5,20,0):", $t2} $t2 == $t2;

    // $t13 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
    $t13 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1271:41+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:17+1
    assume {:print "$at(4,50035,50036)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:21+1
    assume {:print "$at(4,50039,50040)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,50035,50040)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,20):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1272:13+9
    assume {:print "$track_local(5,20,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    assume {:print "$at(4,49897,50052)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
L0:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:79+254
    assume {:print "$at(4,49821,50075)"} true;
    assume {:print "$track_return(5,20,0):", $t5} $t5 == $t5;

    // $t13 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:79+254
    $t13 := $t5;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1265:79+254
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(4,49897,50052)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1269:9+155
    assume {:print "$at(4,49897,50052)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
    assume {:print "$at(4,50074,50075)"} true;
L6:

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
    assume {:print "$at(4,50074,50075)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
L7:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1276:5+1
    assume {:print "$at(4,50074,50075)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::find_position_index [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+340
procedure {:inline 1} $42_reentrancy_comprehensive_find_position_index(_$t0: Vec ($42_reentrancy_comprehensive_UserPosition), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $42_reentrancy_comprehensive_UserPosition;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'': Vec ($42_reentrancy_comprehensive_UserPosition);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+1
    assume {:print "$at(4,49399,49400)"} true;
    assume {:print "$track_local(5,21,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+1
    assume {:print "$track_local(5,21,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1253:17+1
    assume {:print "$at(4,49496,49497)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1253:17+1
    assume {:print "$track_local(5,21,2):", $t4} $t4 == $t4;

    // $t5 := vector::length<0x42::reentrancy_comprehensive::UserPosition>($t0) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1254:19+25
    assume {:print "$at(4,49518,49543)"} true;
    call $t5 := $1_vector_length'$42_reentrancy_comprehensive_UserPosition'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,49518,49543)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,21):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[len]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1254:19+25
    assume {:print "$track_local(5,21,3):", $t5} $t5 == $t5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume {:print "$at(4,49563,49564)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume {:print "$at(4,49563,49564)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'$42_reentrancy_comprehensive_UserPosition'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'address'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(5,21,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+7
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1257:43+9
    assume {:print "$at(4,49617,49626)"} true;
L1:

    // $t8 := vector::borrow<0x42::reentrancy_comprehensive::UserPosition>($t0, $t2) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1257:28+28
    assume {:print "$at(4,49602,49630)"} true;
    call $t8 := $1_vector_borrow'$42_reentrancy_comprehensive_UserPosition'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,49602,49630)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,21):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t9 := get_field<0x42::reentrancy_comprehensive::UserPosition>.user($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:17+13
    assume {:print "$at(4,49649,49662)"} true;
    $t9 := $t8->$user;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:17+21
    $t10 := $IsEqual'address'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:13+35
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
    assume {:print "$at(4,49672,49680)"} true;
    assume {:print "$track_return(5,21,0):", $t2} $t2 == $t2;

    // $t13 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
    $t13 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:17+1
    assume {:print "$at(4,49699,49700)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:21+1
    assume {:print "$at(4,49703,49704)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,49699,49704)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,21):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:13+9
    assume {:print "$track_local(5,21,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    assume {:print "$at(4,49556,49716)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
L0:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:83+262
    assume {:print "$at(4,49477,49739)"} true;
    assume {:print "$track_return(5,21,0):", $t5} $t5 == $t5;

    // $t13 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:83+262
    $t13 := $t5;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:83+262
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(4,49556,49716)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    assume {:print "$at(4,49556,49716)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
    assume {:print "$at(4,49738,49739)"} true;
L6:

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
    assume {:print "$at(4,49738,49739)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
L7:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
    assume {:print "$at(4,49738,49739)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::find_position_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+340
procedure {:timeLimit 40} $42_reentrancy_comprehensive_find_position_index$verify(_$t0: Vec ($42_reentrancy_comprehensive_UserPosition), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $42_reentrancy_comprehensive_UserPosition;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'': Vec ($42_reentrancy_comprehensive_UserPosition);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+1
    assume {:print "$at(4,49399,49400)"} true;
    assume $IsValid'vec'$42_reentrancy_comprehensive_UserPosition''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+1
    assume $IsValid'address'($t1);

    // trace_local[positions]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+1
    assume {:print "$track_local(5,21,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:5+1
    assume {:print "$track_local(5,21,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1253:17+1
    assume {:print "$at(4,49496,49497)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1253:17+1
    assume {:print "$track_local(5,21,2):", $t4} $t4 == $t4;

    // $t5 := vector::length<0x42::reentrancy_comprehensive::UserPosition>($t0) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1254:19+25
    assume {:print "$at(4,49518,49543)"} true;
    call $t5 := $1_vector_length'$42_reentrancy_comprehensive_UserPosition'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,49518,49543)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,21):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[len]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1254:19+25
    assume {:print "$track_local(5,21,3):", $t5} $t5 == $t5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume {:print "$at(4,49563,49564)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume {:print "$at(4,49563,49564)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'$42_reentrancy_comprehensive_UserPosition'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'address'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(5,21,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:16+7
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1257:43+9
    assume {:print "$at(4,49617,49626)"} true;
L1:

    // $t8 := vector::borrow<0x42::reentrancy_comprehensive::UserPosition>($t0, $t2) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1257:28+28
    assume {:print "$at(4,49602,49630)"} true;
    call $t8 := $1_vector_borrow'$42_reentrancy_comprehensive_UserPosition'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,49602,49630)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,21):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t9 := get_field<0x42::reentrancy_comprehensive::UserPosition>.user($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:17+13
    assume {:print "$at(4,49649,49662)"} true;
    $t9 := $t8->$user;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:17+21
    $t10 := $IsEqual'address'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:13+35
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
    assume {:print "$at(4,49672,49680)"} true;
    assume {:print "$track_return(5,21,0):", $t2} $t2 == $t2;

    // $t13 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
    $t13 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1258:40+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:17+1
    assume {:print "$at(4,49699,49700)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:21+1
    assume {:print "$at(4,49703,49704)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,49699,49704)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,21):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1259:13+9
    assume {:print "$track_local(5,21,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    assume {:print "$at(4,49556,49716)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
L0:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:83+262
    assume {:print "$at(4,49477,49739)"} true;
    assume {:print "$track_return(5,21,0):", $t5} $t5 == $t5;

    // $t13 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:83+262
    $t13 := $t5;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1252:83+262
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(4,49556,49716)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1256:9+160
    assume {:print "$at(4,49556,49716)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
    assume {:print "$at(4,49738,49739)"} true;
L6:

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
    assume {:print "$at(4,49738,49739)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
L7:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1263:5+1
    assume {:print "$at(4,49738,49739)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::find_subsystem_index [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:5+333
procedure {:timeLimit 40} $42_reentrancy_comprehensive_find_subsystem_index$verify(_$t0: Vec ($42_reentrancy_comprehensive_Subsystem), _$t1: int) returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: $42_reentrancy_comprehensive_Subsystem;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t0: Vec ($42_reentrancy_comprehensive_Subsystem);
    var $t1: int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_Subsystem'': Vec ($42_reentrancy_comprehensive_Subsystem);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:5+1
    assume {:print "$at(4,50083,50084)"} true;
    assume $IsValid'vec'$42_reentrancy_comprehensive_Subsystem''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:5+1
    assume $IsValid'u64'($t1);

    // trace_local[subsystems]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:5+1
    assume {:print "$track_local(5,22,0):", $t0} $t0 == $t0;

    // trace_local[id]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:5+1
    assume {:print "$track_local(5,22,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1279:17+1
    assume {:print "$at(4,50173,50174)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // trace_local[i]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1279:17+1
    assume {:print "$track_local(5,22,2):", $t4} $t4 == $t4;

    // $t5 := vector::length<0x42::reentrancy_comprehensive::Subsystem>($t0) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1280:19+26
    assume {:print "$at(4,50195,50221)"} true;
    call $t5 := $1_vector_length'$42_reentrancy_comprehensive_Subsystem'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,50195,50221)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,22):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[len]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1280:19+26
    assume {:print "$track_local(5,22,3):", $t5} $t5 == $t5;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume {:print "$at(4,50241,50242)"} true;
L4:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume {:print "$at(4,50241,50242)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume $IsValid'u64'($t2);

    // $t7 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    havoc $t7;

    // assume WellFormed($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume $IsValid'bool'($t7);

    // $t8 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    havoc $t8;

    // assume WellFormed($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume $IsValid'$42_reentrancy_comprehensive_Subsystem'($t8);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume $IsValid'u64'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume $IsValid'bool'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume $IsValid'u64'($t12);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume {:print "$info(): enter loop, variable(s) i havocked and reassigned"} true;
    assume {:print "$track_local(5,22,2):", $t2} $t2 == $t2;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+1
    assume !$abort_flag;

    // $t7 := <($t2, $t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:16+7
    call $t7 := $Lt($t2, $t5);

    // if ($t7) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:9+159
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1283:44+10
    assume {:print "$at(4,50296,50306)"} true;
L1:

    // $t8 := vector::borrow<0x42::reentrancy_comprehensive::Subsystem>($t0, $t2) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1283:29+29
    assume {:print "$at(4,50281,50310)"} true;
    call $t8 := $1_vector_borrow'$42_reentrancy_comprehensive_Subsystem'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,50281,50310)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,22):", $t6} $t6 == $t6;
        goto L7;
    }

    // $t9 := get_field<0x42::reentrancy_comprehensive::Subsystem>.id($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1284:17+12
    assume {:print "$at(4,50329,50341)"} true;
    $t9 := $t8->$id;

    // $t10 := ==($t9, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1284:17+18
    $t10 := $IsEqual'u64'($t9, $t1);

    // if ($t10) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1284:13+32
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1284:37+8
L3:

    // trace_return[0]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1284:37+8
    assume {:print "$at(4,50349,50357)"} true;
    assume {:print "$track_return(5,22,0):", $t2} $t2 == $t2;

    // $t13 := move($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1284:37+8
    $t13 := $t2;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1284:37+8
    goto L6;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1285:17+1
    assume {:print "$at(4,50376,50377)"} true;
L2:

    // $t11 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1285:21+1
    assume {:print "$at(4,50380,50381)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t2, $t11) on_abort goto L7 with $t6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1285:17+5
    call $t12 := $AddU64($t2, $t11);
    if ($abort_flag) {
        assume {:print "$at(4,50376,50381)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(5,22):", $t6} $t6 == $t6;
        goto L7;
    }

    // trace_local[i]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1285:13+9
    assume {:print "$track_local(5,22,2):", $t12} $t12 == $t12;

    // goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:9+159
    assume {:print "$at(4,50234,50393)"} true;
    goto L5;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:9+159
L0:

    // trace_return[0]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:76+262
    assume {:print "$at(4,50154,50416)"} true;
    assume {:print "$track_return(5,22,0):", $t5} $t5 == $t5;

    // $t13 := move($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:76+262
    $t13 := $t5;

    // goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1278:76+262
    goto L6;

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:9+159
    // Loop invariant checking block for the loop started with header: L4
    assume {:print "$at(4,50234,50393)"} true;
L5:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1282:9+159
    assume {:print "$at(4,50234,50393)"} true;
    assume false;
    return;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1289:5+1
    assume {:print "$at(4,50415,50416)"} true;
L6:

    // return $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1289:5+1
    assume {:print "$at(4,50415,50416)"} true;
    $ret0 := $t13;
    return;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1289:5+1
L7:

    // abort($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1289:5+1
    assume {:print "$at(4,50415,50416)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::has_active_lock [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:5+373
procedure {:timeLimit 40} $42_reentrancy_comprehensive_has_active_lock$verify(_$t0: Vec ($42_reentrancy_comprehensive_CrossChainLock), _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $42_reentrancy_comprehensive_CrossChainLock;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: $42_reentrancy_comprehensive_CrossChainLock;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: bool;
    var $t19: bool;
    var $t0: Vec ($42_reentrancy_comprehensive_CrossChainLock);
    var $t1: int;
    var $temp_0'$42_reentrancy_comprehensive_CrossChainLock': $42_reentrancy_comprehensive_CrossChainLock;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_CrossChainLock'': Vec ($42_reentrancy_comprehensive_CrossChainLock);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:5+1
    assume {:print "$at(4,50424,50425)"} true;
    assume $IsValid'vec'$42_reentrancy_comprehensive_CrossChainLock''($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:5+1
    assume $IsValid'address'($t1);

    // trace_local[locks]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:5+1
    assume {:print "$track_local(5,23,0):", $t0} $t0 == $t0;

    // trace_local[user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:5+1
    assume {:print "$track_local(5,23,1):", $t1} $t1 == $t1;

    // $t6 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1292:17+1
    assume {:print "$at(4,50516,50517)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // trace_local[i]($t6) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1292:17+1
    assume {:print "$track_local(5,23,2):", $t6} $t6 == $t6;

    // $t7 := vector::length<0x42::reentrancy_comprehensive::CrossChainLock>($t0) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1293:19+21
    assume {:print "$at(4,50538,50559)"} true;
    call $t7 := $1_vector_length'$42_reentrancy_comprehensive_CrossChainLock'($t0);
    if ($abort_flag) {
        assume {:print "$at(4,50538,50559)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,23):", $t8} $t8 == $t8;
        goto L10;
    }

    // trace_local[len]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1293:19+21
    assume {:print "$track_local(5,23,3):", $t7} $t7 == $t7;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume {:print "$at(4,50579,50580)"} true;
L6:

    // $t2 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume {:print "$at(4,50579,50580)"} true;
    havoc $t2;

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'u64'($t2);

    // $t5 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t5;

    // assume WellFormed($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'bool'($t5);

    // $t9 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t9;

    // assume WellFormed($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'bool'($t9);

    // $t10 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t10;

    // assume WellFormed($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'$42_reentrancy_comprehensive_CrossChainLock'($t10);

    // $t11 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t11;

    // assume WellFormed($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'address'($t11);

    // $t12 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t12;

    // assume WellFormed($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'bool'($t12);

    // $t13 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t13;

    // assume WellFormed($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t14;

    // assume WellFormed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'u64'($t14);

    // $t15 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t15;

    // assume WellFormed($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'u64'($t15);

    // $t16 := havoc[val]() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    havoc $t16;

    // assume WellFormed($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume $IsValid'bool'($t16);

    // trace_local[i]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume {:print "$info(): enter loop, variable(s) i, $t5 havocked and reassigned"} true;
    assume {:print "$track_local(5,23,2):", $t2} $t2 == $t2;

    // trace_local[$t5]($t5) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume {:print "$track_local(5,23,5):", $t5} $t5 == $t5;

    // assume Not(AbortFlag()) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+1
    assume !$abort_flag;

    // $t9 := <($t2, $t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:16+7
    call $t9 := $Lt($t2, $t7);

    // if ($t9) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:9+200
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1296:39+5
    assume {:print "$at(4,50629,50634)"} true;
L1:

    // $t10 := vector::borrow<0x42::reentrancy_comprehensive::CrossChainLock>($t0, $t2) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1296:24+24
    assume {:print "$at(4,50614,50638)"} true;
    call $t10 := $1_vector_borrow'$42_reentrancy_comprehensive_CrossChainLock'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,50614,50638)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,23):", $t8} $t8 == $t8;
        goto L10;
    }

    // trace_local[lock]($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1296:24+24
    assume {:print "$track_local(5,23,4):", $t10} $t10 == $t10;

    // $t11 := get_field<0x42::reentrancy_comprehensive::CrossChainLock>.user($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+9
    assume {:print "$at(4,50657,50666)"} true;
    $t11 := $t10->$user;

    // $t12 := ==($t11, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+17
    $t12 := $IsEqual'address'($t11, $t1);

    // if ($t12) goto L3 else goto L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+32
    if ($t12) { goto L3; } else { goto L2; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:38+11
L3:

    // $t13 := get_field<0x42::reentrancy_comprehensive::CrossChainLock>.locked($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:38+11
    assume {:print "$at(4,50678,50689)"} true;
    $t13 := $t10->$locked;

    // $t5 := $t13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:38+11
    $t5 := $t13;

    // trace_local[$t5]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:38+11
    assume {:print "$track_local(5,23,5):", $t13} $t13 == $t13;

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:13+83
L7:

    // if ($t5) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:13+83
    assume {:print "$at(4,50653,50736)"} true;
    if ($t5) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1298:17+11
    assume {:print "$at(4,50710,50721)"} true;
L5:

    // $t17 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1298:24+4
    assume {:print "$at(4,50717,50721)"} true;
    $t17 := true;
    assume $IsValid'bool'($t17);

    // trace_return[0]($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1298:17+11
    assume {:print "$track_return(5,23,0):", $t17} $t17 == $t17;

    // $t18 := move($t17) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1298:17+11
    $t18 := $t17;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1298:17+11
    goto L9;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1300:17+1
    assume {:print "$at(4,50755,50756)"} true;
L4:

    // $t14 := 1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1300:21+1
    assume {:print "$at(4,50759,50760)"} true;
    $t14 := 1;
    assume $IsValid'u64'($t14);

    // $t15 := +($t2, $t14) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1300:17+5
    call $t15 := $AddU64($t2, $t14);
    if ($abort_flag) {
        assume {:print "$at(4,50755,50760)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,23):", $t8} $t8 == $t8;
        goto L10;
    }

    // trace_local[i]($t15) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1300:13+9
    assume {:print "$track_local(5,23,2):", $t15} $t15 == $t15;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:9+200
    assume {:print "$at(4,50572,50772)"} true;
    goto L8;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+32
    assume {:print "$at(4,50657,50689)"} true;
L2:

    // $t16 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+32
    assume {:print "$at(4,50657,50689)"} true;
    $t16 := false;
    assume $IsValid'bool'($t16);

    // $t5 := $t16 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+32
    $t5 := $t16;

    // trace_local[$t5]($t16) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+32
    assume {:print "$track_local(5,23,5):", $t16} $t16 == $t16;

    // goto L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1297:17+32
    goto L7;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:9+200
    assume {:print "$at(4,50572,50772)"} true;
L0:

    // $t19 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1303:9+5
    assume {:print "$at(4,50785,50790)"} true;
    $t19 := false;
    assume $IsValid'bool'($t19);

    // trace_return[0]($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:78+300
    assume {:print "$at(4,50497,50797)"} true;
    assume {:print "$track_return(5,23,0):", $t19} $t19 == $t19;

    // $t18 := move($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:78+300
    $t18 := $t19;

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1291:78+300
    goto L9;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:9+200
    // Loop invariant checking block for the loop started with header: L6
    assume {:print "$at(4,50572,50772)"} true;
L8:

    // stop() at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1295:9+200
    assume {:print "$at(4,50572,50772)"} true;
    assume false;
    return;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1304:5+1
    assume {:print "$at(4,50796,50797)"} true;
L9:

    // return $t18 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1304:5+1
    assume {:print "$at(4,50796,50797)"} true;
    $ret0 := $t18;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1304:5+1
L10:

    // abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1304:5+1
    assume {:print "$at(4,50796,50797)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::initiate_cross_chain_transfer [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+142
procedure {:timeLimit 40} $42_reentrancy_comprehensive_initiate_cross_chain_transfer$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume {:print "$at(4,52058,52059)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume $IsValid'u8'($t2);

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume $IsValid'u8'($t3);

    // trace_local[_user]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume {:print "$track_local(5,24,0):", $t0} $t0 == $t0;

    // trace_local[_amount]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume {:print "$track_local(5,24,1):", $t1} $t1 == $t1;

    // trace_local[_source]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume {:print "$track_local(5,24,2):", $t2} $t2 == $t2;

    // trace_local[_target]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1343:5+1
    assume {:print "$track_local(5,24,3):", $t3} $t3 == $t3;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1345:5+1
    assume {:print "$at(4,52199,52200)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1345:5+1
    assume {:print "$at(4,52199,52200)"} true;
    return;

}

// fun reentrancy_comprehensive::liquidate_position_vulnerable [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:240:5+1371
procedure {:inline 1} $42_reentrancy_comprehensive_liquidate_position_vulnerable(_$t0: $Mutation ($42_reentrancy_comprehensive_LendingPool), _$t1: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)), _$t2: int, _$t3: int) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_LendingPool), $ret1: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition)))
{
    // declare local variables
    var $t4: int;
    var $t5: $Mutation ($42_reentrancy_comprehensive_UserPosition);
    var $t6: int;
    var $t7: int;
    var $t8: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t9: int;
    var $t10: int;
    var $t11: Vec ($42_reentrancy_comprehensive_UserPosition);
    var $t12: int;
    var $t13: bool;
    var $t14: $Mutation ($42_reentrancy_comprehensive_UserPosition);
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $Mutation (int);
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: $Mutation (int);
    var $t34: bool;
    var $t35: $Mutation (bool);
    var $t36: bool;
    var $t37: $Mutation (bool);
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t0: $Mutation ($42_reentrancy_comprehensive_LendingPool);
    var $t1: $Mutation (Vec ($42_reentrancy_comprehensive_UserPosition));
    var $t2: int;
    var $t3: int;
    var $temp_0'$42_reentrancy_comprehensive_LendingPool': $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'$42_reentrancy_comprehensive_UserPosition': $42_reentrancy_comprehensive_UserPosition;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'': Vec ($42_reentrancy_comprehensive_UserPosition);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:240:5+1
    assume {:print "$at(4,9489,9490)"} true;
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,27,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // trace_local[positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:240:5+1
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,27,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // trace_local[user]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:240:5+1
    assume {:print "$track_local(5,27,2):", $t2} $t2 == $t2;

    // trace_local[liquidator]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:240:5+1
    assume {:print "$track_local(5,27,3):", $t3} $t3 == $t3;

    // $t8 := read_ref($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:246:48+9
    assume {:print "$at(4,9721,9730)"} true;
    $t8 := $Dereference($t1);

    // $t9 := reentrancy_comprehensive::find_position_index($t8, $t2) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:246:28+36
    call $t9 := $42_reentrancy_comprehensive_find_position_index($t8, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,9701,9737)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[position_idx]($t9) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:246:28+36
    assume {:print "$track_local(5,27,4):", $t9} $t9 == $t9;

    // $t11 := read_ref($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:47+9
    assume {:print "$at(4,9786,9795)"} true;
    $t11 := $Dereference($t1);

    // $t12 := vector::length<0x42::reentrancy_comprehensive::UserPosition>($t11) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:32+25
    call $t12 := $1_vector_length'$42_reentrancy_comprehensive_UserPosition'($t11);
    if ($abort_flag) {
        assume {:print "$at(4,9771,9796)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t13 := <($t9, $t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:17+40
    call $t13 := $Lt($t9, $t12);

    // if ($t13) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:9+6
    if ($t13) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:249:43+9
    assume {:print "$at(4,9861,9870)"} true;
L1:

    // $t14 := vector::borrow_mut<0x42::reentrancy_comprehensive::UserPosition>($t1, $t9) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:249:24+43
    assume {:print "$at(4,9842,9885)"} true;
    call $t14,$t1 := $1_vector_borrow_mut'$42_reentrancy_comprehensive_UserPosition'($t1, $t9);
    if ($abort_flag) {
        assume {:print "$at(4,9842,9885)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[position]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:249:24+43
    $temp_0'$42_reentrancy_comprehensive_UserPosition' := $Dereference($t14);
    assume {:print "$track_local(5,27,5):", $temp_0'$42_reentrancy_comprehensive_UserPosition'} $temp_0'$42_reentrancy_comprehensive_UserPosition' == $temp_0'$42_reentrancy_comprehensive_UserPosition';

    // $t15 := get_field<0x42::reentrancy_comprehensive::UserPosition>.active($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:17+15
    assume {:print "$at(4,9904,9919)"} true;
    $t15 := $Dereference($t14)->$active;

    // if ($t15) goto L3 else goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6
    if ($t15) { goto L3; } else { goto L8; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:18+28
    assume {:print "$at(4,9957,9985)"} true;
L3:

    // $t16 := get_field<0x42::reentrancy_comprehensive::UserPosition>.liquidation_pending($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:18+28
    assume {:print "$at(4,9957,9985)"} true;
    $t16 := $Dereference($t14)->$liquidation_pending;

    // if ($t16) goto L9 else goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:17+29
    if ($t16) { goto L9; } else { goto L5; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:254:32+19
    assume {:print "$at(4,10076,10095)"} true;
L5:

    // $t17 := get_field<0x42::reentrancy_comprehensive::UserPosition>.collateral($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:254:32+19
    assume {:print "$at(4,10076,10095)"} true;
    $t17 := $Dereference($t14)->$collateral;

    // $t18 := 100 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:254:54+3
    $t18 := 100;
    assume $IsValid'u64'($t18);

    // $t19 := *($t17, $t18) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:254:32+25
    call $t19 := $MulU64($t17, $t18);
    if ($abort_flag) {
        assume {:print "$at(4,10076,10101)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t20 := get_field<0x42::reentrancy_comprehensive::UserPosition>.borrowed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:255:36+17
    assume {:print "$at(4,10139,10156)"} true;
    $t20 := $Dereference($t14)->$borrowed;

    // $t21 := get_field<0x42::reentrancy_comprehensive::LendingPool>.liquidation_threshold($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:255:56+26
    $t21 := $Dereference($t0)->$liquidation_threshold;

    // $t22 := *($t20, $t21) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:255:35+48
    call $t22 := $MulU64($t20, $t21);
    if ($abort_flag) {
        assume {:print "$at(4,10138,10186)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t23 := 10000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:255:86+5
    $t23 := 10000;
    assume $IsValid'u64'($t23);

    // $t24 := /($t22, $t23) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:255:35+56
    call $t24 := $Div($t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(4,10138,10194)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t25 := <($t19, $t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:17+38
    assume {:print "$at(4,10213,10251)"} true;
    call $t25 := $Lt($t19, $t24);

    // if ($t25) goto L7 else goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6
    if ($t25) { goto L7; } else { goto L10; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:31+19
    assume {:print "$at(4,10386,10405)"} true;
L7:

    // $t26 := get_field<0x42::reentrancy_comprehensive::LendingPool>.total_borrowed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:31+19
    assume {:print "$at(4,10386,10405)"} true;
    $t26 := $Dereference($t0)->$total_borrowed;

    // $t27 := get_field<0x42::reentrancy_comprehensive::UserPosition>.borrowed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:53+17
    $t27 := $Dereference($t14)->$borrowed;

    // $t28 := -($t26, $t27) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:31+39
    call $t28 := $Sub($t26, $t27);
    if ($abort_flag) {
        assume {:print "$at(4,10386,10425)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t29 := borrow_field<0x42::reentrancy_comprehensive::LendingPool>.total_borrowed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:9+19
    $t29 := $ChildMutation($t0, 0, $Dereference($t0)->$total_borrowed);

    // write_ref($t29, $t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:9+61
    $t29 := $UpdateMutation($t29, $t28);

    // write_back[Reference($t0).total_borrowed (u64)]($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:9+61
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_LendingPool'_total_borrowed($Dereference($t0), $Dereference($t29)));

    // trace_local[pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:259:9+61
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,27,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // $t30 := get_field<0x42::reentrancy_comprehensive::LendingPool>.total_collateral($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:260:33+21
    assume {:print "$at(4,10481,10502)"} true;
    $t30 := $Dereference($t0)->$total_collateral;

    // $t31 := get_field<0x42::reentrancy_comprehensive::UserPosition>.collateral($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:260:57+19
    $t31 := $Dereference($t14)->$collateral;

    // $t32 := -($t30, $t31) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:260:33+43
    call $t32 := $Sub($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(4,10481,10524)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // $t33 := borrow_field<0x42::reentrancy_comprehensive::LendingPool>.total_collateral($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:260:9+21
    $t33 := $ChildMutation($t0, 1, $Dereference($t0)->$total_collateral);

    // write_ref($t33, $t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:260:9+67
    $t33 := $UpdateMutation($t33, $t32);

    // write_back[Reference($t0).total_collateral (u64)]($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:260:9+67
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_LendingPool'_total_collateral($Dereference($t0), $Dereference($t33)));

    // trace_local[pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:260:9+67
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,27,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // $t34 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:261:27+5
    assume {:print "$at(4,10574,10579)"} true;
    $t34 := false;
    assume $IsValid'bool'($t34);

    // $t35 := borrow_field<0x42::reentrancy_comprehensive::UserPosition>.active($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:261:9+15
    $t35 := $ChildMutation($t14, 3, $Dereference($t14)->$active);

    // write_ref($t35, $t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:261:9+23
    $t35 := $UpdateMutation($t35, $t34);

    // write_back[Reference($t14).active (bool)]($t35) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:261:9+23
    $t14 := $UpdateMutation($t14, $Update'$42_reentrancy_comprehensive_UserPosition'_active($Dereference($t14), $Dereference($t35)));

    // $t36 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:262:40+4
    assume {:print "$at(4,10642,10646)"} true;
    $t36 := true;
    assume $IsValid'bool'($t36);

    // $t37 := borrow_field<0x42::reentrancy_comprehensive::UserPosition>.liquidation_pending($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:262:9+28
    $t37 := $ChildMutation($t14, 4, $Dereference($t14)->$liquidation_pending);

    // write_ref($t37, $t36) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:262:9+35
    $t37 := $UpdateMutation($t37, $t36);

    // write_back[Reference($t14).liquidation_pending (bool)]($t37) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:262:9+35
    $t14 := $UpdateMutation($t14, $Update'$42_reentrancy_comprehensive_UserPosition'_liquidation_pending($Dereference($t14), $Dereference($t37)));

    // $t38 := get_field<0x42::reentrancy_comprehensive::UserPosition>.borrowed($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:265:55+17
    assume {:print "$at(4,10789,10806)"} true;
    $t38 := $Dereference($t14)->$borrowed;

    // $t39 := get_field<0x42::reentrancy_comprehensive::UserPosition>.collateral($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:265:74+19
    $t39 := $Dereference($t14)->$collateral;

    // write_back[Reference($t1)[]]($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:265:74+19
    $t1 := $UpdateMutation($t1, UpdateVec($Dereference($t1), ReadVec($t14->p, LenVec($t1->p)), $Dereference($t14)));

    // trace_local[positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:265:74+19
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,27,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // reentrancy_comprehensive::notify_liquidation_complete($t3, $t2, $t38, $t39) on_abort goto L12 with $t10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:265:9+85
    call $42_reentrancy_comprehensive_notify_liquidation_complete($t3, $t2, $t38, $t39);
    if ($abort_flag) {
        assume {:print "$at(4,10743,10828)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(5,27):", $t10} $t10 == $t10;
        goto L12;
    }

    // trace_local[pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:245:7+1189
    assume {:print "$at(4,9671,10860)"} true;
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,27,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // trace_local[positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:245:7+1189
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,27,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // goto L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:245:7+1189
    goto L11;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6
    assume {:print "$at(4,10205,10211)"} true;
L6:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6
    assume {:print "$at(4,10205,10211)"} true;

    // trace_local[positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,27,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // drop($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6

    // $t40 := 2005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:57+15
    $t40 := 2005;
    assume $IsValid'u64'($t40);

    // trace_abort($t40) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6
    assume {:print "$at(4,10205,10211)"} true;
    assume {:print "$track_abort(5,27):", $t40} $t40 == $t40;

    // $t10 := move($t40) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6
    $t10 := $t40;

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:256:9+6
    goto L12;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:9+6
    assume {:print "$at(4,9948,9954)"} true;
L4:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:9+6
    assume {:print "$at(4,9948,9954)"} true;

    // trace_local[positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:9+6
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,27,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // drop($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:9+6

    // $t41 := 2005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:48+15
    $t41 := 2005;
    assume $IsValid'u64'($t41);

    // trace_abort($t41) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:9+6
    assume {:print "$at(4,9948,9954)"} true;
    assume {:print "$track_abort(5,27):", $t41} $t41 == $t41;

    // $t10 := move($t41) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:9+6
    $t10 := $t41;

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:251:9+6
    goto L12;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6
    assume {:print "$at(4,9896,9902)"} true;
L2:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6
    assume {:print "$at(4,9896,9902)"} true;

    // trace_local[positions]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6
    $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' := $Dereference($t1);
    assume {:print "$track_local(5,27,1):", $temp_0'vec'$42_reentrancy_comprehensive_UserPosition''} $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'' == $temp_0'vec'$42_reentrancy_comprehensive_UserPosition'';

    // drop($t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6

    // $t42 := 2005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:34+15
    $t42 := 2005;
    assume $IsValid'u64'($t42);

    // trace_abort($t42) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6
    assume {:print "$at(4,9896,9902)"} true;
    assume {:print "$track_abort(5,27):", $t42} $t42 == $t42;

    // $t10 := move($t42) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6
    $t10 := $t42;

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:250:9+6
    goto L12;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:9+6
    assume {:print "$at(4,9748,9754)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:9+6
    assume {:print "$at(4,9748,9754)"} true;

    // drop($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:9+6

    // $t43 := 2005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:59+15
    $t43 := 2005;
    assume $IsValid'u64'($t43);

    // trace_abort($t43) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:9+6
    assume {:print "$at(4,9748,9754)"} true;
    assume {:print "$track_abort(5,27):", $t43} $t43 == $t43;

    // $t10 := move($t43) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:9+6
    $t10 := $t43;

    // goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:247:9+6
    goto L12;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // drop($t1) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L2 at <internal>:1:1+10
    goto L2;

    // label L9 at <internal>:1:1+10
L9:

    // drop($t1) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

    // label L10 at <internal>:1:1+10
L10:

    // drop($t1) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L6 at <internal>:1:1+10
    goto L6;

    // label L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:266:5+1
    assume {:print "$at(4,10859,10860)"} true;
L11:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:266:5+1
    assume {:print "$at(4,10859,10860)"} true;
    $ret0 := $t0;
    $ret1 := $t1;
    return;

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:266:5+1
L12:

    // abort($t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:266:5+1
    assume {:print "$at(4,10859,10860)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::notify_bonus_calculation [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1327:5+111
procedure {:timeLimit 40} $42_reentrancy_comprehensive_notify_bonus_calculation$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1327:5+1
    assume {:print "$at(4,51548,51549)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1327:5+1
    assume $IsValid'u64'($t1);

    // trace_local[_player]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1327:5+1
    assume {:print "$track_local(5,28,0):", $t0} $t0 == $t0;

    // trace_local[_score]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1327:5+1
    assume {:print "$track_local(5,28,1):", $t1} $t1 == $t1;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1329:5+1
    assume {:print "$at(4,51658,51659)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1329:5+1
    assume {:print "$at(4,51658,51659)"} true;
    return;

}

// fun reentrancy_comprehensive::notify_liquidation_complete [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+149
procedure {:inline 1} $42_reentrancy_comprehensive_notify_liquidation_complete(_$t0: int, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[_liquidator]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$at(4,51085,51086)"} true;
    assume {:print "$track_local(5,29,0):", $t0} $t0 == $t0;

    // trace_local[_user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$track_local(5,29,1):", $t1} $t1 == $t1;

    // trace_local[_borrowed]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$track_local(5,29,2):", $t2} $t2 == $t2;

    // trace_local[_collateral]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$track_local(5,29,3):", $t3} $t3 == $t3;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1317:5+1
    assume {:print "$at(4,51233,51234)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1317:5+1
    assume {:print "$at(4,51233,51234)"} true;
    return;

}

// fun reentrancy_comprehensive::notify_liquidation_complete [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+149
procedure {:timeLimit 40} $42_reentrancy_comprehensive_notify_liquidation_complete$verify(_$t0: int, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$at(4,51085,51086)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume $IsValid'u64'($t3);

    // trace_local[_liquidator]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$track_local(5,29,0):", $t0} $t0 == $t0;

    // trace_local[_user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$track_local(5,29,1):", $t1} $t1 == $t1;

    // trace_local[_borrowed]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$track_local(5,29,2):", $t2} $t2 == $t2;

    // trace_local[_collateral]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1315:5+1
    assume {:print "$track_local(5,29,3):", $t3} $t3 == $t3;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1317:5+1
    assume {:print "$at(4,51233,51234)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1317:5+1
    assume {:print "$at(4,51233,51234)"} true;
    return;

}

// fun reentrancy_comprehensive::notify_transfer_recipient [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+116
procedure {:inline 1} $42_reentrancy_comprehensive_notify_transfer_recipient(_$t0: int, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[_to]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume {:print "$at(4,51667,51668)"} true;
    assume {:print "$track_local(5,30,0):", $t0} $t0 == $t0;

    // trace_local[_from]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume {:print "$track_local(5,30,1):", $t1} $t1 == $t1;

    // trace_local[_amount]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume {:print "$track_local(5,30,2):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1333:5+1
    assume {:print "$at(4,51782,51783)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1333:5+1
    assume {:print "$at(4,51782,51783)"} true;
    return;

}

// fun reentrancy_comprehensive::notify_transfer_recipient [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+116
procedure {:timeLimit 40} $42_reentrancy_comprehensive_notify_transfer_recipient$verify(_$t0: int, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume {:print "$at(4,51667,51668)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume $IsValid'u64'($t2);

    // trace_local[_to]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume {:print "$track_local(5,30,0):", $t0} $t0 == $t0;

    // trace_local[_from]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume {:print "$track_local(5,30,1):", $t1} $t1 == $t1;

    // trace_local[_amount]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1331:5+1
    assume {:print "$track_local(5,30,2):", $t2} $t2 == $t2;

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1333:5+1
    assume {:print "$at(4,51782,51783)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1333:5+1
    assume {:print "$at(4,51782,51783)"} true;
    return;

}

// fun reentrancy_comprehensive::process_batch_transfers [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1335:5+102
procedure {:timeLimit 40} $42_reentrancy_comprehensive_process_batch_transfers$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_ResourceVault)) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_ResourceVault))
{
    // declare local variables
    var $t0: $Mutation ($42_reentrancy_comprehensive_ResourceVault);
    var $temp_0'$42_reentrancy_comprehensive_ResourceVault': $42_reentrancy_comprehensive_ResourceVault;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1335:5+1
    assume {:print "$at(4,51791,51792)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_ResourceVault'($Dereference($t0));

    // trace_local[_vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1335:5+1
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,31,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1335:61+46

    // trace_local[_vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1335:61+46
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,31,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1337:5+1
    assume {:print "$at(4,51892,51893)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1337:5+1
    assume {:print "$at(4,51892,51893)"} true;
    $ret0 := $t0;
    return;

}

// fun reentrancy_comprehensive::process_pending_withdrawals [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1311:5+100
procedure {:timeLimit 40} $42_reentrancy_comprehensive_process_pending_withdrawals$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_Bank)) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_Bank))
{
    // declare local variables
    var $t0: $Mutation ($42_reentrancy_comprehensive_Bank);
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1311:5+1
    assume {:print "$at(4,50977,50978)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_Bank'($Dereference($t0));

    // trace_local[_bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1311:5+1
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,32,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1311:55+50

    // trace_local[_bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1311:55+50
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,32,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1313:5+1
    assume {:print "$at(4,51076,51077)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1313:5+1
    assume {:print "$at(4,51076,51077)"} true;
    $ret0 := $t0;
    return;

}

// fun reentrancy_comprehensive::set_emergency_lock_verified [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:55:5+119
procedure {:timeLimit 40} $42_reentrancy_comprehensive_set_emergency_lock_verified$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_Bank), _$t1: bool) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_Bank))
{
    // declare local variables
    var $t2: $Mutation (bool);
    var $t3: $42_reentrancy_comprehensive_Bank;
    var $t4: $Mutation (bool);
    var $t0: $Mutation ($42_reentrancy_comprehensive_Bank);
    var $t1: bool;
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:55:5+1
    assume {:print "$at(4,2436,2437)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_Bank'($Dereference($t0));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:55:5+1
    assume $IsValid'bool'($t1);

    // $t3 := read_ref($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:55:5+1
    $t3 := $Dereference($t0);

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:55:5+1
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,34,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // trace_local[locked]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:55:5+1
    assume {:print "$track_local(5,34,1):", $t1} $t1 == $t1;

    // $t4 := borrow_field<0x42::reentrancy_comprehensive::Bank>.emergency_locked($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:56:9+21
    assume {:print "$at(4,2517,2538)"} true;
    $t4 := $ChildMutation($t0, 4, $Dereference($t0)->$emergency_locked);

    // trace_local[$t2]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:56:9+30
    $temp_0'bool' := $Dereference($t4);
    assume {:print "$track_local(5,34,2):", $temp_0'bool'} $temp_0'bool' == $temp_0'bool';

    // write_ref($t4, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:56:9+30
    $t4 := $UpdateMutation($t4, $t1);

    // write_back[Reference($t0).emergency_locked (bool)]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:56:9+30
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_Bank'_emergency_locked($Dereference($t0), $Dereference($t4)));

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:56:9+30
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,34,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:55:75+49
    assume {:print "$at(4,2506,2555)"} true;
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,34,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:57:5+1
    assume {:print "$at(4,2554,2555)"} true;
L1:

    // assert Not(false) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:63:9+16
    assume {:print "$at(4,2793,2809)"} true;
    assert {:msg "assert_failed(4,2793,2809): function does not abort under this condition"}
      !false;

    // assert Eq<bool>(select reentrancy_comprehensive::Bank.emergency_locked<0x42::reentrancy_comprehensive::Bank>($t0), $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:60:9+40
    assume {:print "$at(4,2607,2647)"} true;
    assert {:msg "assert_failed(4,2607,2647): post-condition does not hold"}
      $IsEqual'bool'($Dereference($t0)->$emergency_locked, $t1);

    // assert Eq<bool>(select reentrancy_comprehensive::Bank.reentrancy_guard<0x42::reentrancy_comprehensive::Bank>($t0), select reentrancy_comprehensive::Bank.reentrancy_guard<0x42::reentrancy_comprehensive::Bank>($t3)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:61:9+60
    assume {:print "$at(4,2657,2717)"} true;
    assert {:msg "assert_failed(4,2657,2717): post-condition does not hold"}
      $IsEqual'bool'($Dereference($t0)->$reentrancy_guard, $t3->$reentrancy_guard);

    // assert Eq<u64>(select reentrancy_comprehensive::Bank.total_deposits<0x42::reentrancy_comprehensive::Bank>($t0), select reentrancy_comprehensive::Bank.total_deposits<0x42::reentrancy_comprehensive::Bank>($t3)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:62:9+56
    assume {:print "$at(4,2727,2783)"} true;
    assert {:msg "assert_failed(4,2727,2783): post-condition does not hold"}
      $IsEqual'u64'($Dereference($t0)->$total_deposits, $t3->$total_deposits);

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:62:9+56
    $ret0 := $t0;
    return;

}

// fun reentrancy_comprehensive::set_reentrancy_guard_verified [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:42:5+123
procedure {:timeLimit 40} $42_reentrancy_comprehensive_set_reentrancy_guard_verified$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_Bank), _$t1: bool) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_Bank))
{
    // declare local variables
    var $t2: $Mutation (bool);
    var $t3: $42_reentrancy_comprehensive_Bank;
    var $t4: $Mutation (bool);
    var $t0: $Mutation ($42_reentrancy_comprehensive_Bank);
    var $t1: bool;
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:42:5+1
    assume {:print "$at(4,1914,1915)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_Bank'($Dereference($t0));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:42:5+1
    assume $IsValid'bool'($t1);

    // $t3 := read_ref($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:42:5+1
    $t3 := $Dereference($t0);

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:42:5+1
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,35,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // trace_local[enabled]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:42:5+1
    assume {:print "$track_local(5,35,1):", $t1} $t1 == $t1;

    // $t4 := borrow_field<0x42::reentrancy_comprehensive::Bank>.reentrancy_guard($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:43:9+21
    assume {:print "$at(4,1998,2019)"} true;
    $t4 := $ChildMutation($t0, 3, $Dereference($t0)->$reentrancy_guard);

    // trace_local[$t2]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:43:9+31
    $temp_0'bool' := $Dereference($t4);
    assume {:print "$track_local(5,35,2):", $temp_0'bool'} $temp_0'bool' == $temp_0'bool';

    // write_ref($t4, $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:43:9+31
    $t4 := $UpdateMutation($t4, $t1);

    // write_back[Reference($t0).reentrancy_guard (bool)]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:43:9+31
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_Bank'_reentrancy_guard($Dereference($t0), $Dereference($t4)));

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:43:9+31
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,35,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:42:78+50
    assume {:print "$at(4,1987,2037)"} true;
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,35,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:44:5+1
    assume {:print "$at(4,2036,2037)"} true;
L1:

    // assert Not(false) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:50:9+16
    assume {:print "$at(4,2272,2288)"} true;
    assert {:msg "assert_failed(4,2272,2288): function does not abort under this condition"}
      !false;

    // assert Eq<bool>(select reentrancy_comprehensive::Bank.reentrancy_guard<0x42::reentrancy_comprehensive::Bank>($t0), $t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:47:9+41
    assume {:print "$at(4,2091,2132)"} true;
    assert {:msg "assert_failed(4,2091,2132): post-condition does not hold"}
      $IsEqual'bool'($Dereference($t0)->$reentrancy_guard, $t1);

    // assert Eq<u64>(select reentrancy_comprehensive::Bank.total_deposits<0x42::reentrancy_comprehensive::Bank>($t0), select reentrancy_comprehensive::Bank.total_deposits<0x42::reentrancy_comprehensive::Bank>($t3)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:48:9+56
    assume {:print "$at(4,2142,2198)"} true;
    assert {:msg "assert_failed(4,2142,2198): post-condition does not hold"}
      $IsEqual'u64'($Dereference($t0)->$total_deposits, $t3->$total_deposits);

    // assert Eq<num>(Len<0x42::reentrancy_comprehensive::Balance>(select reentrancy_comprehensive::Bank.balances<0x42::reentrancy_comprehensive::Bank>($t0)), Len<0x42::reentrancy_comprehensive::Balance>(select reentrancy_comprehensive::Bank.balances<0x42::reentrancy_comprehensive::Bank>($t3))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:49:9+54
    assume {:print "$at(4,2208,2262)"} true;
    assert {:msg "assert_failed(4,2208,2262): post-condition does not hold"}
      $IsEqual'num'(LenVec($Dereference($t0)->$balances), LenVec($t3->$balances));

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:49:9+54
    $ret0 := $t0;
    return;

}

// fun reentrancy_comprehensive::start_liquidation_auction [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:5+132
procedure {:timeLimit 40} $42_reentrancy_comprehensive_start_liquidation_auction$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_LendingPool), _$t1: int, _$t2: int) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_LendingPool))
{
    // declare local variables
    var $t0: $Mutation ($42_reentrancy_comprehensive_LendingPool);
    var $t1: int;
    var $t2: int;
    var $temp_0'$42_reentrancy_comprehensive_LendingPool': $42_reentrancy_comprehensive_LendingPool;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:5+1
    assume {:print "$at(4,51242,51243)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_LendingPool'($Dereference($t0));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:5+1
    assume $IsValid'address'($t2);

    // trace_local[_pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:5+1
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,36,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // trace_local[_user]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:5+1
    assume {:print "$track_local(5,36,1):", $t1} $t1 == $t1;

    // trace_local[_liquidator]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:5+1
    assume {:print "$track_local(5,36,2):", $t2} $t2 == $t2;

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:98+39

    // trace_local[_pool]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1319:98+39
    $temp_0'$42_reentrancy_comprehensive_LendingPool' := $Dereference($t0);
    assume {:print "$track_local(5,36,0):", $temp_0'$42_reentrancy_comprehensive_LendingPool'} $temp_0'$42_reentrancy_comprehensive_LendingPool' == $temp_0'$42_reentrancy_comprehensive_LendingPool';

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1321:5+1
    assume {:print "$at(4,51373,51374)"} true;
L1:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:1321:5+1
    assume {:print "$at(4,51373,51374)"} true;
    $ret0 := $t0;
    return;

}

// fun reentrancy_comprehensive::transfer_secure_atomic [verification] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1577
procedure {:timeLimit 40} $42_reentrancy_comprehensive_transfer_secure_atomic$verify(_$t0: $Mutation ($42_reentrancy_comprehensive_ResourceVault), _$t1: int, _$t2: int, _$t3: int, _$t4: bool) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_ResourceVault))
{
    // declare local variables
    var $t5: $42_reentrancy_comprehensive_PendingTransfer;
    var $t6: $42_reentrancy_comprehensive_CompletedTransfer;
    var $t7: $42_reentrancy_comprehensive_ResourceVault;
    var $t8: bool;
    var $t9: bool;
    var $t10: bool;
    var $t11: $Mutation (bool);
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: $42_reentrancy_comprehensive_PendingTransfer;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation (int);
    var $t24: $Mutation (Vec ($42_reentrancy_comprehensive_PendingTransfer));
    var $t25: int;
    var $t26: $42_reentrancy_comprehensive_CompletedTransfer;
    var $t27: $Mutation (Vec ($42_reentrancy_comprehensive_CompletedTransfer));
    var $t28: bool;
    var $t29: $Mutation (bool);
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t0: $Mutation ($42_reentrancy_comprehensive_ResourceVault);
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $temp_0'$42_reentrancy_comprehensive_CompletedTransfer': $42_reentrancy_comprehensive_CompletedTransfer;
    var $temp_0'$42_reentrancy_comprehensive_PendingTransfer': $42_reentrancy_comprehensive_PendingTransfer;
    var $temp_0'$42_reentrancy_comprehensive_ResourceVault': $42_reentrancy_comprehensive_ResourceVault;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume {:print "$at(4,26902,26903)"} true;
    assume $IsValid'$42_reentrancy_comprehensive_ResourceVault'($Dereference($t0));

    // assume WellFormed($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume $IsValid'bool'($t4);

    // assume Not(select reentrancy_comprehensive::ResourceVault.transfer_lock<0x42::reentrancy_comprehensive::ResourceVault>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:722:9+30
    assume {:print "$at(4,28526,28556)"} true;
    assume !$Dereference($t0)->$transfer_lock;

    // assume Not(select reentrancy_comprehensive::ResourceVault.batch_processing<0x42::reentrancy_comprehensive::ResourceVault>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:723:9+33
    assume {:print "$at(4,28566,28599)"} true;
    assume !$Dereference($t0)->$batch_processing;

    // assume Gt($t3, 0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:724:9+20
    assume {:print "$at(4,28609,28629)"} true;
    assume ($t3 > 0);

    // assume Le($t3, select reentrancy_comprehensive::ResourceVault.resource_count<0x42::reentrancy_comprehensive::ResourceVault>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:725:9+40
    assume {:print "$at(4,28639,28679)"} true;
    assume ($t3 <= $Dereference($t0)->$resource_count);

    // assume Neq<address>($t1, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:726:9+20
    assume {:print "$at(4,28689,28709)"} true;
    assume !$IsEqual'address'($t1, $t2);

    // $t7 := read_ref($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:726:9+20
    $t7 := $Dereference($t0);

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume {:print "$at(4,26902,26903)"} true;
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,37,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // trace_local[from]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume {:print "$track_local(5,37,1):", $t1} $t1 == $t1;

    // trace_local[to]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume {:print "$track_local(5,37,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume {:print "$track_local(5,37,3):", $t3} $t3 == $t3;

    // trace_local[notify_recipient]($t4) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:673:5+1
    assume {:print "$track_local(5,37,4):", $t4} $t4 == $t4;

    // $t8 := get_field<0x42::reentrancy_comprehensive::ResourceVault>.transfer_lock($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:18+19
    assume {:print "$at(4,27156,27175)"} true;
    $t8 := $Dereference($t0)->$transfer_lock;

    // if ($t8) goto L0 else goto L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:17+20
    if ($t8) { goto L0; } else { goto L1; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:18+22
    assume {:print "$at(4,27219,27241)"} true;
L1:

    // $t9 := get_field<0x42::reentrancy_comprehensive::ResourceVault>.batch_processing($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:18+22
    assume {:print "$at(4,27219,27241)"} true;
    $t9 := $Dereference($t0)->$batch_processing;

    // if ($t9) goto L2 else goto L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:17+23
    if ($t9) { goto L2; } else { goto L3; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:683:31+4
    assume {:print "$at(4,27298,27302)"} true;
L3:

    // $t10 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:683:31+4
    assume {:print "$at(4,27298,27302)"} true;
    $t10 := true;
    assume $IsValid'bool'($t10);

    // $t11 := borrow_field<0x42::reentrancy_comprehensive::ResourceVault>.transfer_lock($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:683:9+19
    $t11 := $ChildMutation($t0, 3, $Dereference($t0)->$transfer_lock);

    // write_ref($t11, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:683:9+26
    $t11 := $UpdateMutation($t11, $t10);

    // write_back[Reference($t0).transfer_lock (bool)]($t11) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:683:9+26
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_ResourceVault'_transfer_lock($Dereference($t0), $Dereference($t11)));

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:683:9+26
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,37,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // $t12 := 0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:26+1
    assume {:print "$at(4,27379,27380)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := >($t3, $t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:17+10
    call $t13 := $Gt($t3, $t12);

    // if ($t13) goto L5 else goto L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:9+6
    if ($t13) { goto L5; } else { goto L4; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:17+6
    assume {:print "$at(4,27418,27424)"} true;
L5:

    // $t14 := get_field<0x42::reentrancy_comprehensive::ResourceVault>.resource_count($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:27+20
    assume {:print "$at(4,27428,27448)"} true;
    $t14 := $Dereference($t0)->$resource_count;

    // $t15 := <=($t3, $t14) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:17+30
    call $t15 := $Le($t3, $t14);

    // if ($t15) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:9+6
    if ($t15) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:17+4
    assume {:print "$at(4,27492,27496)"} true;
L7:

    // $t16 := !=($t1, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:17+10
    assume {:print "$at(4,27492,27502)"} true;
    $t16 := !$IsEqual'address'($t1, $t2);

    // if ($t16) goto L9 else goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:9+6
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:692:13+4
    assume {:print "$at(4,27630,27634)"} true;
L9:

    // $t17 := 1000000 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:695:24+7
    assume {:print "$at(4,27698,27705)"} true;
    $t17 := 1000000;
    assume $IsValid'u64'($t17);

    // $t18 := true at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:696:24+4
    assume {:print "$at(4,27731,27735)"} true;
    $t18 := true;
    assume $IsValid'bool'($t18);

    // $t19 := pack 0x42::reentrancy_comprehensive::PendingTransfer($t1, $t2, $t3, $t17, $t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:691:24+174
    assume {:print "$at(4,27599,27773)"} true;
    $t19 := $42_reentrancy_comprehensive_PendingTransfer($t1, $t2, $t3, $t17, $t18);

    // trace_local[transfer]($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:691:24+174
    assume {:print "$track_local(5,37,5):", $t19} $t19 == $t19;

    // $t20 := get_field<0x42::reentrancy_comprehensive::ResourceVault>.resource_count($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:700:32+20
    assume {:print "$at(4,27851,27871)"} true;
    $t20 := $Dereference($t0)->$resource_count;

    // $t21 := -($t20, $t3) on_abort goto L14 with $t22 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:700:32+29
    call $t21 := $Sub($t20, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,27851,27880)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(5,37):", $t22} $t22 == $t22;
        goto L14;
    }

    // $t23 := borrow_field<0x42::reentrancy_comprehensive::ResourceVault>.resource_count($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:700:9+20
    $t23 := $ChildMutation($t0, 0, $Dereference($t0)->$resource_count);

    // write_ref($t23, $t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:700:9+52
    $t23 := $UpdateMutation($t23, $t21);

    // write_back[Reference($t0).resource_count (u64)]($t23) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:700:9+52
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_ResourceVault'_resource_count($Dereference($t0), $Dereference($t23)));

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:700:9+52
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,37,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // $t24 := borrow_field<0x42::reentrancy_comprehensive::ResourceVault>.pending_transfers($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:701:27+28
    assume {:print "$at(4,27909,27937)"} true;
    $t24 := $ChildMutation($t0, 1, $Dereference($t0)->$pending_transfers);

    // vector::push_back<0x42::reentrancy_comprehensive::PendingTransfer>($t24, $t19) on_abort goto L14 with $t22 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:701:9+57
    call $t24 := $1_vector_push_back'$42_reentrancy_comprehensive_PendingTransfer'($t24, $t19);
    if ($abort_flag) {
        assume {:print "$at(4,27891,27948)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(5,37):", $t22} $t22 == $t22;
        goto L14;
    }

    // write_back[Reference($t0).pending_transfers (vector<0x42::reentrancy_comprehensive::PendingTransfer>)]($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:701:9+57
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_ResourceVault'_pending_transfers($Dereference($t0), $Dereference($t24)));

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:701:9+57
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,37,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // if ($t4) goto L10 else goto L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:704:9+92
    assume {:print "$at(4,28026,28118)"} true;
    if ($t4) { goto L10; } else { goto L12; }

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:705:39+2
    assume {:print "$at(4,28089,28091)"} true;
L10:

    // reentrancy_comprehensive::notify_transfer_recipient($t2, $t1, $t3) on_abort goto L14 with $t22 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:705:13+43
    assume {:print "$at(4,28063,28106)"} true;
    call $42_reentrancy_comprehensive_notify_transfer_recipient($t2, $t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(4,28063,28106)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(5,37):", $t22} $t22 == $t22;
        goto L14;
    }

    // label L12 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:710:13+4
    assume {:print "$at(4,28229,28233)"} true;
L12:

    // $t25 := 1000001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:713:30+7
    assume {:print "$at(4,28303,28310)"} true;
    $t25 := 1000001;
    assume $IsValid'u64'($t25);

    // $t26 := pack 0x42::reentrancy_comprehensive::CompletedTransfer($t1, $t2, $t3, $t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:709:25+126
    assume {:print "$at(4,28196,28322)"} true;
    $t26 := $42_reentrancy_comprehensive_CompletedTransfer($t1, $t2, $t3, $t25);

    // trace_local[completed]($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:709:25+126
    assume {:print "$track_local(5,37,6):", $t26} $t26 == $t26;

    // $t27 := borrow_field<0x42::reentrancy_comprehensive::ResourceVault>.completed_transfers($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:715:27+30
    assume {:print "$at(4,28351,28381)"} true;
    $t27 := $ChildMutation($t0, 2, $Dereference($t0)->$completed_transfers);

    // vector::push_back<0x42::reentrancy_comprehensive::CompletedTransfer>($t27, $t26) on_abort goto L14 with $t22 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:715:9+60
    call $t27 := $1_vector_push_back'$42_reentrancy_comprehensive_CompletedTransfer'($t27, $t26);
    if ($abort_flag) {
        assume {:print "$at(4,28333,28393)"} true;
        $t22 := $abort_code;
        assume {:print "$track_abort(5,37):", $t22} $t22 == $t22;
        goto L14;
    }

    // write_back[Reference($t0).completed_transfers (vector<0x42::reentrancy_comprehensive::CompletedTransfer>)]($t27) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:715:9+60
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_ResourceVault'_completed_transfers($Dereference($t0), $Dereference($t27)));

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:715:9+60
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,37,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // $t28 := false at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:718:31+5
    assume {:print "$at(4,28466,28471)"} true;
    $t28 := false;
    assume $IsValid'bool'($t28);

    // $t29 := borrow_field<0x42::reentrancy_comprehensive::ResourceVault>.transfer_lock($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:718:9+19
    $t29 := $ChildMutation($t0, 3, $Dereference($t0)->$transfer_lock);

    // write_ref($t29, $t28) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:718:9+27
    $t29 := $UpdateMutation($t29, $t28);

    // write_back[Reference($t0).transfer_lock (bool)]($t29) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:718:9+27
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_ResourceVault'_transfer_lock($Dereference($t0), $Dereference($t29)));

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:718:9+27
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,37,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // trace_local[vault]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:679:7+1399
    assume {:print "$at(4,27080,28479)"} true;
    $temp_0'$42_reentrancy_comprehensive_ResourceVault' := $Dereference($t0);
    assume {:print "$track_local(5,37,0):", $temp_0'$42_reentrancy_comprehensive_ResourceVault'} $temp_0'$42_reentrancy_comprehensive_ResourceVault' == $temp_0'$42_reentrancy_comprehensive_ResourceVault';

    // goto L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:679:7+1399
    goto L13;

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:9+6
    assume {:print "$at(4,27484,27490)"} true;
L8:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:9+6
    assume {:print "$at(4,27484,27490)"} true;

    // $t30 := 2002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:29+16
    $t30 := 2002;
    assume $IsValid'u64'($t30);

    // trace_abort($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:9+6
    assume {:print "$at(4,27484,27490)"} true;
    assume {:print "$track_abort(5,37):", $t30} $t30 == $t30;

    // $t22 := move($t30) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:9+6
    $t22 := $t30;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:688:9+6
    goto L14;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:9+6
    assume {:print "$at(4,27410,27416)"} true;
L6:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:9+6
    assume {:print "$at(4,27410,27416)"} true;

    // $t31 := 2001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:49+22
    $t31 := 2001;
    assume $IsValid'u64'($t31);

    // trace_abort($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:9+6
    assume {:print "$at(4,27410,27416)"} true;
    assume {:print "$track_abort(5,37):", $t31} $t31 == $t31;

    // $t22 := move($t31) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:9+6
    $t22 := $t31;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:687:9+6
    goto L14;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:9+6
    assume {:print "$at(4,27362,27368)"} true;
L4:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:9+6
    assume {:print "$at(4,27362,27368)"} true;

    // $t32 := 2002 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:29+16
    $t32 := 2002;
    assume $IsValid'u64'($t32);

    // trace_abort($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:9+6
    assume {:print "$at(4,27362,27368)"} true;
    assume {:print "$track_abort(5,37):", $t32} $t32 == $t32;

    // $t22 := move($t32) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:9+6
    $t22 := $t32;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:686:9+6
    goto L14;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:9+6
    assume {:print "$at(4,27210,27216)"} true;
L2:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:9+6
    assume {:print "$at(4,27210,27216)"} true;

    // $t33 := 2004 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:42+21
    $t33 := 2004;
    assume $IsValid'u64'($t33);

    // trace_abort($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:9+6
    assume {:print "$at(4,27210,27216)"} true;
    assume {:print "$track_abort(5,37):", $t33} $t33 == $t33;

    // $t22 := move($t33) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:9+6
    $t22 := $t33;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:682:9+6
    goto L14;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:9+6
    assume {:print "$at(4,27147,27153)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:9+6
    assume {:print "$at(4,27147,27153)"} true;

    // $t34 := 2004 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:39+21
    $t34 := 2004;
    assume $IsValid'u64'($t34);

    // trace_abort($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:9+6
    assume {:print "$at(4,27147,27153)"} true;
    assume {:print "$track_abort(5,37):", $t34} $t34 == $t34;

    // $t22 := move($t34) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:9+6
    $t22 := $t34;

    // goto L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:681:9+6
    goto L14;

    // label L13 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:719:5+1
    assume {:print "$at(4,28478,28479)"} true;
L13:

    // assert Not(select reentrancy_comprehensive::ResourceVault.transfer_lock<0x42::reentrancy_comprehensive::ResourceVault>($t7)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:732:9+57
    assume {:print "$at(4,28931,28988)"} true;
    assert {:msg "assert_failed(4,28931,28988): function does not abort under this condition"}
      !$t7->$transfer_lock;

    // assert Not(select reentrancy_comprehensive::ResourceVault.batch_processing<0x42::reentrancy_comprehensive::ResourceVault>($t7)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:733:9+60
    assume {:print "$at(4,28998,29058)"} true;
    assert {:msg "assert_failed(4,28998,29058): function does not abort under this condition"}
      !$t7->$batch_processing;

    // assert Not(Eq<u64>($t3, 0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:734:9+44
    assume {:print "$at(4,29068,29112)"} true;
    assert {:msg "assert_failed(4,29068,29112): function does not abort under this condition"}
      !$IsEqual'u64'($t3, 0);

    // assert Not(Gt($t3, select reentrancy_comprehensive::ResourceVault.resource_count<0x42::reentrancy_comprehensive::ResourceVault>($t7))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:735:9+68
    assume {:print "$at(4,29122,29190)"} true;
    assert {:msg "assert_failed(4,29122,29190): function does not abort under this condition"}
      !($t3 > $t7->$resource_count);

    // assert Eq<u64>(select reentrancy_comprehensive::ResourceVault.resource_count<0x42::reentrancy_comprehensive::ResourceVault>($t0), Sub(select reentrancy_comprehensive::ResourceVault.resource_count<0x42::reentrancy_comprehensive::ResourceVault>($t7), $t3)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:728:9+67
    assume {:print "$at(4,28721,28788)"} true;
    assert {:msg "assert_failed(4,28721,28788): post-condition does not hold"}
      $IsEqual'u64'($Dereference($t0)->$resource_count, ($t7->$resource_count - $t3));

    // assert Not(select reentrancy_comprehensive::ResourceVault.transfer_lock<0x42::reentrancy_comprehensive::ResourceVault>($t0)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:729:9+29
    assume {:print "$at(4,28798,28827)"} true;
    assert {:msg "assert_failed(4,28798,28827): post-condition does not hold"}
      !$Dereference($t0)->$transfer_lock;

    // assert Eq<num>(Len<0x42::reentrancy_comprehensive::CompletedTransfer>(select reentrancy_comprehensive::ResourceVault.completed_transfers<0x42::reentrancy_comprehensive::ResourceVault>($t0)), Add(Len<0x42::reentrancy_comprehensive::CompletedTransfer>(select reentrancy_comprehensive::ResourceVault.completed_transfers<0x42::reentrancy_comprehensive::ResourceVault>($t7)), 1)) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:730:9+82
    assume {:print "$at(4,28837,28919)"} true;
    assert {:msg "assert_failed(4,28837,28919): post-condition does not hold"}
      $IsEqual'num'(LenVec($Dereference($t0)->$completed_transfers), (LenVec($t7->$completed_transfers) + 1));

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:730:9+82
    $ret0 := $t0;
    return;

    // label L14 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:719:5+1
    assume {:print "$at(4,28478,28479)"} true;
L14:

    // assert Or(Or(Or(select reentrancy_comprehensive::ResourceVault.transfer_lock<0x42::reentrancy_comprehensive::ResourceVault>($t7), select reentrancy_comprehensive::ResourceVault.batch_processing<0x42::reentrancy_comprehensive::ResourceVault>($t7)), Eq<u64>($t3, 0)), Gt($t3, select reentrancy_comprehensive::ResourceVault.resource_count<0x42::reentrancy_comprehensive::ResourceVault>($t7))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:721:5+710
    assume {:print "$at(4,28487,29197)"} true;
    assert {:msg "assert_failed(4,28487,29197): abort not covered by any of the `aborts_if` clauses"}
      ((($t7->$transfer_lock || $t7->$batch_processing) || $IsEqual'u64'($t3, 0)) || ($t3 > $t7->$resource_count));

    // assert Or(Or(Or(And(select reentrancy_comprehensive::ResourceVault.transfer_lock<0x42::reentrancy_comprehensive::ResourceVault>($t7), Eq(2004, $t22)), And(select reentrancy_comprehensive::ResourceVault.batch_processing<0x42::reentrancy_comprehensive::ResourceVault>($t7), Eq(2004, $t22))), And(Eq<u64>($t3, 0), Eq(2002, $t22))), And(Gt($t3, select reentrancy_comprehensive::ResourceVault.resource_count<0x42::reentrancy_comprehensive::ResourceVault>($t7)), Eq(2001, $t22))) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:721:5+710
    assert {:msg "assert_failed(4,28487,29197): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($t7->$transfer_lock && $IsEqual'num'(2004, $t22)) || ($t7->$batch_processing && $IsEqual'num'(2004, $t22))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(2002, $t22))) || (($t3 > $t7->$resource_count) && $IsEqual'num'(2001, $t22)));

    // abort($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:721:5+710
    $abort_code := $t22;
    $abort_flag := true;
    return;

}

// fun reentrancy_comprehensive::withdraw_vulnerable_v1 [baseline] at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:92:5+948
procedure {:inline 1} $42_reentrancy_comprehensive_withdraw_vulnerable_v1(_$t0: $Mutation ($42_reentrancy_comprehensive_Bank), _$t1: int, _$t2: int, _$t3: bool) returns ($ret0: $Mutation ($42_reentrancy_comprehensive_Bank))
{
    // declare local variables
    var $t4: int;
    var $t5: $Mutation ($42_reentrancy_comprehensive_Balance);
    var $t6: Vec ($42_reentrancy_comprehensive_Balance);
    var $t7: int;
    var $t8: int;
    var $t9: Vec ($42_reentrancy_comprehensive_Balance);
    var $t10: int;
    var $t11: bool;
    var $t12: $Mutation (Vec ($42_reentrancy_comprehensive_Balance));
    var $t13: $Mutation ($42_reentrancy_comprehensive_Balance);
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $Mutation (int);
    var $t20: int;
    var $t21: int;
    var $t22: $Mutation (int);
    var $t23: $42_reentrancy_comprehensive_Bank;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t0: $Mutation ($42_reentrancy_comprehensive_Bank);
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $temp_0'$42_reentrancy_comprehensive_Balance': $42_reentrancy_comprehensive_Balance;
    var $temp_0'$42_reentrancy_comprehensive_Bank': $42_reentrancy_comprehensive_Bank;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:92:5+1
    assume {:print "$at(4,3623,3624)"} true;
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,40,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // trace_local[owner]($t1) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:92:5+1
    assume {:print "$track_local(5,40,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:92:5+1
    assume {:print "$track_local(5,40,2):", $t2} $t2 == $t2;

    // trace_local[notify_callbacks]($t3) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:92:5+1
    assume {:print "$track_local(5,40,3):", $t3} $t3 == $t3;

    // $t6 := get_field<0x42::reentrancy_comprehensive::Bank>.balances($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:98:46+14
    assume {:print "$at(4,3818,3832)"} true;
    $t6 := $Dereference($t0)->$balances;

    // $t7 := reentrancy_comprehensive::find_balance_index($t6, $t1) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:98:27+41
    call $t7 := $42_reentrancy_comprehensive_find_balance_index($t6, $t1);
    if ($abort_flag) {
        assume {:print "$at(4,3799,3840)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,40):", $t8} $t8 == $t8;
        goto L10;
    }

    // trace_local[balance_idx]($t7) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:98:27+41
    assume {:print "$track_local(5,40,4):", $t7} $t7 == $t7;

    // $t9 := get_field<0x42::reentrancy_comprehensive::Bank>.balances($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:46+14
    assume {:print "$at(4,3888,3902)"} true;
    $t9 := $Dereference($t0)->$balances;

    // $t10 := vector::length<0x42::reentrancy_comprehensive::Balance>($t9) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:31+30
    call $t10 := $1_vector_length'$42_reentrancy_comprehensive_Balance'($t9);
    if ($abort_flag) {
        assume {:print "$at(4,3873,3903)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,40):", $t8} $t8 == $t8;
        goto L10;
    }

    // $t11 := <($t7, $t10) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:17+44
    call $t11 := $Lt($t7, $t10);

    // if ($t11) goto L1 else goto L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:9+6
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:101:42+18
    assume {:print "$at(4,3974,3992)"} true;
L1:

    // $t12 := borrow_field<0x42::reentrancy_comprehensive::Bank>.balances($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:101:42+18
    assume {:print "$at(4,3974,3992)"} true;
    $t12 := $ChildMutation($t0, 0, $Dereference($t0)->$balances);

    // $t13 := vector::borrow_mut<0x42::reentrancy_comprehensive::Balance>($t12, $t7) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:101:23+51
    call $t13,$t12 := $1_vector_borrow_mut'$42_reentrancy_comprehensive_Balance'($t12, $t7);
    if ($abort_flag) {
        assume {:print "$at(4,3955,4006)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,40):", $t8} $t8 == $t8;
        goto L10;
    }

    // trace_local[balance]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:101:23+51
    $temp_0'$42_reentrancy_comprehensive_Balance' := $Dereference($t13);
    assume {:print "$track_local(5,40,5):", $temp_0'$42_reentrancy_comprehensive_Balance'} $temp_0'$42_reentrancy_comprehensive_Balance' == $temp_0'$42_reentrancy_comprehensive_Balance';

    // $t14 := get_field<0x42::reentrancy_comprehensive::Balance>.amount($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:17+14
    assume {:print "$at(4,4025,4039)"} true;
    $t14 := $Dereference($t13)->$amount;

    // $t15 := >=($t14, $t2) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:17+24
    call $t15 := $Ge($t14, $t2);

    // if ($t15) goto L3 else goto L11 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6
    if ($t15) { goto L3; } else { goto L11; }

    // label L3 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:18+14
    assume {:print "$at(4,4094,4108)"} true;
L3:

    // $t16 := get_field<0x42::reentrancy_comprehensive::Balance>.frozen($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:18+14
    assume {:print "$at(4,4094,4108)"} true;
    $t16 := $Dereference($t13)->$frozen;

    // if ($t16) goto L12 else goto L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:17+15
    if ($t16) { goto L12; } else { goto L5; }

    // label L5 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:26+14
    assume {:print "$at(4,4228,4242)"} true;
L5:

    // $t17 := get_field<0x42::reentrancy_comprehensive::Balance>.amount($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:26+14
    assume {:print "$at(4,4228,4242)"} true;
    $t17 := $Dereference($t13)->$amount;

    // $t18 := -($t17, $t2) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:26+23
    call $t18 := $Sub($t17, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,4228,4251)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,40):", $t8} $t8 == $t8;
        goto L10;
    }

    // $t19 := borrow_field<0x42::reentrancy_comprehensive::Balance>.amount($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:9+14
    $t19 := $ChildMutation($t13, 1, $Dereference($t13)->$amount);

    // write_ref($t19, $t18) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:9+40
    $t19 := $UpdateMutation($t19, $t18);

    // write_back[Reference($t13).amount (u64)]($t19) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:9+40
    $t13 := $UpdateMutation($t13, $Update'$42_reentrancy_comprehensive_Balance'_amount($Dereference($t13), $Dereference($t19)));

    // write_back[Reference($t12)[]]($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:9+40
    $t12 := $UpdateMutation($t12, UpdateVec($Dereference($t12), ReadVec($t13->p, LenVec($t12->p)), $Dereference($t13)));

    // write_back[Reference($t0).balances (vector<0x42::reentrancy_comprehensive::Balance>)]($t12) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:9+40
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_Bank'_balances($Dereference($t0), $Dereference($t12)));

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:106:9+40
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,40,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // $t20 := get_field<0x42::reentrancy_comprehensive::Bank>.total_deposits($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:107:31+19
    assume {:print "$at(4,4305,4324)"} true;
    $t20 := $Dereference($t0)->$total_deposits;

    // $t21 := -($t20, $t2) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:107:31+28
    call $t21 := $Sub($t20, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,4305,4333)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,40):", $t8} $t8 == $t8;
        goto L10;
    }

    // $t22 := borrow_field<0x42::reentrancy_comprehensive::Bank>.total_deposits($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:107:9+19
    $t22 := $ChildMutation($t0, 1, $Dereference($t0)->$total_deposits);

    // write_ref($t22, $t21) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:107:9+50
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t0).total_deposits (u64)]($t22) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:107:9+50
    $t0 := $UpdateMutation($t0, $Update'$42_reentrancy_comprehensive_Bank'_total_deposits($Dereference($t0), $Dereference($t22)));

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:107:9+50
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,40,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // if ($t3) goto L7 else goto L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:110:9+122
    assume {:print "$at(4,4442,4564)"} true;
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:111:42+4
    assume {:print "$at(4,4508,4512)"} true;
L7:

    // $t23 := read_ref($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:111:42+4
    assume {:print "$at(4,4508,4512)"} true;
    $t23 := $Dereference($t0);

    // reentrancy_comprehensive::execute_withdrawal_callbacks($t23, $t1, $t2) on_abort goto L10 with $t8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:111:13+49
    call $42_reentrancy_comprehensive_execute_withdrawal_callbacks($t23, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(4,4479,4528)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(5,40):", $t8} $t8 == $t8;
        goto L10;
    }

    // label L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:97:7+801
    assume {:print "$at(4,3770,4571)"} true;
L8:

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:97:7+801
    assume {:print "$at(4,3770,4571)"} true;
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,40,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // goto L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:97:7+801
    goto L9;

    // label L6 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:110:9+122
    assume {:print "$at(4,4442,4564)"} true;
L6:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:110:9+122
    assume {:print "$at(4,4442,4564)"} true;

    // goto L8 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:110:9+122
    goto L8;

    // label L4 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:9+6
    assume {:print "$at(4,4085,4091)"} true;
L4:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:9+6
    assume {:print "$at(4,4085,4091)"} true;

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:9+6
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,40,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // drop($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:9+6

    // $t24 := 2005 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:34+15
    $t24 := 2005;
    assume $IsValid'u64'($t24);

    // trace_abort($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:9+6
    assume {:print "$at(4,4085,4091)"} true;
    assume {:print "$track_abort(5,40):", $t24} $t24 == $t24;

    // $t8 := move($t24) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:9+6
    $t8 := $t24;

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:103:9+6
    goto L10;

    // label L2 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6
    assume {:print "$at(4,4017,4023)"} true;
L2:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6
    assume {:print "$at(4,4017,4023)"} true;

    // trace_local[bank]($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6
    $temp_0'$42_reentrancy_comprehensive_Bank' := $Dereference($t0);
    assume {:print "$track_local(5,40,0):", $temp_0'$42_reentrancy_comprehensive_Bank'} $temp_0'$42_reentrancy_comprehensive_Bank' == $temp_0'$42_reentrancy_comprehensive_Bank';

    // drop($t13) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6

    // $t25 := 2001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:43+22
    $t25 := 2001;
    assume $IsValid'u64'($t25);

    // trace_abort($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6
    assume {:print "$at(4,4017,4023)"} true;
    assume {:print "$track_abort(5,40):", $t25} $t25 == $t25;

    // $t8 := move($t25) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6
    $t8 := $t25;

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:102:9+6
    goto L10;

    // label L0 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:9+6
    assume {:print "$at(4,3851,3857)"} true;
L0:

    // drop($t0) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:9+6
    assume {:print "$at(4,3851,3857)"} true;

    // $t26 := 2001 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:63+22
    $t26 := 2001;
    assume $IsValid'u64'($t26);

    // trace_abort($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:9+6
    assume {:print "$at(4,3851,3857)"} true;
    assume {:print "$track_abort(5,40):", $t26} $t26 == $t26;

    // $t8 := move($t26) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:9+6
    $t8 := $t26;

    // goto L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:99:9+6
    goto L10;

    // label L9 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:113:5+1
    assume {:print "$at(4,4570,4571)"} true;
L9:

    // return () at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:113:5+1
    assume {:print "$at(4,4570,4571)"} true;
    $ret0 := $t0;
    return;

    // label L10 at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:113:5+1
L10:

    // abort($t8) at /mnt/c/Development/move/source-code/move-security-lab/move_security_lab/sources/reentrancy_vulnerabilities.move:113:5+1
    assume {:print "$at(4,4570,4571)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

    // label L11 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L11:

    // drop($t12) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L2 at <internal>:1:1+10
    goto L2;

    // label L12 at <internal>:1:1+10
L12:

    // drop($t12) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L4 at <internal>:1:1+10
    goto L4;

}
